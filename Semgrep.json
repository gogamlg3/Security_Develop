{"errors": [{"code": 0, "level": "info", "message": "Incompatible rule cpp.lang.correctness.memset-removal.memset-removal:\n This rule requires upgrading Semgrep from version 1.56.0 to at least 1.59.0", "path": "/tmp/tmpl05awxtr.json", "rule_id": "cpp.lang.correctness.memset-removal.memset-removal", "type": ["IncompatibleRule", {"min_version": "1.59.0", "rule_id": "cpp.lang.correctness.memset-removal.memset-removal", "this_version": "1.56.0"}]}, {"code": 0, "level": "info", "message": "Incompatible rule cpp.lang.correctness.sizeof-pointer-type.sizeof-pointer-type:\n This rule requires upgrading Semgrep from version 1.56.0 to at least 1.59.0", "path": "/tmp/tmpl05awxtr.json", "rule_id": "cpp.lang.correctness.sizeof-pointer-type.sizeof-pointer-type", "type": ["IncompatibleRule", {"min_version": "1.59.0", "rule_id": "cpp.lang.correctness.sizeof-pointer-type.sizeof-pointer-type", "this_version": "1.56.0"}]}, {"code": 0, "level": "info", "message": "Incompatible rule cpp.lang.correctness.sizeof-this.sizeof-this:\n This rule requires upgrading Semgrep from version 1.56.0 to at least 1.59.0", "path": "/tmp/tmpl05awxtr.json", "rule_id": "cpp.lang.correctness.sizeof-this.sizeof-this", "type": ["IncompatibleRule", {"min_version": "1.59.0", "rule_id": "cpp.lang.correctness.sizeof-this.sizeof-this", "this_version": "1.56.0"}]}, {"code": 0, "level": "info", "message": "Incompatible rule cpp.lang.security.containers.std-vector-invalidation.std-vector-invalidation:\n This rule requires upgrading Semgrep from version 1.56.0 to at least 1.59.0", "path": "/tmp/tmpl05awxtr.json", "rule_id": "cpp.lang.security.containers.std-vector-invalidation.std-vector-invalidation", "type": ["IncompatibleRule", {"min_version": "1.59.0", "rule_id": "cpp.lang.security.containers.std-vector-invalidation.std-vector-invalidation", "this_version": "1.56.0"}]}, {"code": 0, "level": "info", "message": "Incompatible rule cpp.lang.security.crypto.certificate.curl-disabled-cert-validation.curl-disabled-cert-validation:\n This rule requires upgrading Semgrep from version 1.56.0 to at least 1.59.0", "path": "/tmp/tmpl05awxtr.json", "rule_id": "cpp.lang.security.crypto.certificate.curl-disabled-cert-validation.curl-disabled-cert-validation", "type": ["IncompatibleRule", {"min_version": "1.59.0", "rule_id": "cpp.lang.security.crypto.certificate.curl-disabled-cert-validation.curl-disabled-cert-validation", "this_version": "1.56.0"}]}, {"code": 0, "level": "info", "message": "Incompatible rule cpp.lang.security.crypto.certificate.curl-insecure-required-version.curl-insecure-required-version:\n This rule requires upgrading Semgrep from version 1.56.0 to at least 1.59.0", "path": "/tmp/tmpl05awxtr.json", "rule_id": "cpp.lang.security.crypto.certificate.curl-insecure-required-version.curl-insecure-required-version", "type": ["IncompatibleRule", {"min_version": "1.59.0", "rule_id": "cpp.lang.security.crypto.certificate.curl-insecure-required-version.curl-insecure-required-version", "this_version": "1.56.0"}]}, {"code": 0, "level": "info", "message": "Incompatible rule cpp.lang.security.crypto.certificate.openssl-disabled-cert-validation.openssl-disabled-cert-validation:\n This rule requires upgrading Semgrep from version 1.56.0 to at least 1.59.0", "path": "/tmp/tmpl05awxtr.json", "rule_id": "cpp.lang.security.crypto.certificate.openssl-disabled-cert-validation.openssl-disabled-cert-validation", "type": ["IncompatibleRule", {"min_version": "1.59.0", "rule_id": "cpp.lang.security.crypto.certificate.openssl-disabled-cert-validation.openssl-disabled-cert-validation", "this_version": "1.56.0"}]}, {"code": 0, "level": "info", "message": "Incompatible rule cpp.lang.security.crypto.certificate.openssl-insecure-required-version.openssl-insecure-required-version:\n This rule requires upgrading Semgrep from version 1.56.0 to at least 1.59.0", "path": "/tmp/tmpl05awxtr.json", "rule_id": "cpp.lang.security.crypto.certificate.openssl-insecure-required-version.openssl-insecure-required-version", "type": ["IncompatibleRule", {"min_version": "1.59.0", "rule_id": "cpp.lang.security.crypto.certificate.openssl-insecure-required-version.openssl-insecure-required-version", "this_version": "1.56.0"}]}, {"code": 0, "level": "info", "message": "Incompatible rule cpp.lang.security.crypto.insecure-hash.insecure-hash:\n This rule requires upgrading Semgrep from version 1.56.0 to at least 1.59.0", "path": "/tmp/tmpl05awxtr.json", "rule_id": "cpp.lang.security.crypto.insecure-hash.insecure-hash", "type": ["IncompatibleRule", {"min_version": "1.59.0", "rule_id": "cpp.lang.security.crypto.insecure-hash.insecure-hash", "this_version": "1.56.0"}]}, {"code": 0, "level": "info", "message": "Incompatible rule cpp.lang.security.crypto.key.small-key-size.small-key-size:\n This rule requires upgrading Semgrep from version 1.56.0 to at least 1.59.0", "path": "/tmp/tmpl05awxtr.json", "rule_id": "cpp.lang.security.crypto.key.small-key-size.small-key-size", "type": ["IncompatibleRule", {"min_version": "1.59.0", "rule_id": "cpp.lang.security.crypto.key.small-key-size.small-key-size", "this_version": "1.56.0"}]}, {"code": 0, "level": "info", "message": "Incompatible rule cpp.lang.security.filesystem.file-access-before-action.file-access-before-action:\n This rule requires upgrading Semgrep from version 1.56.0 to at least 1.59.0", "path": "/tmp/tmpl05awxtr.json", "rule_id": "cpp.lang.security.filesystem.file-access-before-action.file-access-before-action", "type": ["IncompatibleRule", {"min_version": "1.59.0", "rule_id": "cpp.lang.security.filesystem.file-access-before-action.file-access-before-action", "this_version": "1.56.0"}]}, {"code": 0, "level": "info", "message": "Incompatible rule cpp.lang.security.filesystem.file-stat-before-action.file-stat-before-action:\n This rule requires upgrading Semgrep from version 1.56.0 to at least 1.59.0", "path": "/tmp/tmpl05awxtr.json", "rule_id": "cpp.lang.security.filesystem.file-stat-before-action.file-stat-before-action", "type": ["IncompatibleRule", {"min_version": "1.59.0", "rule_id": "cpp.lang.security.filesystem.file-stat-before-action.file-stat-before-action", "this_version": "1.56.0"}]}, {"code": 0, "level": "info", "message": "Incompatible rule cpp.lang.security.filesystem.path-manipulation.path-manipulation:\n This rule requires upgrading Semgrep from version 1.56.0 to at least 1.59.0", "path": "/tmp/tmpl05awxtr.json", "rule_id": "cpp.lang.security.filesystem.path-manipulation.path-manipulation", "type": ["IncompatibleRule", {"min_version": "1.59.0", "rule_id": "cpp.lang.security.filesystem.path-manipulation.path-manipulation", "this_version": "1.56.0"}]}, {"code": 0, "level": "info", "message": "Incompatible rule cpp.lang.security.filesystem.world-writable-file.world-writable-file:\n This rule requires upgrading Semgrep from version 1.56.0 to at least 1.59.0", "path": "/tmp/tmpl05awxtr.json", "rule_id": "cpp.lang.security.filesystem.world-writable-file.world-writable-file", "type": ["IncompatibleRule", {"min_version": "1.59.0", "rule_id": "cpp.lang.security.filesystem.world-writable-file.world-writable-file", "this_version": "1.56.0"}]}, {"code": 0, "level": "info", "message": "Incompatible rule cpp.lang.security.format-string.format-string-injection.format-string-injection:\n This rule requires upgrading Semgrep from version 1.56.0 to at least 1.59.0", "path": "/tmp/tmpl05awxtr.json", "rule_id": "cpp.lang.security.format-string.format-string-injection.format-string-injection", "type": ["IncompatibleRule", {"min_version": "1.59.0", "rule_id": "cpp.lang.security.format-string.format-string-injection.format-string-injection", "this_version": "1.56.0"}]}, {"code": 0, "level": "info", "message": "Incompatible rule cpp.lang.security.ldap.ldap-injection-dn.ldap-injection-dn:\n This rule requires upgrading Semgrep from version 1.56.0 to at least 1.59.0", "path": "/tmp/tmpl05awxtr.json", "rule_id": "cpp.lang.security.ldap.ldap-injection-dn.ldap-injection-dn", "type": ["IncompatibleRule", {"min_version": "1.59.0", "rule_id": "cpp.lang.security.ldap.ldap-injection-dn.ldap-injection-dn", "this_version": "1.56.0"}]}, {"code": 0, "level": "info", "message": "Incompatible rule cpp.lang.security.ldap.ldap-injection-filter.ldap-injection-filter:\n This rule requires upgrading Semgrep from version 1.56.0 to at least 1.59.0", "path": "/tmp/tmpl05awxtr.json", "rule_id": "cpp.lang.security.ldap.ldap-injection-filter.ldap-injection-filter", "type": ["IncompatibleRule", {"min_version": "1.59.0", "rule_id": "cpp.lang.security.ldap.ldap-injection-filter.ldap-injection-filter", "this_version": "1.56.0"}]}, {"code": 0, "level": "info", "message": "Incompatible rule cpp.lang.security.libraries.dynamic-library-path.dynamic-library-path:\n This rule requires upgrading Semgrep from version 1.56.0 to at least 1.59.0", "path": "/tmp/tmpl05awxtr.json", "rule_id": "cpp.lang.security.libraries.dynamic-library-path.dynamic-library-path", "type": ["IncompatibleRule", {"min_version": "1.59.0", "rule_id": "cpp.lang.security.libraries.dynamic-library-path.dynamic-library-path", "this_version": "1.56.0"}]}, {"code": 0, "level": "info", "message": "Incompatible rule cpp.lang.security.memory.allocation.tainted-allocation-size.tainted-allocation-size:\n This rule requires upgrading Semgrep from version 1.56.0 to at least 1.59.0", "path": "/tmp/tmpl05awxtr.json", "rule_id": "cpp.lang.security.memory.allocation.tainted-allocation-size.tainted-allocation-size", "type": ["IncompatibleRule", {"min_version": "1.59.0", "rule_id": "cpp.lang.security.memory.allocation.tainted-allocation-size.tainted-allocation-size", "this_version": "1.56.0"}]}, {"code": 0, "level": "info", "message": "Incompatible rule cpp.lang.security.memory.deallocation.double-delete.double-delete:\n This rule requires upgrading Semgrep from version 1.56.0 to at least 1.59.0", "path": "/tmp/tmpl05awxtr.json", "rule_id": "cpp.lang.security.memory.deallocation.double-delete.double-delete", "type": ["IncompatibleRule", {"min_version": "1.59.0", "rule_id": "cpp.lang.security.memory.deallocation.double-delete.double-delete", "this_version": "1.56.0"}]}, {"code": 0, "level": "info", "message": "Incompatible rule cpp.lang.security.memory.deallocation.double-free.double-free:\n This rule requires upgrading Semgrep from version 1.56.0 to at least 1.59.0", "path": "/tmp/tmpl05awxtr.json", "rule_id": "cpp.lang.security.memory.deallocation.double-free.double-free", "type": ["IncompatibleRule", {"min_version": "1.59.0", "rule_id": "cpp.lang.security.memory.deallocation.double-free.double-free", "this_version": "1.56.0"}]}, {"code": 0, "level": "info", "message": "Incompatible rule cpp.lang.security.memory.negative-return-value-array-index.negative-return-value-array-index:\n This rule requires upgrading Semgrep from version 1.56.0 to at least 1.59.0", "path": "/tmp/tmpl05awxtr.json", "rule_id": "cpp.lang.security.memory.negative-return-value-array-index.negative-return-value-array-index", "type": ["IncompatibleRule", {"min_version": "1.59.0", "rule_id": "cpp.lang.security.memory.negative-return-value-array-index.negative-return-value-array-index", "this_version": "1.56.0"}]}, {"code": 0, "level": "info", "message": "Incompatible rule cpp.lang.security.memory.null-deref.null-library-function.null-library-function:\n This rule requires upgrading Semgrep from version 1.56.0 to at least 1.59.0", "path": "/tmp/tmpl05awxtr.json", "rule_id": "cpp.lang.security.memory.null-deref.null-library-function.null-library-function", "type": ["IncompatibleRule", {"min_version": "1.59.0", "rule_id": "cpp.lang.security.memory.null-deref.null-library-function.null-library-function", "this_version": "1.56.0"}]}, {"code": 0, "level": "info", "message": "Incompatible rule cpp.lang.security.memory.unvalidated-array-index.unvalidated-array-index:\n This rule requires upgrading Semgrep from version 1.56.0 to at least 1.59.0", "path": "/tmp/tmpl05awxtr.json", "rule_id": "cpp.lang.security.memory.unvalidated-array-index.unvalidated-array-index", "type": ["IncompatibleRule", {"min_version": "1.59.0", "rule_id": "cpp.lang.security.memory.unvalidated-array-index.unvalidated-array-index", "this_version": "1.56.0"}]}, {"code": 0, "level": "info", "message": "Incompatible rule cpp.lang.security.rng.predictable-seed-rng-constant.predictable-seed-rng-constant:\n This rule requires upgrading Semgrep from version 1.56.0 to at least 1.59.0", "path": "/tmp/tmpl05awxtr.json", "rule_id": "cpp.lang.security.rng.predictable-seed-rng-constant.predictable-seed-rng-constant", "type": ["IncompatibleRule", {"min_version": "1.59.0", "rule_id": "cpp.lang.security.rng.predictable-seed-rng-constant.predictable-seed-rng-constant", "this_version": "1.56.0"}]}, {"code": 0, "level": "info", "message": "Incompatible rule cpp.lang.security.rng.predictable-seed-rng-time.predictable-seed-rng-time:\n This rule requires upgrading Semgrep from version 1.56.0 to at least 1.59.0", "path": "/tmp/tmpl05awxtr.json", "rule_id": "cpp.lang.security.rng.predictable-seed-rng-time.predictable-seed-rng-time", "type": ["IncompatibleRule", {"min_version": "1.59.0", "rule_id": "cpp.lang.security.rng.predictable-seed-rng-time.predictable-seed-rng-time", "this_version": "1.56.0"}]}, {"code": 0, "level": "info", "message": "Incompatible rule cpp.lang.security.sql.sql-injection.sql-injection:\n This rule requires upgrading Semgrep from version 1.56.0 to at least 1.59.0", "path": "/tmp/tmpl05awxtr.json", "rule_id": "cpp.lang.security.sql.sql-injection.sql-injection", "type": ["IncompatibleRule", {"min_version": "1.59.0", "rule_id": "cpp.lang.security.sql.sql-injection.sql-injection", "this_version": "1.56.0"}]}, {"code": 0, "level": "info", "message": "Incompatible rule cpp.lang.security.strings.alloc-strlen.alloc-strlen:\n This rule requires upgrading Semgrep from version 1.56.0 to at least 1.59.0", "path": "/tmp/tmpl05awxtr.json", "rule_id": "cpp.lang.security.strings.alloc-strlen.alloc-strlen", "type": ["IncompatibleRule", {"min_version": "1.59.0", "rule_id": "cpp.lang.security.strings.alloc-strlen.alloc-strlen", "this_version": "1.56.0"}]}, {"code": 0, "level": "info", "message": "Incompatible rule cpp.lang.security.strings.missing-nul-cpp-string-memcpy.missing-nul-cpp-string-memcpy:\n This rule requires upgrading Semgrep from version 1.56.0 to at least 1.59.0", "path": "/tmp/tmpl05awxtr.json", "rule_id": "cpp.lang.security.strings.missing-nul-cpp-string-memcpy.missing-nul-cpp-string-memcpy", "type": ["IncompatibleRule", {"min_version": "1.59.0", "rule_id": "cpp.lang.security.strings.missing-nul-cpp-string-memcpy.missing-nul-cpp-string-memcpy", "this_version": "1.56.0"}]}, {"code": 0, "level": "info", "message": "Incompatible rule cpp.lang.security.strings.narrow-to-wide-string-mismatch.narrow-to-wide-string-mismatch:\n This rule requires upgrading Semgrep from version 1.56.0 to at least 1.59.0", "path": "/tmp/tmpl05awxtr.json", "rule_id": "cpp.lang.security.strings.narrow-to-wide-string-mismatch.narrow-to-wide-string-mismatch", "type": ["IncompatibleRule", {"min_version": "1.59.0", "rule_id": "cpp.lang.security.strings.narrow-to-wide-string-mismatch.narrow-to-wide-string-mismatch", "this_version": "1.56.0"}]}, {"code": 0, "level": "info", "message": "Incompatible rule cpp.lang.security.strings.readlink-null-terminator.readlink-null-terminator:\n This rule requires upgrading Semgrep from version 1.56.0 to at least 1.59.0", "path": "/tmp/tmpl05awxtr.json", "rule_id": "cpp.lang.security.strings.readlink-null-terminator.readlink-null-terminator", "type": ["IncompatibleRule", {"min_version": "1.59.0", "rule_id": "cpp.lang.security.strings.readlink-null-terminator.readlink-null-terminator", "this_version": "1.56.0"}]}, {"code": 0, "level": "info", "message": "Incompatible rule cpp.lang.security.strings.return-c-str.return-c-str:\n This rule requires upgrading Semgrep from version 1.56.0 to at least 1.59.0", "path": "/tmp/tmpl05awxtr.json", "rule_id": "cpp.lang.security.strings.return-c-str.return-c-str", "type": ["IncompatibleRule", {"min_version": "1.59.0", "rule_id": "cpp.lang.security.strings.return-c-str.return-c-str", "this_version": "1.56.0"}]}, {"code": 0, "level": "info", "message": "Incompatible rule cpp.lang.security.strings.snprintf-return-value-length.snprintf-return-value-length:\n This rule requires upgrading Semgrep from version 1.56.0 to at least 1.59.0", "path": "/tmp/tmpl05awxtr.json", "rule_id": "cpp.lang.security.strings.snprintf-return-value-length.snprintf-return-value-length", "type": ["IncompatibleRule", {"min_version": "1.59.0", "rule_id": "cpp.lang.security.strings.snprintf-return-value-length.snprintf-return-value-length", "this_version": "1.56.0"}]}, {"code": 0, "level": "info", "message": "Incompatible rule cpp.lang.security.strings.snprintf-return-value-snprintf.snprintf-return-value-snprintf:\n This rule requires upgrading Semgrep from version 1.56.0 to at least 1.59.0", "path": "/tmp/tmpl05awxtr.json", "rule_id": "cpp.lang.security.strings.snprintf-return-value-snprintf.snprintf-return-value-snprintf", "type": ["IncompatibleRule", {"min_version": "1.59.0", "rule_id": "cpp.lang.security.strings.snprintf-return-value-snprintf.snprintf-return-value-snprintf", "this_version": "1.56.0"}]}, {"code": 0, "level": "info", "message": "Incompatible rule cpp.lang.security.strings.snprintf-source-size.snprintf-source-size:\n This rule requires upgrading Semgrep from version 1.56.0 to at least 1.59.0", "path": "/tmp/tmpl05awxtr.json", "rule_id": "cpp.lang.security.strings.snprintf-source-size.snprintf-source-size", "type": ["IncompatibleRule", {"min_version": "1.59.0", "rule_id": "cpp.lang.security.strings.snprintf-source-size.snprintf-source-size", "this_version": "1.56.0"}]}, {"code": 0, "level": "info", "message": "Incompatible rule cpp.lang.security.strings.std-string-npos.std-string-npos:\n This rule requires upgrading Semgrep from version 1.56.0 to at least 1.59.0", "path": "/tmp/tmpl05awxtr.json", "rule_id": "cpp.lang.security.strings.std-string-npos.std-string-npos", "type": ["IncompatibleRule", {"min_version": "1.59.0", "rule_id": "cpp.lang.security.strings.std-string-npos.std-string-npos", "this_version": "1.56.0"}]}, {"code": 0, "level": "info", "message": "Incompatible rule cpp.lang.security.strings.string-view-data-null-terminator.string-view-data-null-terminator:\n This rule requires upgrading Semgrep from version 1.56.0 to at least 1.59.0", "path": "/tmp/tmpl05awxtr.json", "rule_id": "cpp.lang.security.strings.string-view-data-null-terminator.string-view-data-null-terminator", "type": ["IncompatibleRule", {"min_version": "1.59.0", "rule_id": "cpp.lang.security.strings.string-view-data-null-terminator.string-view-data-null-terminator", "this_version": "1.56.0"}]}, {"code": 0, "level": "info", "message": "Incompatible rule cpp.lang.security.strings.string-view-temporary-string.string-view-temporary-string:\n This rule requires upgrading Semgrep from version 1.56.0 to at least 1.59.0", "path": "/tmp/tmpl05awxtr.json", "rule_id": "cpp.lang.security.strings.string-view-temporary-string.string-view-temporary-string", "type": ["IncompatibleRule", {"min_version": "1.59.0", "rule_id": "cpp.lang.security.strings.string-view-temporary-string.string-view-temporary-string", "this_version": "1.56.0"}]}, {"code": 0, "level": "info", "message": "Incompatible rule cpp.lang.security.strings.unbounded-copy-to-stack-buffer.unbounded-copy-to-stack-buffer:\n This rule requires upgrading Semgrep from version 1.56.0 to at least 1.59.0", "path": "/tmp/tmpl05awxtr.json", "rule_id": "cpp.lang.security.strings.unbounded-copy-to-stack-buffer.unbounded-copy-to-stack-buffer", "type": ["IncompatibleRule", {"min_version": "1.59.0", "rule_id": "cpp.lang.security.strings.unbounded-copy-to-stack-buffer.unbounded-copy-to-stack-buffer", "this_version": "1.56.0"}]}, {"code": 0, "level": "info", "message": "Incompatible rule cpp.lang.security.strings.wide-to-narrow-string-mismatch.wide-to-narrow-string-mismatch:\n This rule requires upgrading Semgrep from version 1.56.0 to at least 1.59.0", "path": "/tmp/tmpl05awxtr.json", "rule_id": "cpp.lang.security.strings.wide-to-narrow-string-mismatch.wide-to-narrow-string-mismatch", "type": ["IncompatibleRule", {"min_version": "1.59.0", "rule_id": "cpp.lang.security.strings.wide-to-narrow-string-mismatch.wide-to-narrow-string-mismatch", "this_version": "1.56.0"}]}, {"code": 0, "level": "info", "message": "Incompatible rule cpp.lang.security.system-command.command-injection-path.command-injection-path:\n This rule requires upgrading Semgrep from version 1.56.0 to at least 1.59.0", "path": "/tmp/tmpl05awxtr.json", "rule_id": "cpp.lang.security.system-command.command-injection-path.command-injection-path", "type": ["IncompatibleRule", {"min_version": "1.59.0", "rule_id": "cpp.lang.security.system-command.command-injection-path.command-injection-path", "this_version": "1.56.0"}]}, {"code": 0, "level": "info", "message": "Incompatible rule cpp.lang.security.system-command.dont-call-system.dont-call-system:\n This rule requires upgrading Semgrep from version 1.56.0 to at least 1.59.0", "path": "/tmp/tmpl05awxtr.json", "rule_id": "cpp.lang.security.system-command.dont-call-system.dont-call-system", "type": ["IncompatibleRule", {"min_version": "1.59.0", "rule_id": "cpp.lang.security.system-command.dont-call-system.dont-call-system", "this_version": "1.56.0"}]}, {"code": 0, "level": "info", "message": "Incompatible rule cpp.lang.security.uri.http-url.http-url:\n This rule requires upgrading Semgrep from version 1.56.0 to at least 1.59.0", "path": "/tmp/tmpl05awxtr.json", "rule_id": "cpp.lang.security.uri.http-url.http-url", "type": ["IncompatibleRule", {"min_version": "1.59.0", "rule_id": "cpp.lang.security.uri.http-url.http-url", "this_version": "1.56.0"}]}, {"code": 0, "level": "info", "message": "Incompatible rule cpp.lang.security.uri.url-manipulation-generic.url-manipulation-generic:\n This rule requires upgrading Semgrep from version 1.56.0 to at least 1.59.0", "path": "/tmp/tmpl05awxtr.json", "rule_id": "cpp.lang.security.uri.url-manipulation-generic.url-manipulation-generic", "type": ["IncompatibleRule", {"min_version": "1.59.0", "rule_id": "cpp.lang.security.uri.url-manipulation-generic.url-manipulation-generic", "this_version": "1.56.0"}]}, {"code": 0, "level": "info", "message": "Incompatible rule cpp.lang.security.use-after-free.local-variable-malloc-free.local-variable-malloc-free:\n This rule requires upgrading Semgrep from version 1.56.0 to at least 1.59.0", "path": "/tmp/tmpl05awxtr.json", "rule_id": "cpp.lang.security.use-after-free.local-variable-malloc-free.local-variable-malloc-free", "type": ["IncompatibleRule", {"min_version": "1.59.0", "rule_id": "cpp.lang.security.use-after-free.local-variable-malloc-free.local-variable-malloc-free", "this_version": "1.56.0"}]}, {"code": 0, "level": "info", "message": "Incompatible rule cpp.lang.security.use-after-free.local-variable-new-delete.local-variable-new-delete:\n This rule requires upgrading Semgrep from version 1.56.0 to at least 1.59.0", "path": "/tmp/tmpl05awxtr.json", "rule_id": "cpp.lang.security.use-after-free.local-variable-new-delete.local-variable-new-delete", "type": ["IncompatibleRule", {"min_version": "1.59.0", "rule_id": "cpp.lang.security.use-after-free.local-variable-new-delete.local-variable-new-delete", "this_version": "1.56.0"}]}, {"code": 0, "level": "info", "message": "Incompatible rule cpp.libxml2.security.libxml2-audit-parser.libxml2-audit-parser:\n This rule requires upgrading Semgrep from version 1.56.0 to at least 1.59.0", "path": "/tmp/tmpl05awxtr.json", "rule_id": "cpp.libxml2.security.libxml2-audit-parser.libxml2-audit-parser", "type": ["IncompatibleRule", {"min_version": "1.59.0", "rule_id": "cpp.libxml2.security.libxml2-audit-parser.libxml2-audit-parser", "this_version": "1.56.0"}]}, {"code": 0, "level": "info", "message": "Incompatible rule cpp.libxml2.security.libxml2-expand-local-entities.libxml2-expand-local-entities:\n This rule requires upgrading Semgrep from version 1.56.0 to at least 1.59.0", "path": "/tmp/tmpl05awxtr.json", "rule_id": "cpp.libxml2.security.libxml2-expand-local-entities.libxml2-expand-local-entities", "type": ["IncompatibleRule", {"min_version": "1.59.0", "rule_id": "cpp.libxml2.security.libxml2-expand-local-entities.libxml2-expand-local-entities", "this_version": "1.56.0"}]}, {"code": 0, "level": "info", "message": "Incompatible rule cpp.libxml2.security.libxml2-expand-remote-dtd.libxml2-expand-remote-dtd:\n This rule requires upgrading Semgrep from version 1.56.0 to at least 1.59.0", "path": "/tmp/tmpl05awxtr.json", "rule_id": "cpp.libxml2.security.libxml2-expand-remote-dtd.libxml2-expand-remote-dtd", "type": ["IncompatibleRule", {"min_version": "1.59.0", "rule_id": "cpp.libxml2.security.libxml2-expand-remote-dtd.libxml2-expand-remote-dtd", "this_version": "1.56.0"}]}, {"code": 0, "level": "info", "message": "Incompatible rule cpp.libxml2.security.libxml2-expand-xinclude.libxml2-expand-xinclude:\n This rule requires upgrading Semgrep from version 1.56.0 to at least 1.59.0", "path": "/tmp/tmpl05awxtr.json", "rule_id": "cpp.libxml2.security.libxml2-expand-xinclude.libxml2-expand-xinclude", "type": ["IncompatibleRule", {"min_version": "1.59.0", "rule_id": "cpp.libxml2.security.libxml2-expand-xinclude.libxml2-expand-xinclude", "this_version": "1.56.0"}]}, {"code": 0, "level": "info", "message": "Incompatible rule cpp.lang.security.containers.std-return-data.std-return-data:\n This rule requires upgrading Semgrep from version 1.56.0 to at least 1.59.0", "path": "/tmp/tmpl05awxtr.json", "rule_id": "cpp.lang.security.containers.std-return-data.std-return-data", "type": ["IncompatibleRule", {"min_version": "1.59.0", "rule_id": "cpp.lang.security.containers.std-return-data.std-return-data", "this_version": "1.56.0"}]}, {"code": 3, "level": "warn", "message": "Syntax error at line docs/pdf.html:1:\n `Damn Vulnerable Web Application (DVWA)` was unexpected", "path": "docs/pdf.html", "spans": [{"end": {"col": 39, "line": 1, "offset": 38}, "file": "docs/pdf.html", "start": {"col": 1, "line": 1, "offset": 0}}], "type": ["PartialParsing", [{"end": {"col": 39, "line": 1, "offset": 38}, "path": "docs/pdf.html", "start": {"col": 1, "line": 1, "offset": 0}}]]}, {"code": 3, "level": "warn", "message": "Syntax error at line .github/workflows/docker-image.yml:22:\n When parsing a snippet as Bash for metavariable-pattern in rule 'yaml.github-actions.security.curl-eval.curl-eval', `${{` was unexpected", "path": ".github/workflows/docker-image.yml", "spans": [{"end": {"col": 33, "line": 22, "offset": 425}, "file": ".github/workflows/docker-image.yml", "start": {"col": 30, "line": 22, "offset": 422}}, {"end": {"col": 31, "line": 24, "offset": 434}, "file": ".github/workflows/docker-image.yml", "start": {"col": 19, "line": 24, "offset": 422}}, {"end": {"col": 19, "line": 25, "offset": 434}, "file": ".github/workflows/docker-image.yml", "start": {"col": 7, "line": 25, "offset": 422}}, {"end": {"col": 30, "line": 27, "offset": 434}, "file": ".github/workflows/docker-image.yml", "start": {"col": 18, "line": 27, "offset": 422}}], "type": ["PartialParsing", [{"end": {"col": 33, "line": 22, "offset": 425}, "path": ".github/workflows/docker-image.yml", "start": {"col": 30, "line": 22, "offset": 422}}, {"end": {"col": 31, "line": 24, "offset": 434}, "path": ".github/workflows/docker-image.yml", "start": {"col": 19, "line": 24, "offset": 422}}, {"end": {"col": 19, "line": 25, "offset": 434}, "path": ".github/workflows/docker-image.yml", "start": {"col": 7, "line": 25, "offset": 422}}, {"end": {"col": 30, "line": 27, "offset": 434}, "path": ".github/workflows/docker-image.yml", "start": {"col": 18, "line": 27, "offset": 422}}]]}], "interfile_languages_used": [], "paths": {"scanned": [".dockerignore", ".gitattributes", ".github/FUNDING.yml", ".github/ISSUE_TEMPLATE/bug-report---installation.md", ".github/ISSUE_TEMPLATE/bug-report---vulnerability.md", ".github/ISSUE_TEMPLATE/i-m-stuck.md", ".github/workflows/codeql-analysis.yml", ".github/workflows/docker-image.yml", ".github/workflows/pytest.yml", ".github/workflows/shiftleft-analysis.yml", ".gitignore", "CHANGELOG.md", "COPYING.txt", "Dockerfile", "README.ar.md", "README.es.md", "README.fa.md", "README.fr.md", "README.id.md", "README.md", "README.pt.md", "README.tr.md", "README.zh.md", "SECURITY.md", "about.php", "compose.yml", "config/config.inc.php.dist", "database/create_mssql_db.sql", "database/create_oracle_db.sql", "database/create_postgresql_db.sql", "database/create_sqlite_db.sql", "database/sqli.db", "database/sqli.db.dist", "docs/DVWA_v1.3.pdf", "docs/graphics/docker/detail.png", "docs/graphics/docker/overview.png", "docs/pdf.html", "dvwa/css/help.css", "dvwa/css/login.css", "dvwa/css/main.css", "dvwa/css/source.css", "dvwa/images/dollar.png", "dvwa/images/lock.png", "dvwa/images/login_logo.png", "dvwa/images/logo.png", "dvwa/images/spanner.png", "dvwa/images/warning.png", "dvwa/includes/DBMS/MySQL.php", "dvwa/includes/DBMS/PGSQL.php", "dvwa/includes/Parsedown.php", "dvwa/includes/dvwaPage.inc.php", "dvwa/js/add_event_listeners.js", "dvwa/js/dvwaPage.js", "external/recaptcha/recaptchalib.php", "favicon.ico", "hackable/flags/fi.php", "hackable/uploads/dvwa_email.png", "hackable/users/1337.jpg", "hackable/users/admin.jpg", "hackable/users/gordonb.jpg", "hackable/users/pablo.jpg", "hackable/users/smithy.jpg", "index.php", "instructions.php", "login.php", "logout.php", "php.ini", "phpinfo.php", "robots.txt", "security.php", "security.txt", "setup.php", "vulnerabilities/authbypass/authbypass.js", "vulnerabilities/authbypass/change_user_details.php", "vulnerabilities/authbypass/get_user_data.php", "vulnerabilities/authbypass/help/help.php", "vulnerabilities/authbypass/index.php", "vulnerabilities/authbypass/source/high.php", "vulnerabilities/authbypass/source/impossible.php", "vulnerabilities/authbypass/source/low.php", "vulnerabilities/authbypass/source/medium.php", "vulnerabilities/brute/help/help.php", "vulnerabilities/brute/index.php", "vulnerabilities/brute/source/high.php", "vulnerabilities/brute/source/impossible.php", "vulnerabilities/brute/source/low.php", "vulnerabilities/brute/source/medium.php", "vulnerabilities/captcha/help/help.php", "vulnerabilities/captcha/index.php", "vulnerabilities/captcha/source/high.php", "vulnerabilities/captcha/source/impossible.php", "vulnerabilities/captcha/source/low.php", "vulnerabilities/captcha/source/medium.php", "vulnerabilities/csp/help/help.php", "vulnerabilities/csp/index.php", "vulnerabilities/csp/source/high.js", "vulnerabilities/csp/source/high.php", "vulnerabilities/csp/source/impossible.js", "vulnerabilities/csp/source/impossible.php", "vulnerabilities/csp/source/jsonp.php", "vulnerabilities/csp/source/jsonp_impossible.php", "vulnerabilities/csp/source/low.php", "vulnerabilities/csp/source/medium.php", "vulnerabilities/csrf/help/help.php", "vulnerabilities/csrf/index.php", "vulnerabilities/csrf/source/high.php", "vulnerabilities/csrf/source/impossible.php", "vulnerabilities/csrf/source/low.php", "vulnerabilities/csrf/source/medium.php", "vulnerabilities/csrf/test_credentials.php", "vulnerabilities/exec/help/help.php", "vulnerabilities/exec/index.php", "vulnerabilities/exec/source/high.php", "vulnerabilities/exec/source/impossible.php", "vulnerabilities/exec/source/low.php", "vulnerabilities/exec/source/medium.php", "vulnerabilities/fi/file1.php", "vulnerabilities/fi/file2.php", "vulnerabilities/fi/file3.php", "vulnerabilities/fi/file4.php", "vulnerabilities/fi/help/help.php", "vulnerabilities/fi/include.php", "vulnerabilities/fi/index.php", "vulnerabilities/fi/source/high.php", "vulnerabilities/fi/source/impossible.php", "vulnerabilities/fi/source/low.php", "vulnerabilities/fi/source/medium.php", "vulnerabilities/javascript/help/help.php", "vulnerabilities/javascript/index.php", "vulnerabilities/javascript/source/high.js", "vulnerabilities/javascript/source/high.php", "vulnerabilities/javascript/source/high_unobfuscated.js", "vulnerabilities/javascript/source/impossible.php", "vulnerabilities/javascript/source/low.php", "vulnerabilities/javascript/source/medium.js", "vulnerabilities/javascript/source/medium.php", "vulnerabilities/open_redirect/help/help.php", "vulnerabilities/open_redirect/index.php", "vulnerabilities/open_redirect/source/high.php", "vulnerabilities/open_redirect/source/impossible.php", "vulnerabilities/open_redirect/source/info.php", "vulnerabilities/open_redirect/source/low.php", "vulnerabilities/open_redirect/source/medium.php", "vulnerabilities/sqli/help/help.php", "vulnerabilities/sqli/index.php", "vulnerabilities/sqli/session-input.php", "vulnerabilities/sqli/source/high.php", "vulnerabilities/sqli/source/impossible.php", "vulnerabilities/sqli/source/low.php", "vulnerabilities/sqli/source/medium.php", "vulnerabilities/sqli/test.php", "vulnerabilities/sqli_blind/cookie-input.php", "vulnerabilities/sqli_blind/help/help.php", "vulnerabilities/sqli_blind/index.php", "vulnerabilities/sqli_blind/source/high.php", "vulnerabilities/sqli_blind/source/impossible.php", "vulnerabilities/sqli_blind/source/low.php", "vulnerabilities/sqli_blind/source/medium.php", "vulnerabilities/upload/help/help.php", "vulnerabilities/upload/index.php", "vulnerabilities/upload/source/high.php", "vulnerabilities/upload/source/impossible.php", "vulnerabilities/upload/source/low.php", "vulnerabilities/upload/source/medium.php", "vulnerabilities/view_help.php", "vulnerabilities/view_source.php", "vulnerabilities/view_source_all.php", "vulnerabilities/weak_id/help/help.php", "vulnerabilities/weak_id/index.php", "vulnerabilities/weak_id/source/high.php", "vulnerabilities/weak_id/source/impossible.php", "vulnerabilities/weak_id/source/low.php", "vulnerabilities/weak_id/source/medium.php", "vulnerabilities/xss_d/help/help.php", "vulnerabilities/xss_d/index.php", "vulnerabilities/xss_d/source/high.php", "vulnerabilities/xss_d/source/impossible.php", "vulnerabilities/xss_d/source/low.php", "vulnerabilities/xss_d/source/medium.php", "vulnerabilities/xss_r/help/help.php", "vulnerabilities/xss_r/index.php", "vulnerabilities/xss_r/source/high.php", "vulnerabilities/xss_r/source/impossible.php", "vulnerabilities/xss_r/source/low.php", "vulnerabilities/xss_r/source/medium.php", "vulnerabilities/xss_s/help/help.php", "vulnerabilities/xss_s/index.php", "vulnerabilities/xss_s/source/high.php", "vulnerabilities/xss_s/source/impossible.php", "vulnerabilities/xss_s/source/low.php", "vulnerabilities/xss_s/source/medium.php"]}, "results": [{"check_id": "php.lang.security.taint-cookie-secure-false.taint-cookie-secure-false", "end": {"col": 59, "line": 197, "offset": 4931}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 59, "line": 197, "offset": 4931}, "path": "dvwa/includes/dvwaPage.inc.php", "start": {"col": 54, "line": 197, "offset": 4926}}, "false"]], "taint_source": ["CliLoc", [{"end": {"col": 59, "line": 197, "offset": 4931}, "path": "dvwa/includes/dvwaPage.inc.php", "start": {"col": 54, "line": 197, "offset": 4926}}, "false"]]}, "engine_kind": "OSS", "fingerprint": "b90eda505e4f60c9d5637e9589bd7158d63022d1481a769776e870bc913476b56c8dd60acd967fba77c3b5bd4010a00f8a7ab4139b7e5bd6b44d7bdb46f9af1c_0", "is_ignored": false, "lines": "\tsetcookie( 'security', $pSecurityLevel, 0, \"/\", \"\", false, $httponly );", "message": "Secure cookie flag is explicitly disabled. This will cause cookies to be transmitted over unencrypted HTTP connections which can allow theft of confidential user data such as session tokens.", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute"], "functional-categories": ["debug::search::active-debug-code::lang"], "impact": "MEDIUM", "license": "Copyright 2023 Semgrep, Inc.", "likelihood": "MEDIUM", "owasp": ["A05:2021 - Security Misconfiguration"], "references": ["https://www.php.net/manual/en/function.setcookie.php", "https://www.php.net/manual/en/function.session-set-cookie-params.php", "https://www.php.net/manual/en/configuration.file.php"], "semgrep.dev": {"rule": {"origin": "pro_rules", "r_id": 27192, "rule_id": "yyUx3k", "rv_id": 111769, "url": "https://semgrep.dev/playground/r/jQTgyor/php.lang.security.taint-cookie-secure-false.taint-cookie-secure-false", "version_id": "jQTgyor"}}, "shortlink": "https://sg.run/GJx2", "source": "https://semgrep.dev/r/php.lang.security.taint-cookie-secure-false.taint-cookie-secure-false", "subcategory": ["vuln"], "technology": ["php"], "vulnerability_class": ["Cookie Security"]}, "metavars": {"$DOMAIN": {"abstract_content": "\"\"", "end": {"col": 52, "line": 197, "offset": 4924}, "start": {"col": 50, "line": 197, "offset": 4922}}, "$EXPIRES": {"abstract_content": "0", "end": {"col": 43, "line": 197, "offset": 4915}, "start": {"col": 42, "line": 197, "offset": 4914}}, "$NAME": {"abstract_content": "'security'", "end": {"col": 23, "line": 197, "offset": 4895}, "start": {"col": 13, "line": 197, "offset": 4885}}, "$PATH": {"abstract_content": "\"/\"", "end": {"col": 48, "line": 197, "offset": 4920}, "start": {"col": 45, "line": 197, "offset": 4917}}, "$SINK": {"abstract_content": "false", "end": {"col": 59, "line": 197, "offset": 4931}, "start": {"col": 54, "line": 197, "offset": 4926}}, "$VALUE": {"abstract_content": "$pSecurityLevel", "end": {"col": 40, "line": 197, "offset": 4912}, "start": {"col": 25, "line": 197, "offset": 4897}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "dvwa/includes/dvwaPage.inc.php", "start": {"col": 54, "line": 197, "offset": 4926}}, {"check_id": "php.lang.security.taint-cookie-http-false.taint-cookie-http-false", "end": {"col": 70, "line": 197, "offset": 4942}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "$httponly", "location": {"end": {"col": 12, "line": 194, "offset": 4859}, "path": "dvwa/includes/dvwaPage.inc.php", "start": {"col": 3, "line": 194, "offset": 4850}}}], "taint_sink": ["CliLoc", [{"end": {"col": 70, "line": 197, "offset": 4942}, "path": "dvwa/includes/dvwaPage.inc.php", "start": {"col": 61, "line": 197, "offset": 4933}}, "$httponly"]], "taint_source": ["CliLoc", [{"end": {"col": 20, "line": 194, "offset": 4867}, "path": "dvwa/includes/dvwaPage.inc.php", "start": {"col": 15, "line": 194, "offset": 4862}}, "false"]]}, "engine_kind": "OSS", "fingerprint": "07032a170d5c4740c76d351924154319a0d21c942b2e1845066ba097b3551a7b6d63afe0cea02abc75ae4ea2c2081cbfeae6e9771ccadd6b48d90446e17904d3_0", "is_ignored": false, "lines": "\tsetcookie( 'security', $pSecurityLevel, 0, \"/\", \"\", false, $httponly );", "message": "HttpOnly cookie flag is explicitly disabled. This will cause cookies to be transmitted over unencrypted HTTP connections which can allow theft of confidential user data such as session tokens.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-1004: Sensitive Cookie Without 'HttpOnly' Flag"], "functional-categories": ["debug::search::active-debug-code::lang"], "impact": "LOW", "license": "Copyright 2023 Semgrep, Inc.", "likelihood": "MEDIUM", "owasp": ["A05:2021 - Security Misconfiguration"], "references": ["https://www.php.net/manual/en/function.setcookie.php", "https://www.php.net/manual/en/function.session-set-cookie-params.php", "https://www.php.net/manual/en/configuration.file.php"], "semgrep.dev": {"rule": {"origin": "pro_rules", "r_id": 27191, "rule_id": "9AU4dD", "rv_id": 111768, "url": "https://semgrep.dev/playground/r/X0TQ2rg/php.lang.security.taint-cookie-http-false.taint-cookie-http-false", "version_id": "X0TQ2rg"}}, "shortlink": "https://sg.run/5qrX", "source": "https://semgrep.dev/r/php.lang.security.taint-cookie-http-false.taint-cookie-http-false", "subcategory": ["vuln"], "technology": ["php"], "vulnerability_class": ["Cookie Security"]}, "metavars": {"$DOMAIN": {"abstract_content": "\"\"", "end": {"col": 52, "line": 197, "offset": 4924}, "start": {"col": 50, "line": 197, "offset": 4922}}, "$EXPIRES": {"abstract_content": "0", "end": {"col": 43, "line": 197, "offset": 4915}, "start": {"col": 42, "line": 197, "offset": 4914}}, "$NAME": {"abstract_content": "'security'", "end": {"col": 23, "line": 197, "offset": 4895}, "start": {"col": 13, "line": 197, "offset": 4885}}, "$PATH": {"abstract_content": "\"/\"", "end": {"col": 48, "line": 197, "offset": 4920}, "start": {"col": 45, "line": 197, "offset": 4917}}, "$SECURE": {"abstract_content": "false", "end": {"col": 59, "line": 197, "offset": 4931}, "start": {"col": 54, "line": 197, "offset": 4926}}, "$SINK": {"abstract_content": "$httponly", "end": {"col": 70, "line": 197, "offset": 4942}, "start": {"col": 61, "line": 197, "offset": 4933}}, "$VALUE": {"abstract_content": "$pSecurityLevel", "end": {"col": 40, "line": 197, "offset": 4912}, "start": {"col": 25, "line": 197, "offset": 4897}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "dvwa/includes/dvwaPage.inc.php", "start": {"col": 61, "line": 197, "offset": 4933}}, {"check_id": "php.lang.security.injection.tainted-filename.tainted-filename", "end": {"col": 67, "line": 26, "offset": 1069}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "$selectedDocId", "location": {"end": {"col": 15, "line": 20, "offset": 818}, "path": "instructions.php", "start": {"col": 1, "line": 20, "offset": 804}}}, {"content": "$readFile", "location": {"end": {"col": 10, "line": 24, "offset": 962}, "path": "instructions.php", "start": {"col": 1, "line": 24, "offset": 953}}}], "taint_sink": ["CliLoc", [{"end": {"col": 67, "line": 26, "offset": 1069}, "path": "instructions.php", "start": {"col": 36, "line": 26, "offset": 1038}}, "DVWA_WEB_PAGE_TO_ROOT.$readFile"]], "taint_source": ["CliLoc", [{"end": {"col": 49, "line": 20, "offset": 852}, "path": "instructions.php", "start": {"col": 44, "line": 20, "offset": 847}}, "$_GET"]]}, "engine_kind": "OSS", "fingerprint": "11989726ab1c1d4f0749852f102b5b4896baa41b8307bf24101500a3b9467f481c5f99e0101649018400270261c08e41b9bed7f87d5cb8f62e901f38776ccecf_0", "is_ignored": false, "lines": "$instructions = file_get_contents( DVWA_WEB_PAGE_TO_ROOT.$readFile );", "message": "File name based on user input risks server-side request forgery.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-918: Server-Side Request Forgery (SSRF)"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A10:2021 - Server-Side Request Forgery (SSRF)"], "references": ["https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 16250, "rule_id": "5rUpro", "rv_id": 110042, "url": "https://semgrep.dev/playground/r/K3Tvjky/php.lang.security.injection.tainted-filename.tainted-filename", "version_id": "K3Tvjky"}}, "shortlink": "https://sg.run/Ayqp", "source": "https://semgrep.dev/r/php.lang.security.injection.tainted-filename.tainted-filename", "subcategory": ["vuln"], "technology": ["php"], "vulnerability_class": ["Server-Side Request Forgery (SSRF)"]}, "metavars": {"$FILENAME": {"abstract_content": "DVWA_WEB_PAGE_TO_ROOT.$readFile", "end": {"col": 67, "line": 26, "offset": 1069}, "start": {"col": 36, "line": 26, "offset": 1038}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "instructions.php", "start": {"col": 36, "line": 26, "offset": 1038}}, {"check_id": "php.lang.security.phpinfo-use.phpinfo-use", "end": {"col": 11, "line": 8, "offset": 180}, "extra": {"engine_kind": "OSS", "fingerprint": "8d1f80ce950ef45e6264c52d4049cf3ebf665cf48cc3e1c127360f0e8b873e66c4dfd92b15429a4269cfe10fa219ac1bf0639928e799130fb8f3caafa13c80ca_0", "is_ignored": false, "lines": "phpinfo();", "message": "The 'phpinfo' function may reveal sensitive information about your environment.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-200: Exposure of Sensitive Information to an Unauthorized Actor"], "cwe2021-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A01:2021 - Broken Access Control"], "references": ["https://www.php.net/manual/en/function.phpinfo", "https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/PhpinfosSniff.php"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9397, "rule_id": "ReUglY", "rv_id": 110055, "url": "https://semgrep.dev/playground/r/yeTR2r0/php.lang.security.phpinfo-use.phpinfo-use", "version_id": "yeTR2r0"}}, "shortlink": "https://sg.run/W82E", "source": "https://semgrep.dev/r/php.lang.security.phpinfo-use.phpinfo-use", "subcategory": ["vuln"], "technology": ["php"], "vulnerability_class": ["Mishandled Sensitive Information"]}, "metavars": {}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "phpinfo.php", "start": {"col": 1, "line": 8, "offset": 170}}, {"check_id": "javascript.browser.security.insecure-document-method.insecure-document-method", "end": {"col": 150, "line": 43, "offset": 1335}, "extra": {"engine_kind": "OSS", "fingerprint": "43e98c8f4d714dd0593e2594c10088e8d39018ec54524a6a7dcfa57b6827cc7992725367868360cadd2ab241ddb1a612000cd24d1aad0a512b00691ee2ec8474_0", "is_ignored": false, "lines": "\t\t\tcell0.innerHTML = user['user_id'] + '<input type=\"hidden\" id=\"user_id_' + user['user_id'] + '\" name=\"user_id\" value=\"' + user['user_id'] + '\" />';", "message": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9239, "rule_id": "ReUg41", "rv_id": 109816, "url": "https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method", "version_id": "O9TNO1x"}}, "shortlink": "https://sg.run/LwA9", "source": "https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method", "subcategory": ["audit"], "technology": ["browser"], "vulnerability_class": ["Cross-Site-Scripting (XSS)"]}, "metavars": {"$EL": {"abstract_content": "cell0", "end": {"col": 9, "line": 43, "offset": 1194}, "propagated_value": {"svalue_abstract_content": "row.insertCell(-1)", "svalue_end": {"col": 34, "line": 42, "offset": 1184}, "svalue_start": {"col": 16, "line": 42, "offset": 1166}}, "start": {"col": 4, "line": 43, "offset": 1189}}, "$HTML": {"abstract_content": "user['user_id']+'<input type=\"hidden\" id=\"user_id_'+user['user_id']+'\" name=\"user_id\" value=\"'+user['user_id']+'\" />'", "end": {"col": 149, "line": 43, "offset": 1334}, "start": {"col": 22, "line": 43, "offset": 1207}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "vulnerabilities/authbypass/authbypass.js", "start": {"col": 4, "line": 43, "offset": 1189}}, {"check_id": "javascript.browser.security.insecure-document-method.insecure-document-method", "end": {"col": 139, "line": 45, "offset": 1508}, "extra": {"engine_kind": "OSS", "fingerprint": "2876cbc66788fb144bdf05ebca58d4d3aa034d369b18e546f458dda69db68a7e5f38e3f56faec6f59ec7101b1185f1039736feb076cfdd195d27ce9f729bfe99_0", "is_ignored": false, "lines": "\t\t\tcell1.innerHTML = '<input type=\"text\" id=\"first_name_' + user['user_id'] + '\" name=\"first_name\" value=\"' + user['first_name'] + '\" />';", "message": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9239, "rule_id": "ReUg41", "rv_id": 109816, "url": "https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method", "version_id": "O9TNO1x"}}, "shortlink": "https://sg.run/LwA9", "source": "https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method", "subcategory": ["audit"], "technology": ["browser"], "vulnerability_class": ["Cross-Site-Scripting (XSS)"]}, "metavars": {"$EL": {"abstract_content": "cell1", "end": {"col": 9, "line": 45, "offset": 1378}, "propagated_value": {"svalue_abstract_content": "row.insertCell(1)", "svalue_end": {"col": 33, "line": 44, "offset": 1368}, "svalue_start": {"col": 16, "line": 44, "offset": 1351}}, "start": {"col": 4, "line": 45, "offset": 1373}}, "$HTML": {"abstract_content": "'<input type=\"text\" id=\"first_name_'+user['user_id']+'\" name=\"first_name\" value=\"'+user['first_name']+'\" />'", "end": {"col": 138, "line": 45, "offset": 1507}, "start": {"col": 22, "line": 45, "offset": 1391}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "vulnerabilities/authbypass/authbypass.js", "start": {"col": 4, "line": 45, "offset": 1373}}, {"check_id": "javascript.browser.security.insecure-document-method.insecure-document-method", "end": {"col": 130, "line": 47, "offset": 1672}, "extra": {"engine_kind": "OSS", "fingerprint": "7cd3774846fce6a22665ad6738f7728fb4cb0279212dbbabe84eb32bd47e7fa57205cbcc25265f1713e08bc388bc61a11f01b6c5c3f5db534ca2889a4cce02e8_0", "is_ignored": false, "lines": "\t\t\tcell2.innerHTML = '<input type=\"text\" id=\"surname_' + user['user_id'] + '\" name=\"surname\" value=\"' + user['surname'] + '\" />';", "message": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9239, "rule_id": "ReUg41", "rv_id": 109816, "url": "https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method", "version_id": "O9TNO1x"}}, "shortlink": "https://sg.run/LwA9", "source": "https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method", "subcategory": ["audit"], "technology": ["browser"], "vulnerability_class": ["Cross-Site-Scripting (XSS)"]}, "metavars": {"$EL": {"abstract_content": "cell2", "end": {"col": 9, "line": 47, "offset": 1551}, "propagated_value": {"svalue_abstract_content": "row.insertCell(2)", "svalue_end": {"col": 33, "line": 46, "offset": 1541}, "svalue_start": {"col": 16, "line": 46, "offset": 1524}}, "start": {"col": 4, "line": 47, "offset": 1546}}, "$HTML": {"abstract_content": "'<input type=\"text\" id=\"surname_'+user['user_id']+'\" name=\"surname\" value=\"'+user['surname']+'\" />'", "end": {"col": 129, "line": 47, "offset": 1671}, "start": {"col": 22, "line": 47, "offset": 1564}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "vulnerabilities/authbypass/authbypass.js", "start": {"col": 4, "line": 47, "offset": 1546}}, {"check_id": "javascript.browser.security.insecure-document-method.insecure-document-method", "end": {"col": 112, "line": 49, "offset": 1818}, "extra": {"engine_kind": "OSS", "fingerprint": "066a8e04132ed19ecc4befead6084c80d4c8a40c56c4631fff146c274fb8da846174fc50b8c81026a510b05dc009600b405184623e43ef31feed816631fa20c9_0", "is_ignored": false, "lines": "\t\t\tcell3.innerHTML = '<input type=\"button\" value=\"Update\" onclick=\"submit_change(' + user['user_id'] + ')\" />';", "message": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9239, "rule_id": "ReUg41", "rv_id": 109816, "url": "https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method", "version_id": "O9TNO1x"}}, "shortlink": "https://sg.run/LwA9", "source": "https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method", "subcategory": ["audit"], "technology": ["browser"], "vulnerability_class": ["Cross-Site-Scripting (XSS)"]}, "metavars": {"$EL": {"abstract_content": "cell3", "end": {"col": 9, "line": 49, "offset": 1715}, "propagated_value": {"svalue_abstract_content": "row.insertCell(3)", "svalue_end": {"col": 33, "line": 48, "offset": 1705}, "svalue_start": {"col": 16, "line": 48, "offset": 1688}}, "start": {"col": 4, "line": 49, "offset": 1710}}, "$HTML": {"abstract_content": "'<input type=\"button\" value=\"Update\" onclick=\"submit_change('+user['user_id']+')\" />'", "end": {"col": 111, "line": 49, "offset": 1817}, "start": {"col": 22, "line": 49, "offset": 1728}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "vulnerabilities/authbypass/authbypass.js", "start": {"col": 4, "line": 49, "offset": 1710}}, {"check_id": "php.lang.security.injection.tainted-sql-string.tainted-sql-string", "end": {"col": 80, "line": 12, "offset": 273}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "$user", "location": {"end": {"col": 7, "line": 5, "offset": 68}, "path": "vulnerabilities/brute/source/low.php", "start": {"col": 2, "line": 5, "offset": 63}}}, {"content": "$user", "location": {"end": {"col": 7, "line": 5, "offset": 68}, "path": "vulnerabilities/brute/source/low.php", "start": {"col": 2, "line": 5, "offset": 63}}}], "taint_sink": ["CliLoc", [{"end": {"col": 80, "line": 12, "offset": 273}, "path": "vulnerabilities/brute/source/low.php", "start": {"col": 12, "line": 12, "offset": 205}}, "\"SELECT * FROM `users` WHERE user = '$user' AND password = '$pass';\""]], "taint_source": ["CliLoc", [{"end": {"col": 15, "line": 5, "offset": 76}, "path": "vulnerabilities/brute/source/low.php", "start": {"col": 10, "line": 5, "offset": 71}}, "$_GET"]]}, "engine_kind": "OSS", "fingerprint": "9a3089f412a07fc90b7766788579998df091702c96a712a24dba5de6f411ee30378db6328b25da1d49095b1c61bcc5ac7e1e53b5383705f236ba57742377b54e_0", "is_ignored": false, "lines": "\t$query  = \"SELECT * FROM `users` WHERE user = '$user' AND password = '$pass';\";", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 14757, "rule_id": "qNUXdL", "rv_id": 251682, "url": "https://semgrep.dev/playground/r/RGTevOe/php.lang.security.injection.tainted-sql-string.tainted-sql-string", "version_id": "RGTevOe"}}, "shortlink": "https://sg.run/lZYG", "source": "https://semgrep.dev/r/php.lang.security.injection.tainted-sql-string.tainted-sql-string", "subcategory": ["vuln"], "technology": ["php"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "SELECT", "end": {"col": 7, "line": 1, "offset": 6}, "start": {"col": 1, "line": 1, "offset": 0}}, "$EXPR": {"abstract_content": "SELECT * FROM `users` WHERE user = '", "end": {"col": 49, "line": 12, "offset": 242}, "start": {"col": 13, "line": 12, "offset": 206}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "vulnerabilities/brute/source/low.php", "start": {"col": 12, "line": 12, "offset": 205}}, {"check_id": "javascript.browser.security.insecure-document-method.insecure-document-method", "end": {"col": 63, "line": 9, "offset": 269}, "extra": {"engine_kind": "OSS", "fingerprint": "a0b916c5e51eff9ea3a3529a00e5ff178570ad307619a4ee0e6afb1eb49a1cf4ddfb0187e8a202edfc5cd832c367308d1cbdb9ee536f124d4964971132ce32c0_0", "is_ignored": false, "lines": "\t\tdocument.getElementById(\"answer\").innerHTML = obj['answer'];", "message": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9239, "rule_id": "ReUg41", "rv_id": 109816, "url": "https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method", "version_id": "O9TNO1x"}}, "shortlink": "https://sg.run/LwA9", "source": "https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method", "subcategory": ["audit"], "technology": ["browser"], "vulnerability_class": ["Cross-Site-Scripting (XSS)"]}, "metavars": {"$EL": {"abstract_content": "document.getElementById(\"answer\")", "end": {"col": 36, "line": 9, "offset": 242}, "start": {"col": 3, "line": 9, "offset": 209}}, "$HTML": {"abstract_content": "obj['answer']", "end": {"col": 62, "line": 9, "offset": 268}, "start": {"col": 49, "line": 9, "offset": 255}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "vulnerabilities/csp/source/high.js", "start": {"col": 3, "line": 9, "offset": 209}}, {"check_id": "javascript.browser.security.insecure-document-method.insecure-document-method", "end": {"col": 63, "line": 9, "offset": 262}, "extra": {"engine_kind": "OSS", "fingerprint": "f5daccde2dc40f6bbc4ab520cbe5ec5bf3938c9fedd98ec32de9e51fd41437c99a6dae0ea8bbcb17116d91b43e1d38ae4a9390891b3cb6075babccef37c95076_0", "is_ignored": false, "lines": "\t\tdocument.getElementById(\"answer\").innerHTML = obj['answer'];", "message": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9239, "rule_id": "ReUg41", "rv_id": 109816, "url": "https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method", "version_id": "O9TNO1x"}}, "shortlink": "https://sg.run/LwA9", "source": "https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method", "subcategory": ["audit"], "technology": ["browser"], "vulnerability_class": ["Cross-Site-Scripting (XSS)"]}, "metavars": {"$EL": {"abstract_content": "document.getElementById(\"answer\")", "end": {"col": 36, "line": 9, "offset": 235}, "start": {"col": 3, "line": 9, "offset": 202}}, "$HTML": {"abstract_content": "obj['answer']", "end": {"col": 62, "line": 9, "offset": 261}, "start": {"col": 49, "line": 9, "offset": 248}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "vulnerabilities/csp/source/impossible.js", "start": {"col": 3, "line": 9, "offset": 202}}, {"check_id": "php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag", "end": {"col": 45, "line": 12, "offset": 243}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "$callback", "location": {"end": {"col": 11, "line": 5, "offset": 118}, "path": "vulnerabilities/csp/source/jsonp.php", "start": {"col": 2, "line": 5, "offset": 109}}}], "taint_sink": ["CliLoc", [{"end": {"col": 45, "line": 12, "offset": 243}, "path": "vulnerabilities/csp/source/jsonp.php", "start": {"col": 1, "line": 12, "offset": 199}}, "echo $callback . \"(\".json_encode($outp).\")\";"]], "taint_source": ["CliLoc", [{"end": {"col": 31, "line": 5, "offset": 138}, "path": "vulnerabilities/csp/source/jsonp.php", "start": {"col": 14, "line": 5, "offset": 121}}, "$_GET['callback']"]]}, "engine_kind": "OSS", "fingerprint": "a0ed6f47f268fe9bbdcd1a3dff40625e9f99a754d328a7174cf304f454ccf0c3fd89a5066b29a8afea9d04c32176cc1a6a660c82e7c95fd8153143ceaf6b429b_0", "is_ignored": false, "lines": "echo $callback . \"(\".json_encode($outp).\")\";", "message": "Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "functional-categories": ["web::source::http-params::lang", "web::source::http-body::lang", "web::sink::html-webpage::lang"], "impact": "MEDIUM", "license": "Copyright 2023 Semgrep, Inc.", "likelihood": "HIGH", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/language.basic-syntax.phptags.php"], "semgrep.dev": {"rule": {"origin": "pro_rules", "r_id": 27193, "rule_id": "r6UA0y", "rv_id": 111770, "url": "https://semgrep.dev/playground/r/1QTO714/php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag", "version_id": "1QTO714"}}, "shortlink": "https://sg.run/RlGe", "source": "https://semgrep.dev/r/php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag", "subcategory": ["vuln"], "technology": ["php"], "vulnerability_class": ["Cross-Site-Scripting (XSS)"]}, "metavars": {"$1": {"abstract_content": "GET", "end": {"col": 6, "line": 1, "offset": 5}, "start": {"col": 3, "line": 1, "offset": 2}}, "$REQ": {"abstract_content": "$_GET", "end": {"col": 19, "line": 5, "offset": 126}, "start": {"col": 14, "line": 5, "offset": 121}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "vulnerabilities/csp/source/jsonp.php", "start": {"col": 1, "line": 12, "offset": 199}}, {"check_id": "php.lang.security.exec-use.exec-use", "end": {"col": 43, "line": 26, "offset": 588}, "extra": {"engine_kind": "OSS", "fingerprint": "4ee1e6ee9238d84fed235fa6eca7309cd5ba574eb98fa1be3ff6c76b0149dd914c6849776725d0d9cd2908cd1aef205e40eaf61fadced7a3dd9cb13ba52fa923_0", "is_ignored": false, "lines": "\t\t$cmd = shell_exec( 'ping  ' . $target );", "message": "Executing non-constant commands. This can lead to command injection.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-94: Improper Control of Generation of Code ('Code Injection')"], "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/SystemExecFunctionsSniff.php"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9391, "rule_id": "qNUjye", "rv_id": 110038, "url": "https://semgrep.dev/playground/r/BjTXrZP/php.lang.security.exec-use.exec-use", "version_id": "BjTXrZP"}}, "shortlink": "https://sg.run/5Q1j", "source": "https://semgrep.dev/r/php.lang.security.exec-use.exec-use", "subcategory": ["audit"], "technology": ["php"], "vulnerability_class": ["Code Injection"]}, "metavars": {"$FUNC": {"abstract_content": "shell_exec", "end": {"col": 20, "line": 26, "offset": 565}, "start": {"col": 10, "line": 26, "offset": 555}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "vulnerabilities/exec/source/high.php", "start": {"col": 3, "line": 26, "offset": 548}}, {"check_id": "php.lang.security.tainted-command-injection.tainted-command-injection", "end": {"col": 42, "line": 26, "offset": 587}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "$target", "location": {"end": {"col": 9, "line": 5, "offset": 70}, "path": "vulnerabilities/exec/source/high.php", "start": {"col": 2, "line": 5, "offset": 63}}}], "taint_sink": ["CliLoc", [{"end": {"col": 42, "line": 26, "offset": 587}, "path": "vulnerabilities/exec/source/high.php", "start": {"col": 10, "line": 26, "offset": 555}}, "shell_exec( 'ping  ' . $target )"]], "taint_source": ["CliLoc", [{"end": {"col": 26, "line": 5, "offset": 87}, "path": "vulnerabilities/exec/source/high.php", "start": {"col": 17, "line": 5, "offset": 78}}, "$_REQUEST"]]}, "engine_kind": "OSS", "fingerprint": "eaf75b822d052338d3e8d184c35ce72dc3dd2f78f8e2c6eac1900dc7c10eb61fa2fbc32db989806e36825008e972c9e174ff67eb309df996ac2460fc7d126e93_0", "is_ignored": false, "lines": "\t\t$cmd = shell_exec( 'ping  ' . $target );", "message": "Untrusted input might be injected into a command executed by the application, which can lead to a command injection vulnerability. An attacker can execute arbitrary commands, potentially gaining complete control of the system. To prevent this vulnerability, avoid executing OS commands with user input. If this is unavoidable, validate and sanitize the user input, and use safe methods for executing the commands. In PHP, it is possible to use `escapeshellcmd(...)` and `escapeshellarg(...)` to correctly sanitize input that is used respectively as system commands or command arguments.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "functional-categories": ["web::source::cookie::lang", "web::source::http-params::lang", "web::source::http-body::lang", "web::source::url-path-params::lang", "os::sink::os-command-or-thread::lang"], "impact": "HIGH", "license": "Copyright 2023 Semgrep, Inc.", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.eval", "https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/NoEvalsSniff.php"], "semgrep.dev": {"rule": {"origin": "pro_rules", "r_id": 27195, "rule_id": "NbUzg9", "rv_id": 111772, "url": "https://semgrep.dev/playground/r/yeTRZK2/php.lang.security.tainted-command-injection.tainted-command-injection", "version_id": "yeTRZK2"}}, "shortlink": "https://sg.run/Bpj2", "source": "https://semgrep.dev/r/php.lang.security.tainted-command-injection.tainted-command-injection", "subcategory": ["vuln"], "technology": ["php"], "vulnerability_class": ["Command Injection"]}, "metavars": {}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "vulnerabilities/exec/source/high.php", "start": {"col": 10, "line": 26, "offset": 555}}, {"check_id": "php.lang.security.tainted-exec.tainted-exec", "end": {"col": 42, "line": 26, "offset": 587}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "$target", "location": {"end": {"col": 9, "line": 5, "offset": 70}, "path": "vulnerabilities/exec/source/high.php", "start": {"col": 2, "line": 5, "offset": 63}}}], "taint_sink": ["CliLoc", [{"end": {"col": 42, "line": 26, "offset": 587}, "path": "vulnerabilities/exec/source/high.php", "start": {"col": 10, "line": 26, "offset": 555}}, "shell_exec( 'ping  ' . $target )"]], "taint_source": ["CliLoc", [{"end": {"col": 26, "line": 5, "offset": 87}, "path": "vulnerabilities/exec/source/high.php", "start": {"col": 17, "line": 5, "offset": 78}}, "$_REQUEST"]]}, "engine_kind": "OSS", "fingerprint": "f859c8e893b4a3957a8ceb1ebbdfb97bbf7b653931647deb337bb58f45f24e832960e6386e82f476ca7f08ed5cb73db72a0c514c07fe95d49218b93fc2c3f547_0", "is_ignored": false, "lines": "\t\t$cmd = shell_exec( 'ping  ' . $target );", "message": "Executing non-constant commands. This can lead to command injection. You should use `escapeshellarg()` when using command.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-94: Improper Control of Generation of Code ('Code Injection')"], "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A03:2021 - Injection"], "references": ["https://www.stackhawk.com/blog/php-command-injection/", "https://brightsec.com/blog/code-injection-php/", "https://www.acunetix.com/websitesecurity/php-security-2/"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 73146, "rule_id": "9AUw06", "rv_id": 110058, "url": "https://semgrep.dev/playground/r/NdT3djz/php.lang.security.tainted-exec.tainted-exec", "version_id": "NdT3djz"}}, "shortlink": "https://sg.run/JAkP", "source": "https://semgrep.dev/r/php.lang.security.tainted-exec.tainted-exec", "subcategory": ["vuln"], "technology": ["php"], "vulnerability_class": ["Code Injection"]}, "metavars": {}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "vulnerabilities/exec/source/high.php", "start": {"col": 10, "line": 26, "offset": 555}}, {"check_id": "php.laravel.security.laravel-command-injection.laravel-command-injection", "end": {"col": 40, "line": 26, "offset": 585}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "$target", "location": {"end": {"col": 9, "line": 5, "offset": 70}, "path": "vulnerabilities/exec/source/high.php", "start": {"col": 2, "line": 5, "offset": 63}}}], "taint_sink": ["CliLoc", [{"end": {"col": 40, "line": 26, "offset": 585}, "path": "vulnerabilities/exec/source/high.php", "start": {"col": 22, "line": 26, "offset": 567}}, "'ping  ' . $target"]], "taint_source": ["CliLoc", [{"end": {"col": 26, "line": 5, "offset": 87}, "path": "vulnerabilities/exec/source/high.php", "start": {"col": 17, "line": 5, "offset": 78}}, "$_REQUEST"]]}, "engine_kind": "OSS", "fingerprint": "672a2d922a8484d4261662fde8d40f0a24d3390deca342aa40cacae6f2dac9ae6e2ef2b78234831d0cb7d954f127644d34a7420c42e3f7f36e263c7201ce1148_0", "is_ignored": false, "lines": "\t\t$cmd = shell_exec( 'ping  ' . $target );", "message": "Untrusted input might be injected into a command executed by the application, which can lead to a command injection vulnerability. An attacker can execute arbitrary commands, potentially gaining complete control of the system. To prevent this vulnerability, avoid executing OS commands with user input. If this is unavoidable, validate and sanitize the user input, and use safe methods for executing the commands. In PHP, it is possible to use `escapeshellcmd(...)` and `escapeshellarg(...)` to correctly sanitize input when used respectively as system commands or command arguments.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "functional-categories": ["web::source::cookie::lang", "web::source::http-params::lang", "web::source::http-body::lang", "web::source::header::lang", "web::source::url-path-params::lang", "web::source::form-data::lang", "web::source::cookie::laravel", "web::source::http-params::laravel", "web::source::http-body::laravel", "web::source::header::laravel", "web::source::url-path-params::laravel", "web::source::form-data::laravel", "os::sink::os-command-or-thread::lang"], "impact": "HIGH", "license": "Copyright 2023 Semgrep, Inc.", "likelihood": "LOW", "owasp": ["A03:2021 - Injection", "A01:2017 - Injection"], "references": ["https://www.php.net/manual/en/ref.exec.php", "https://www.php.net/manual/en/ref.filesystem.php"], "semgrep.dev": {"rule": {"origin": "pro_rules", "r_id": 36402, "rule_id": "3qUbw4", "rv_id": 111784, "url": "https://semgrep.dev/playground/r/nWTxovD/php.laravel.security.laravel-command-injection.laravel-command-injection", "version_id": "nWTxovD"}}, "shortlink": "https://sg.run/JPYR", "source": "https://semgrep.dev/r/php.laravel.security.laravel-command-injection.laravel-command-injection", "subcategory": ["vuln"], "technology": ["laravel"], "vulnerability_class": ["Command Injection"]}, "metavars": {"$SINK": {"abstract_content": "'ping  '.$target", "end": {"col": 40, "line": 26, "offset": 585}, "start": {"col": 22, "line": 26, "offset": 567}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "vulnerabilities/exec/source/high.php", "start": {"col": 22, "line": 26, "offset": 567}}, {"check_id": "php.lang.security.exec-use.exec-use", "end": {"col": 48, "line": 30, "offset": 661}, "extra": {"engine_kind": "OSS", "fingerprint": "4ee1e6ee9238d84fed235fa6eca7309cd5ba574eb98fa1be3ff6c76b0149dd914c6849776725d0d9cd2908cd1aef205e40eaf61fadced7a3dd9cb13ba52fa923_1", "is_ignored": false, "lines": "\t\t$cmd = shell_exec( 'ping  -c 4 ' . $target );", "message": "Executing non-constant commands. This can lead to command injection.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-94: Improper Control of Generation of Code ('Code Injection')"], "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/SystemExecFunctionsSniff.php"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9391, "rule_id": "qNUjye", "rv_id": 110038, "url": "https://semgrep.dev/playground/r/BjTXrZP/php.lang.security.exec-use.exec-use", "version_id": "BjTXrZP"}}, "shortlink": "https://sg.run/5Q1j", "source": "https://semgrep.dev/r/php.lang.security.exec-use.exec-use", "subcategory": ["audit"], "technology": ["php"], "vulnerability_class": ["Code Injection"]}, "metavars": {"$FUNC": {"abstract_content": "shell_exec", "end": {"col": 20, "line": 30, "offset": 633}, "start": {"col": 10, "line": 30, "offset": 623}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "vulnerabilities/exec/source/high.php", "start": {"col": 3, "line": 30, "offset": 616}}, {"check_id": "php.lang.security.tainted-command-injection.tainted-command-injection", "end": {"col": 47, "line": 30, "offset": 660}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "$target", "location": {"end": {"col": 9, "line": 5, "offset": 70}, "path": "vulnerabilities/exec/source/high.php", "start": {"col": 2, "line": 5, "offset": 63}}}], "taint_sink": ["CliLoc", [{"end": {"col": 47, "line": 30, "offset": 660}, "path": "vulnerabilities/exec/source/high.php", "start": {"col": 10, "line": 30, "offset": 623}}, "shell_exec( 'ping  -c 4 ' . $target )"]], "taint_source": ["CliLoc", [{"end": {"col": 26, "line": 5, "offset": 87}, "path": "vulnerabilities/exec/source/high.php", "start": {"col": 17, "line": 5, "offset": 78}}, "$_REQUEST"]]}, "engine_kind": "OSS", "fingerprint": "eaf75b822d052338d3e8d184c35ce72dc3dd2f78f8e2c6eac1900dc7c10eb61fa2fbc32db989806e36825008e972c9e174ff67eb309df996ac2460fc7d126e93_1", "is_ignored": false, "lines": "\t\t$cmd = shell_exec( 'ping  -c 4 ' . $target );", "message": "Untrusted input might be injected into a command executed by the application, which can lead to a command injection vulnerability. An attacker can execute arbitrary commands, potentially gaining complete control of the system. To prevent this vulnerability, avoid executing OS commands with user input. If this is unavoidable, validate and sanitize the user input, and use safe methods for executing the commands. In PHP, it is possible to use `escapeshellcmd(...)` and `escapeshellarg(...)` to correctly sanitize input that is used respectively as system commands or command arguments.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "functional-categories": ["web::source::cookie::lang", "web::source::http-params::lang", "web::source::http-body::lang", "web::source::url-path-params::lang", "os::sink::os-command-or-thread::lang"], "impact": "HIGH", "license": "Copyright 2023 Semgrep, Inc.", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.eval", "https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/NoEvalsSniff.php"], "semgrep.dev": {"rule": {"origin": "pro_rules", "r_id": 27195, "rule_id": "NbUzg9", "rv_id": 111772, "url": "https://semgrep.dev/playground/r/yeTRZK2/php.lang.security.tainted-command-injection.tainted-command-injection", "version_id": "yeTRZK2"}}, "shortlink": "https://sg.run/Bpj2", "source": "https://semgrep.dev/r/php.lang.security.tainted-command-injection.tainted-command-injection", "subcategory": ["vuln"], "technology": ["php"], "vulnerability_class": ["Command Injection"]}, "metavars": {}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "vulnerabilities/exec/source/high.php", "start": {"col": 10, "line": 30, "offset": 623}}, {"check_id": "php.lang.security.tainted-exec.tainted-exec", "end": {"col": 47, "line": 30, "offset": 660}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "$target", "location": {"end": {"col": 9, "line": 5, "offset": 70}, "path": "vulnerabilities/exec/source/high.php", "start": {"col": 2, "line": 5, "offset": 63}}}], "taint_sink": ["CliLoc", [{"end": {"col": 47, "line": 30, "offset": 660}, "path": "vulnerabilities/exec/source/high.php", "start": {"col": 10, "line": 30, "offset": 623}}, "shell_exec( 'ping  -c 4 ' . $target )"]], "taint_source": ["CliLoc", [{"end": {"col": 26, "line": 5, "offset": 87}, "path": "vulnerabilities/exec/source/high.php", "start": {"col": 17, "line": 5, "offset": 78}}, "$_REQUEST"]]}, "engine_kind": "OSS", "fingerprint": "f859c8e893b4a3957a8ceb1ebbdfb97bbf7b653931647deb337bb58f45f24e832960e6386e82f476ca7f08ed5cb73db72a0c514c07fe95d49218b93fc2c3f547_1", "is_ignored": false, "lines": "\t\t$cmd = shell_exec( 'ping  -c 4 ' . $target );", "message": "Executing non-constant commands. This can lead to command injection. You should use `escapeshellarg()` when using command.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-94: Improper Control of Generation of Code ('Code Injection')"], "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A03:2021 - Injection"], "references": ["https://www.stackhawk.com/blog/php-command-injection/", "https://brightsec.com/blog/code-injection-php/", "https://www.acunetix.com/websitesecurity/php-security-2/"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 73146, "rule_id": "9AUw06", "rv_id": 110058, "url": "https://semgrep.dev/playground/r/NdT3djz/php.lang.security.tainted-exec.tainted-exec", "version_id": "NdT3djz"}}, "shortlink": "https://sg.run/JAkP", "source": "https://semgrep.dev/r/php.lang.security.tainted-exec.tainted-exec", "subcategory": ["vuln"], "technology": ["php"], "vulnerability_class": ["Code Injection"]}, "metavars": {}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "vulnerabilities/exec/source/high.php", "start": {"col": 10, "line": 30, "offset": 623}}, {"check_id": "php.laravel.security.laravel-command-injection.laravel-command-injection", "end": {"col": 45, "line": 30, "offset": 658}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "$target", "location": {"end": {"col": 9, "line": 5, "offset": 70}, "path": "vulnerabilities/exec/source/high.php", "start": {"col": 2, "line": 5, "offset": 63}}}], "taint_sink": ["CliLoc", [{"end": {"col": 45, "line": 30, "offset": 658}, "path": "vulnerabilities/exec/source/high.php", "start": {"col": 22, "line": 30, "offset": 635}}, "'ping  -c 4 ' . $target"]], "taint_source": ["CliLoc", [{"end": {"col": 26, "line": 5, "offset": 87}, "path": "vulnerabilities/exec/source/high.php", "start": {"col": 17, "line": 5, "offset": 78}}, "$_REQUEST"]]}, "engine_kind": "OSS", "fingerprint": "133e30ce137c12532ebc2f8b96e45a9bb2288e7e7b92765cfe1d570590e1d765d3eaa445da789fdd3474972e10f4de92468cb771ba937aa2b658fd7e0c865e5d_0", "is_ignored": false, "lines": "\t\t$cmd = shell_exec( 'ping  -c 4 ' . $target );", "message": "Untrusted input might be injected into a command executed by the application, which can lead to a command injection vulnerability. An attacker can execute arbitrary commands, potentially gaining complete control of the system. To prevent this vulnerability, avoid executing OS commands with user input. If this is unavoidable, validate and sanitize the user input, and use safe methods for executing the commands. In PHP, it is possible to use `escapeshellcmd(...)` and `escapeshellarg(...)` to correctly sanitize input when used respectively as system commands or command arguments.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "functional-categories": ["web::source::cookie::lang", "web::source::http-params::lang", "web::source::http-body::lang", "web::source::header::lang", "web::source::url-path-params::lang", "web::source::form-data::lang", "web::source::cookie::laravel", "web::source::http-params::laravel", "web::source::http-body::laravel", "web::source::header::laravel", "web::source::url-path-params::laravel", "web::source::form-data::laravel", "os::sink::os-command-or-thread::lang"], "impact": "HIGH", "license": "Copyright 2023 Semgrep, Inc.", "likelihood": "LOW", "owasp": ["A03:2021 - Injection", "A01:2017 - Injection"], "references": ["https://www.php.net/manual/en/ref.exec.php", "https://www.php.net/manual/en/ref.filesystem.php"], "semgrep.dev": {"rule": {"origin": "pro_rules", "r_id": 36402, "rule_id": "3qUbw4", "rv_id": 111784, "url": "https://semgrep.dev/playground/r/nWTxovD/php.laravel.security.laravel-command-injection.laravel-command-injection", "version_id": "nWTxovD"}}, "shortlink": "https://sg.run/JPYR", "source": "https://semgrep.dev/r/php.laravel.security.laravel-command-injection.laravel-command-injection", "subcategory": ["vuln"], "technology": ["laravel"], "vulnerability_class": ["Command Injection"]}, "metavars": {"$SINK": {"abstract_content": "'ping  -c 4 '.$target", "end": {"col": 45, "line": 30, "offset": 658}, "start": {"col": 22, "line": 30, "offset": 635}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "vulnerabilities/exec/source/high.php", "start": {"col": 22, "line": 30, "offset": 635}}, {"check_id": "php.lang.security.exec-use.exec-use", "end": {"col": 44, "line": 22, "offset": 815}, "extra": {"engine_kind": "OSS", "fingerprint": "c31dd10c4da22b75cfbdc5310ee563abd3c70a9923a4a0576d72d518e23f03c414814a0ef7d7e6686d7236df189b1ada38e75157434a0ec3be665894bb381982_0", "is_ignored": false, "lines": "\t\t\t$cmd = shell_exec( 'ping  ' . $target );", "message": "Executing non-constant commands. This can lead to command injection.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-94: Improper Control of Generation of Code ('Code Injection')"], "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/SystemExecFunctionsSniff.php"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9391, "rule_id": "qNUjye", "rv_id": 110038, "url": "https://semgrep.dev/playground/r/BjTXrZP/php.lang.security.exec-use.exec-use", "version_id": "BjTXrZP"}}, "shortlink": "https://sg.run/5Q1j", "source": "https://semgrep.dev/r/php.lang.security.exec-use.exec-use", "subcategory": ["audit"], "technology": ["php"], "vulnerability_class": ["Code Injection"]}, "metavars": {"$FUNC": {"abstract_content": "shell_exec", "end": {"col": 21, "line": 22, "offset": 792}, "start": {"col": 11, "line": 22, "offset": 782}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "vulnerabilities/exec/source/impossible.php", "start": {"col": 4, "line": 22, "offset": 775}}, {"check_id": "php.lang.security.tainted-command-injection.tainted-command-injection", "end": {"col": 43, "line": 22, "offset": 814}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "$target", "location": {"end": {"col": 9, "line": 8, "offset": 185}, "path": "vulnerabilities/exec/source/impossible.php", "start": {"col": 2, "line": 8, "offset": 178}}}], "taint_sink": ["CliLoc", [{"end": {"col": 43, "line": 22, "offset": 814}, "path": "vulnerabilities/exec/source/impossible.php", "start": {"col": 11, "line": 22, "offset": 782}}, "shell_exec( 'ping  ' . $target )"]], "taint_source": ["CliLoc", [{"end": {"col": 21, "line": 8, "offset": 197}, "path": "vulnerabilities/exec/source/impossible.php", "start": {"col": 12, "line": 8, "offset": 188}}, "$_REQUEST"]]}, "engine_kind": "OSS", "fingerprint": "c742e33d75a11439bf7f98832b8507644a492c027ee1922e3f0d1990726f6060b72b028d96808906486f7a3f80ee9b6f391b17dbb3aaf2ae770694b6b0d7d934_0", "is_ignored": false, "lines": "\t\t\t$cmd = shell_exec( 'ping  ' . $target );", "message": "Untrusted input might be injected into a command executed by the application, which can lead to a command injection vulnerability. An attacker can execute arbitrary commands, potentially gaining complete control of the system. To prevent this vulnerability, avoid executing OS commands with user input. If this is unavoidable, validate and sanitize the user input, and use safe methods for executing the commands. In PHP, it is possible to use `escapeshellcmd(...)` and `escapeshellarg(...)` to correctly sanitize input that is used respectively as system commands or command arguments.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "functional-categories": ["web::source::cookie::lang", "web::source::http-params::lang", "web::source::http-body::lang", "web::source::url-path-params::lang", "os::sink::os-command-or-thread::lang"], "impact": "HIGH", "license": "Copyright 2023 Semgrep, Inc.", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.eval", "https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/NoEvalsSniff.php"], "semgrep.dev": {"rule": {"origin": "pro_rules", "r_id": 27195, "rule_id": "NbUzg9", "rv_id": 111772, "url": "https://semgrep.dev/playground/r/yeTRZK2/php.lang.security.tainted-command-injection.tainted-command-injection", "version_id": "yeTRZK2"}}, "shortlink": "https://sg.run/Bpj2", "source": "https://semgrep.dev/r/php.lang.security.tainted-command-injection.tainted-command-injection", "subcategory": ["vuln"], "technology": ["php"], "vulnerability_class": ["Command Injection"]}, "metavars": {}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "vulnerabilities/exec/source/impossible.php", "start": {"col": 11, "line": 22, "offset": 782}}, {"check_id": "php.lang.security.tainted-exec.tainted-exec", "end": {"col": 43, "line": 22, "offset": 814}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "$target", "location": {"end": {"col": 9, "line": 8, "offset": 185}, "path": "vulnerabilities/exec/source/impossible.php", "start": {"col": 2, "line": 8, "offset": 178}}}], "taint_sink": ["CliLoc", [{"end": {"col": 43, "line": 22, "offset": 814}, "path": "vulnerabilities/exec/source/impossible.php", "start": {"col": 11, "line": 22, "offset": 782}}, "shell_exec( 'ping  ' . $target )"]], "taint_source": ["CliLoc", [{"end": {"col": 21, "line": 8, "offset": 197}, "path": "vulnerabilities/exec/source/impossible.php", "start": {"col": 12, "line": 8, "offset": 188}}, "$_REQUEST"]]}, "engine_kind": "OSS", "fingerprint": "1918f8360653e1b03a2dae45a56243c4b1e0c13b7afaff4abfd6b514aa9a082a35e40556731c8f9b4322f8c9b32985ba8bfe4ecebbf9354953e39fa876a33d1a_0", "is_ignored": false, "lines": "\t\t\t$cmd = shell_exec( 'ping  ' . $target );", "message": "Executing non-constant commands. This can lead to command injection. You should use `escapeshellarg()` when using command.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-94: Improper Control of Generation of Code ('Code Injection')"], "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A03:2021 - Injection"], "references": ["https://www.stackhawk.com/blog/php-command-injection/", "https://brightsec.com/blog/code-injection-php/", "https://www.acunetix.com/websitesecurity/php-security-2/"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 73146, "rule_id": "9AUw06", "rv_id": 110058, "url": "https://semgrep.dev/playground/r/NdT3djz/php.lang.security.tainted-exec.tainted-exec", "version_id": "NdT3djz"}}, "shortlink": "https://sg.run/JAkP", "source": "https://semgrep.dev/r/php.lang.security.tainted-exec.tainted-exec", "subcategory": ["vuln"], "technology": ["php"], "vulnerability_class": ["Code Injection"]}, "metavars": {}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "vulnerabilities/exec/source/impossible.php", "start": {"col": 11, "line": 22, "offset": 782}}, {"check_id": "php.laravel.security.laravel-command-injection.laravel-command-injection", "end": {"col": 41, "line": 22, "offset": 812}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "$target", "location": {"end": {"col": 9, "line": 8, "offset": 185}, "path": "vulnerabilities/exec/source/impossible.php", "start": {"col": 2, "line": 8, "offset": 178}}}], "taint_sink": ["CliLoc", [{"end": {"col": 41, "line": 22, "offset": 812}, "path": "vulnerabilities/exec/source/impossible.php", "start": {"col": 23, "line": 22, "offset": 794}}, "'ping  ' . $target"]], "taint_source": ["CliLoc", [{"end": {"col": 21, "line": 8, "offset": 197}, "path": "vulnerabilities/exec/source/impossible.php", "start": {"col": 12, "line": 8, "offset": 188}}, "$_REQUEST"]]}, "engine_kind": "OSS", "fingerprint": "c9f411fecb1aa3a6cf4a2f9c0b4135ffd7d8ab46c2fe3bb3b2713eb6dae3d6019bba4c307012f7361d3c4351b0c84d63d0f56f58ce14e9b06d4bbdfd04b4b061_0", "is_ignored": false, "lines": "\t\t\t$cmd = shell_exec( 'ping  ' . $target );", "message": "Untrusted input might be injected into a command executed by the application, which can lead to a command injection vulnerability. An attacker can execute arbitrary commands, potentially gaining complete control of the system. To prevent this vulnerability, avoid executing OS commands with user input. If this is unavoidable, validate and sanitize the user input, and use safe methods for executing the commands. In PHP, it is possible to use `escapeshellcmd(...)` and `escapeshellarg(...)` to correctly sanitize input when used respectively as system commands or command arguments.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "functional-categories": ["web::source::cookie::lang", "web::source::http-params::lang", "web::source::http-body::lang", "web::source::header::lang", "web::source::url-path-params::lang", "web::source::form-data::lang", "web::source::cookie::laravel", "web::source::http-params::laravel", "web::source::http-body::laravel", "web::source::header::laravel", "web::source::url-path-params::laravel", "web::source::form-data::laravel", "os::sink::os-command-or-thread::lang"], "impact": "HIGH", "license": "Copyright 2023 Semgrep, Inc.", "likelihood": "LOW", "owasp": ["A03:2021 - Injection", "A01:2017 - Injection"], "references": ["https://www.php.net/manual/en/ref.exec.php", "https://www.php.net/manual/en/ref.filesystem.php"], "semgrep.dev": {"rule": {"origin": "pro_rules", "r_id": 36402, "rule_id": "3qUbw4", "rv_id": 111784, "url": "https://semgrep.dev/playground/r/nWTxovD/php.laravel.security.laravel-command-injection.laravel-command-injection", "version_id": "nWTxovD"}}, "shortlink": "https://sg.run/JPYR", "source": "https://semgrep.dev/r/php.laravel.security.laravel-command-injection.laravel-command-injection", "subcategory": ["vuln"], "technology": ["laravel"], "vulnerability_class": ["Command Injection"]}, "metavars": {"$SINK": {"abstract_content": "'ping  '.$target", "end": {"col": 41, "line": 22, "offset": 812}, "start": {"col": 23, "line": 22, "offset": 794}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "vulnerabilities/exec/source/impossible.php", "start": {"col": 23, "line": 22, "offset": 794}}, {"check_id": "php.lang.security.exec-use.exec-use", "end": {"col": 49, "line": 26, "offset": 892}, "extra": {"engine_kind": "OSS", "fingerprint": "c31dd10c4da22b75cfbdc5310ee563abd3c70a9923a4a0576d72d518e23f03c414814a0ef7d7e6686d7236df189b1ada38e75157434a0ec3be665894bb381982_1", "is_ignored": false, "lines": "\t\t\t$cmd = shell_exec( 'ping  -c 4 ' . $target );", "message": "Executing non-constant commands. This can lead to command injection.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-94: Improper Control of Generation of Code ('Code Injection')"], "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/SystemExecFunctionsSniff.php"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9391, "rule_id": "qNUjye", "rv_id": 110038, "url": "https://semgrep.dev/playground/r/BjTXrZP/php.lang.security.exec-use.exec-use", "version_id": "BjTXrZP"}}, "shortlink": "https://sg.run/5Q1j", "source": "https://semgrep.dev/r/php.lang.security.exec-use.exec-use", "subcategory": ["audit"], "technology": ["php"], "vulnerability_class": ["Code Injection"]}, "metavars": {"$FUNC": {"abstract_content": "shell_exec", "end": {"col": 21, "line": 26, "offset": 864}, "start": {"col": 11, "line": 26, "offset": 854}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "vulnerabilities/exec/source/impossible.php", "start": {"col": 4, "line": 26, "offset": 847}}, {"check_id": "php.lang.security.tainted-command-injection.tainted-command-injection", "end": {"col": 48, "line": 26, "offset": 891}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "$target", "location": {"end": {"col": 9, "line": 8, "offset": 185}, "path": "vulnerabilities/exec/source/impossible.php", "start": {"col": 2, "line": 8, "offset": 178}}}], "taint_sink": ["CliLoc", [{"end": {"col": 48, "line": 26, "offset": 891}, "path": "vulnerabilities/exec/source/impossible.php", "start": {"col": 11, "line": 26, "offset": 854}}, "shell_exec( 'ping  -c 4 ' . $target )"]], "taint_source": ["CliLoc", [{"end": {"col": 21, "line": 8, "offset": 197}, "path": "vulnerabilities/exec/source/impossible.php", "start": {"col": 12, "line": 8, "offset": 188}}, "$_REQUEST"]]}, "engine_kind": "OSS", "fingerprint": "c742e33d75a11439bf7f98832b8507644a492c027ee1922e3f0d1990726f6060b72b028d96808906486f7a3f80ee9b6f391b17dbb3aaf2ae770694b6b0d7d934_1", "is_ignored": false, "lines": "\t\t\t$cmd = shell_exec( 'ping  -c 4 ' . $target );", "message": "Untrusted input might be injected into a command executed by the application, which can lead to a command injection vulnerability. An attacker can execute arbitrary commands, potentially gaining complete control of the system. To prevent this vulnerability, avoid executing OS commands with user input. If this is unavoidable, validate and sanitize the user input, and use safe methods for executing the commands. In PHP, it is possible to use `escapeshellcmd(...)` and `escapeshellarg(...)` to correctly sanitize input that is used respectively as system commands or command arguments.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "functional-categories": ["web::source::cookie::lang", "web::source::http-params::lang", "web::source::http-body::lang", "web::source::url-path-params::lang", "os::sink::os-command-or-thread::lang"], "impact": "HIGH", "license": "Copyright 2023 Semgrep, Inc.", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.eval", "https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/NoEvalsSniff.php"], "semgrep.dev": {"rule": {"origin": "pro_rules", "r_id": 27195, "rule_id": "NbUzg9", "rv_id": 111772, "url": "https://semgrep.dev/playground/r/yeTRZK2/php.lang.security.tainted-command-injection.tainted-command-injection", "version_id": "yeTRZK2"}}, "shortlink": "https://sg.run/Bpj2", "source": "https://semgrep.dev/r/php.lang.security.tainted-command-injection.tainted-command-injection", "subcategory": ["vuln"], "technology": ["php"], "vulnerability_class": ["Command Injection"]}, "metavars": {}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "vulnerabilities/exec/source/impossible.php", "start": {"col": 11, "line": 26, "offset": 854}}, {"check_id": "php.lang.security.tainted-exec.tainted-exec", "end": {"col": 48, "line": 26, "offset": 891}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "$target", "location": {"end": {"col": 9, "line": 8, "offset": 185}, "path": "vulnerabilities/exec/source/impossible.php", "start": {"col": 2, "line": 8, "offset": 178}}}], "taint_sink": ["CliLoc", [{"end": {"col": 48, "line": 26, "offset": 891}, "path": "vulnerabilities/exec/source/impossible.php", "start": {"col": 11, "line": 26, "offset": 854}}, "shell_exec( 'ping  -c 4 ' . $target )"]], "taint_source": ["CliLoc", [{"end": {"col": 21, "line": 8, "offset": 197}, "path": "vulnerabilities/exec/source/impossible.php", "start": {"col": 12, "line": 8, "offset": 188}}, "$_REQUEST"]]}, "engine_kind": "OSS", "fingerprint": "1918f8360653e1b03a2dae45a56243c4b1e0c13b7afaff4abfd6b514aa9a082a35e40556731c8f9b4322f8c9b32985ba8bfe4ecebbf9354953e39fa876a33d1a_1", "is_ignored": false, "lines": "\t\t\t$cmd = shell_exec( 'ping  -c 4 ' . $target );", "message": "Executing non-constant commands. This can lead to command injection. You should use `escapeshellarg()` when using command.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-94: Improper Control of Generation of Code ('Code Injection')"], "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A03:2021 - Injection"], "references": ["https://www.stackhawk.com/blog/php-command-injection/", "https://brightsec.com/blog/code-injection-php/", "https://www.acunetix.com/websitesecurity/php-security-2/"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 73146, "rule_id": "9AUw06", "rv_id": 110058, "url": "https://semgrep.dev/playground/r/NdT3djz/php.lang.security.tainted-exec.tainted-exec", "version_id": "NdT3djz"}}, "shortlink": "https://sg.run/JAkP", "source": "https://semgrep.dev/r/php.lang.security.tainted-exec.tainted-exec", "subcategory": ["vuln"], "technology": ["php"], "vulnerability_class": ["Code Injection"]}, "metavars": {}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "vulnerabilities/exec/source/impossible.php", "start": {"col": 11, "line": 26, "offset": 854}}, {"check_id": "php.laravel.security.laravel-command-injection.laravel-command-injection", "end": {"col": 46, "line": 26, "offset": 889}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "$target", "location": {"end": {"col": 9, "line": 8, "offset": 185}, "path": "vulnerabilities/exec/source/impossible.php", "start": {"col": 2, "line": 8, "offset": 178}}}], "taint_sink": ["CliLoc", [{"end": {"col": 46, "line": 26, "offset": 889}, "path": "vulnerabilities/exec/source/impossible.php", "start": {"col": 23, "line": 26, "offset": 866}}, "'ping  -c 4 ' . $target"]], "taint_source": ["CliLoc", [{"end": {"col": 21, "line": 8, "offset": 197}, "path": "vulnerabilities/exec/source/impossible.php", "start": {"col": 12, "line": 8, "offset": 188}}, "$_REQUEST"]]}, "engine_kind": "OSS", "fingerprint": "5174dad042b5f51ed022e4261565e44a00e73cd8047995bba835b09437bcb3b4155faa4fafbc91d0e2a7a879a62385087751016ee88f4e39b56b935df90a1b32_0", "is_ignored": false, "lines": "\t\t\t$cmd = shell_exec( 'ping  -c 4 ' . $target );", "message": "Untrusted input might be injected into a command executed by the application, which can lead to a command injection vulnerability. An attacker can execute arbitrary commands, potentially gaining complete control of the system. To prevent this vulnerability, avoid executing OS commands with user input. If this is unavoidable, validate and sanitize the user input, and use safe methods for executing the commands. In PHP, it is possible to use `escapeshellcmd(...)` and `escapeshellarg(...)` to correctly sanitize input when used respectively as system commands or command arguments.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "functional-categories": ["web::source::cookie::lang", "web::source::http-params::lang", "web::source::http-body::lang", "web::source::header::lang", "web::source::url-path-params::lang", "web::source::form-data::lang", "web::source::cookie::laravel", "web::source::http-params::laravel", "web::source::http-body::laravel", "web::source::header::laravel", "web::source::url-path-params::laravel", "web::source::form-data::laravel", "os::sink::os-command-or-thread::lang"], "impact": "HIGH", "license": "Copyright 2023 Semgrep, Inc.", "likelihood": "LOW", "owasp": ["A03:2021 - Injection", "A01:2017 - Injection"], "references": ["https://www.php.net/manual/en/ref.exec.php", "https://www.php.net/manual/en/ref.filesystem.php"], "semgrep.dev": {"rule": {"origin": "pro_rules", "r_id": 36402, "rule_id": "3qUbw4", "rv_id": 111784, "url": "https://semgrep.dev/playground/r/nWTxovD/php.laravel.security.laravel-command-injection.laravel-command-injection", "version_id": "nWTxovD"}}, "shortlink": "https://sg.run/JPYR", "source": "https://semgrep.dev/r/php.laravel.security.laravel-command-injection.laravel-command-injection", "subcategory": ["vuln"], "technology": ["laravel"], "vulnerability_class": ["Command Injection"]}, "metavars": {"$SINK": {"abstract_content": "'ping  -c 4 '.$target", "end": {"col": 46, "line": 26, "offset": 889}, "start": {"col": 23, "line": 26, "offset": 866}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "vulnerabilities/exec/source/impossible.php", "start": {"col": 23, "line": 26, "offset": 866}}, {"check_id": "php.lang.security.exec-use.exec-use", "end": {"col": 43, "line": 10, "offset": 251}, "extra": {"engine_kind": "OSS", "fingerprint": "bfa42f7690cd338790c20d6bc4b3be7982931028d19dad835c3596589bf28488fac368d4f9d1bbb3d38fc7e88c5a8c6ccd682d53b8a89893f1890c95186edde1_0", "is_ignored": false, "lines": "\t\t$cmd = shell_exec( 'ping  ' . $target );", "message": "Executing non-constant commands. This can lead to command injection.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-94: Improper Control of Generation of Code ('Code Injection')"], "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/SystemExecFunctionsSniff.php"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9391, "rule_id": "qNUjye", "rv_id": 110038, "url": "https://semgrep.dev/playground/r/BjTXrZP/php.lang.security.exec-use.exec-use", "version_id": "BjTXrZP"}}, "shortlink": "https://sg.run/5Q1j", "source": "https://semgrep.dev/r/php.lang.security.exec-use.exec-use", "subcategory": ["audit"], "technology": ["php"], "vulnerability_class": ["Code Injection"]}, "metavars": {"$FUNC": {"abstract_content": "shell_exec", "end": {"col": 20, "line": 10, "offset": 228}, "start": {"col": 10, "line": 10, "offset": 218}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "vulnerabilities/exec/source/low.php", "start": {"col": 3, "line": 10, "offset": 211}}, {"check_id": "php.lang.security.tainted-command-injection.tainted-command-injection", "end": {"col": 42, "line": 10, "offset": 250}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "$target", "location": {"end": {"col": 9, "line": 5, "offset": 70}, "path": "vulnerabilities/exec/source/low.php", "start": {"col": 2, "line": 5, "offset": 63}}}], "taint_sink": ["CliLoc", [{"end": {"col": 42, "line": 10, "offset": 250}, "path": "vulnerabilities/exec/source/low.php", "start": {"col": 10, "line": 10, "offset": 218}}, "shell_exec( 'ping  ' . $target )"]], "taint_source": ["CliLoc", [{"end": {"col": 21, "line": 5, "offset": 82}, "path": "vulnerabilities/exec/source/low.php", "start": {"col": 12, "line": 5, "offset": 73}}, "$_REQUEST"]]}, "engine_kind": "OSS", "fingerprint": "87da20c3053d0ba668f3beb77a5c6d8f5842bc5bd688d4f4164aebfd4ac28dc19d26a29b504085744842100b99264fbb12505838de1c2a8e0992d1b7bf170ba6_0", "is_ignored": false, "lines": "\t\t$cmd = shell_exec( 'ping  ' . $target );", "message": "Untrusted input might be injected into a command executed by the application, which can lead to a command injection vulnerability. An attacker can execute arbitrary commands, potentially gaining complete control of the system. To prevent this vulnerability, avoid executing OS commands with user input. If this is unavoidable, validate and sanitize the user input, and use safe methods for executing the commands. In PHP, it is possible to use `escapeshellcmd(...)` and `escapeshellarg(...)` to correctly sanitize input that is used respectively as system commands or command arguments.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "functional-categories": ["web::source::cookie::lang", "web::source::http-params::lang", "web::source::http-body::lang", "web::source::url-path-params::lang", "os::sink::os-command-or-thread::lang"], "impact": "HIGH", "license": "Copyright 2023 Semgrep, Inc.", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.eval", "https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/NoEvalsSniff.php"], "semgrep.dev": {"rule": {"origin": "pro_rules", "r_id": 27195, "rule_id": "NbUzg9", "rv_id": 111772, "url": "https://semgrep.dev/playground/r/yeTRZK2/php.lang.security.tainted-command-injection.tainted-command-injection", "version_id": "yeTRZK2"}}, "shortlink": "https://sg.run/Bpj2", "source": "https://semgrep.dev/r/php.lang.security.tainted-command-injection.tainted-command-injection", "subcategory": ["vuln"], "technology": ["php"], "vulnerability_class": ["Command Injection"]}, "metavars": {}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "vulnerabilities/exec/source/low.php", "start": {"col": 10, "line": 10, "offset": 218}}, {"check_id": "php.lang.security.tainted-exec.tainted-exec", "end": {"col": 42, "line": 10, "offset": 250}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "$target", "location": {"end": {"col": 9, "line": 5, "offset": 70}, "path": "vulnerabilities/exec/source/low.php", "start": {"col": 2, "line": 5, "offset": 63}}}], "taint_sink": ["CliLoc", [{"end": {"col": 42, "line": 10, "offset": 250}, "path": "vulnerabilities/exec/source/low.php", "start": {"col": 10, "line": 10, "offset": 218}}, "shell_exec( 'ping  ' . $target )"]], "taint_source": ["CliLoc", [{"end": {"col": 21, "line": 5, "offset": 82}, "path": "vulnerabilities/exec/source/low.php", "start": {"col": 12, "line": 5, "offset": 73}}, "$_REQUEST"]]}, "engine_kind": "OSS", "fingerprint": "dc7a7d880f42996026c879a271cdc001c8331d120db652d14b735cc3017f8e6497786d0d5b8c36e83d274d63a09b570283e130619da19ffd68cbee2b94e00ae1_0", "is_ignored": false, "lines": "\t\t$cmd = shell_exec( 'ping  ' . $target );", "message": "Executing non-constant commands. This can lead to command injection. You should use `escapeshellarg()` when using command.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-94: Improper Control of Generation of Code ('Code Injection')"], "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A03:2021 - Injection"], "references": ["https://www.stackhawk.com/blog/php-command-injection/", "https://brightsec.com/blog/code-injection-php/", "https://www.acunetix.com/websitesecurity/php-security-2/"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 73146, "rule_id": "9AUw06", "rv_id": 110058, "url": "https://semgrep.dev/playground/r/NdT3djz/php.lang.security.tainted-exec.tainted-exec", "version_id": "NdT3djz"}}, "shortlink": "https://sg.run/JAkP", "source": "https://semgrep.dev/r/php.lang.security.tainted-exec.tainted-exec", "subcategory": ["vuln"], "technology": ["php"], "vulnerability_class": ["Code Injection"]}, "metavars": {}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "vulnerabilities/exec/source/low.php", "start": {"col": 10, "line": 10, "offset": 218}}, {"check_id": "php.laravel.security.laravel-command-injection.laravel-command-injection", "end": {"col": 40, "line": 10, "offset": 248}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "$target", "location": {"end": {"col": 9, "line": 5, "offset": 70}, "path": "vulnerabilities/exec/source/low.php", "start": {"col": 2, "line": 5, "offset": 63}}}], "taint_sink": ["CliLoc", [{"end": {"col": 40, "line": 10, "offset": 248}, "path": "vulnerabilities/exec/source/low.php", "start": {"col": 22, "line": 10, "offset": 230}}, "'ping  ' . $target"]], "taint_source": ["CliLoc", [{"end": {"col": 21, "line": 5, "offset": 82}, "path": "vulnerabilities/exec/source/low.php", "start": {"col": 12, "line": 5, "offset": 73}}, "$_REQUEST"]]}, "engine_kind": "OSS", "fingerprint": "c9cf012c3de7d0410645a2d5f35c28b2cbfd84da25f91f24d6ed4d01b7cc7292216fb0fdaaea147d58499ec94b1f16b5849186a1dc532de8e7c81542fadbbef1_0", "is_ignored": false, "lines": "\t\t$cmd = shell_exec( 'ping  ' . $target );", "message": "Untrusted input might be injected into a command executed by the application, which can lead to a command injection vulnerability. An attacker can execute arbitrary commands, potentially gaining complete control of the system. To prevent this vulnerability, avoid executing OS commands with user input. If this is unavoidable, validate and sanitize the user input, and use safe methods for executing the commands. In PHP, it is possible to use `escapeshellcmd(...)` and `escapeshellarg(...)` to correctly sanitize input when used respectively as system commands or command arguments.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "functional-categories": ["web::source::cookie::lang", "web::source::http-params::lang", "web::source::http-body::lang", "web::source::header::lang", "web::source::url-path-params::lang", "web::source::form-data::lang", "web::source::cookie::laravel", "web::source::http-params::laravel", "web::source::http-body::laravel", "web::source::header::laravel", "web::source::url-path-params::laravel", "web::source::form-data::laravel", "os::sink::os-command-or-thread::lang"], "impact": "HIGH", "license": "Copyright 2023 Semgrep, Inc.", "likelihood": "LOW", "owasp": ["A03:2021 - Injection", "A01:2017 - Injection"], "references": ["https://www.php.net/manual/en/ref.exec.php", "https://www.php.net/manual/en/ref.filesystem.php"], "semgrep.dev": {"rule": {"origin": "pro_rules", "r_id": 36402, "rule_id": "3qUbw4", "rv_id": 111784, "url": "https://semgrep.dev/playground/r/nWTxovD/php.laravel.security.laravel-command-injection.laravel-command-injection", "version_id": "nWTxovD"}}, "shortlink": "https://sg.run/JPYR", "source": "https://semgrep.dev/r/php.laravel.security.laravel-command-injection.laravel-command-injection", "subcategory": ["vuln"], "technology": ["laravel"], "vulnerability_class": ["Command Injection"]}, "metavars": {"$SINK": {"abstract_content": "'ping  '.$target", "end": {"col": 40, "line": 10, "offset": 248}, "start": {"col": 22, "line": 10, "offset": 230}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "vulnerabilities/exec/source/low.php", "start": {"col": 22, "line": 10, "offset": 230}}, {"check_id": "php.lang.security.exec-use.exec-use", "end": {"col": 48, "line": 14, "offset": 324}, "extra": {"engine_kind": "OSS", "fingerprint": "bfa42f7690cd338790c20d6bc4b3be7982931028d19dad835c3596589bf28488fac368d4f9d1bbb3d38fc7e88c5a8c6ccd682d53b8a89893f1890c95186edde1_1", "is_ignored": false, "lines": "\t\t$cmd = shell_exec( 'ping  -c 4 ' . $target );", "message": "Executing non-constant commands. This can lead to command injection.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-94: Improper Control of Generation of Code ('Code Injection')"], "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/SystemExecFunctionsSniff.php"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9391, "rule_id": "qNUjye", "rv_id": 110038, "url": "https://semgrep.dev/playground/r/BjTXrZP/php.lang.security.exec-use.exec-use", "version_id": "BjTXrZP"}}, "shortlink": "https://sg.run/5Q1j", "source": "https://semgrep.dev/r/php.lang.security.exec-use.exec-use", "subcategory": ["audit"], "technology": ["php"], "vulnerability_class": ["Code Injection"]}, "metavars": {"$FUNC": {"abstract_content": "shell_exec", "end": {"col": 20, "line": 14, "offset": 296}, "start": {"col": 10, "line": 14, "offset": 286}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "vulnerabilities/exec/source/low.php", "start": {"col": 3, "line": 14, "offset": 279}}, {"check_id": "php.lang.security.tainted-command-injection.tainted-command-injection", "end": {"col": 47, "line": 14, "offset": 323}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "$target", "location": {"end": {"col": 9, "line": 5, "offset": 70}, "path": "vulnerabilities/exec/source/low.php", "start": {"col": 2, "line": 5, "offset": 63}}}], "taint_sink": ["CliLoc", [{"end": {"col": 47, "line": 14, "offset": 323}, "path": "vulnerabilities/exec/source/low.php", "start": {"col": 10, "line": 14, "offset": 286}}, "shell_exec( 'ping  -c 4 ' . $target )"]], "taint_source": ["CliLoc", [{"end": {"col": 21, "line": 5, "offset": 82}, "path": "vulnerabilities/exec/source/low.php", "start": {"col": 12, "line": 5, "offset": 73}}, "$_REQUEST"]]}, "engine_kind": "OSS", "fingerprint": "87da20c3053d0ba668f3beb77a5c6d8f5842bc5bd688d4f4164aebfd4ac28dc19d26a29b504085744842100b99264fbb12505838de1c2a8e0992d1b7bf170ba6_1", "is_ignored": false, "lines": "\t\t$cmd = shell_exec( 'ping  -c 4 ' . $target );", "message": "Untrusted input might be injected into a command executed by the application, which can lead to a command injection vulnerability. An attacker can execute arbitrary commands, potentially gaining complete control of the system. To prevent this vulnerability, avoid executing OS commands with user input. If this is unavoidable, validate and sanitize the user input, and use safe methods for executing the commands. In PHP, it is possible to use `escapeshellcmd(...)` and `escapeshellarg(...)` to correctly sanitize input that is used respectively as system commands or command arguments.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "functional-categories": ["web::source::cookie::lang", "web::source::http-params::lang", "web::source::http-body::lang", "web::source::url-path-params::lang", "os::sink::os-command-or-thread::lang"], "impact": "HIGH", "license": "Copyright 2023 Semgrep, Inc.", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.eval", "https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/NoEvalsSniff.php"], "semgrep.dev": {"rule": {"origin": "pro_rules", "r_id": 27195, "rule_id": "NbUzg9", "rv_id": 111772, "url": "https://semgrep.dev/playground/r/yeTRZK2/php.lang.security.tainted-command-injection.tainted-command-injection", "version_id": "yeTRZK2"}}, "shortlink": "https://sg.run/Bpj2", "source": "https://semgrep.dev/r/php.lang.security.tainted-command-injection.tainted-command-injection", "subcategory": ["vuln"], "technology": ["php"], "vulnerability_class": ["Command Injection"]}, "metavars": {}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "vulnerabilities/exec/source/low.php", "start": {"col": 10, "line": 14, "offset": 286}}, {"check_id": "php.lang.security.tainted-exec.tainted-exec", "end": {"col": 47, "line": 14, "offset": 323}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "$target", "location": {"end": {"col": 9, "line": 5, "offset": 70}, "path": "vulnerabilities/exec/source/low.php", "start": {"col": 2, "line": 5, "offset": 63}}}], "taint_sink": ["CliLoc", [{"end": {"col": 47, "line": 14, "offset": 323}, "path": "vulnerabilities/exec/source/low.php", "start": {"col": 10, "line": 14, "offset": 286}}, "shell_exec( 'ping  -c 4 ' . $target )"]], "taint_source": ["CliLoc", [{"end": {"col": 21, "line": 5, "offset": 82}, "path": "vulnerabilities/exec/source/low.php", "start": {"col": 12, "line": 5, "offset": 73}}, "$_REQUEST"]]}, "engine_kind": "OSS", "fingerprint": "dc7a7d880f42996026c879a271cdc001c8331d120db652d14b735cc3017f8e6497786d0d5b8c36e83d274d63a09b570283e130619da19ffd68cbee2b94e00ae1_1", "is_ignored": false, "lines": "\t\t$cmd = shell_exec( 'ping  -c 4 ' . $target );", "message": "Executing non-constant commands. This can lead to command injection. You should use `escapeshellarg()` when using command.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-94: Improper Control of Generation of Code ('Code Injection')"], "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A03:2021 - Injection"], "references": ["https://www.stackhawk.com/blog/php-command-injection/", "https://brightsec.com/blog/code-injection-php/", "https://www.acunetix.com/websitesecurity/php-security-2/"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 73146, "rule_id": "9AUw06", "rv_id": 110058, "url": "https://semgrep.dev/playground/r/NdT3djz/php.lang.security.tainted-exec.tainted-exec", "version_id": "NdT3djz"}}, "shortlink": "https://sg.run/JAkP", "source": "https://semgrep.dev/r/php.lang.security.tainted-exec.tainted-exec", "subcategory": ["vuln"], "technology": ["php"], "vulnerability_class": ["Code Injection"]}, "metavars": {}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "vulnerabilities/exec/source/low.php", "start": {"col": 10, "line": 14, "offset": 286}}, {"check_id": "php.laravel.security.laravel-command-injection.laravel-command-injection", "end": {"col": 45, "line": 14, "offset": 321}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "$target", "location": {"end": {"col": 9, "line": 5, "offset": 70}, "path": "vulnerabilities/exec/source/low.php", "start": {"col": 2, "line": 5, "offset": 63}}}], "taint_sink": ["CliLoc", [{"end": {"col": 45, "line": 14, "offset": 321}, "path": "vulnerabilities/exec/source/low.php", "start": {"col": 22, "line": 14, "offset": 298}}, "'ping  -c 4 ' . $target"]], "taint_source": ["CliLoc", [{"end": {"col": 21, "line": 5, "offset": 82}, "path": "vulnerabilities/exec/source/low.php", "start": {"col": 12, "line": 5, "offset": 73}}, "$_REQUEST"]]}, "engine_kind": "OSS", "fingerprint": "72d70a72c452830bd981f24198a35f4d240d01f1dc30d32d1d019e8a2babb535c08b1e32940d33a04d68b4b631b13c798a39e39cac24cc2b86252fb6e5ab9a92_0", "is_ignored": false, "lines": "\t\t$cmd = shell_exec( 'ping  -c 4 ' . $target );", "message": "Untrusted input might be injected into a command executed by the application, which can lead to a command injection vulnerability. An attacker can execute arbitrary commands, potentially gaining complete control of the system. To prevent this vulnerability, avoid executing OS commands with user input. If this is unavoidable, validate and sanitize the user input, and use safe methods for executing the commands. In PHP, it is possible to use `escapeshellcmd(...)` and `escapeshellarg(...)` to correctly sanitize input when used respectively as system commands or command arguments.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "functional-categories": ["web::source::cookie::lang", "web::source::http-params::lang", "web::source::http-body::lang", "web::source::header::lang", "web::source::url-path-params::lang", "web::source::form-data::lang", "web::source::cookie::laravel", "web::source::http-params::laravel", "web::source::http-body::laravel", "web::source::header::laravel", "web::source::url-path-params::laravel", "web::source::form-data::laravel", "os::sink::os-command-or-thread::lang"], "impact": "HIGH", "license": "Copyright 2023 Semgrep, Inc.", "likelihood": "LOW", "owasp": ["A03:2021 - Injection", "A01:2017 - Injection"], "references": ["https://www.php.net/manual/en/ref.exec.php", "https://www.php.net/manual/en/ref.filesystem.php"], "semgrep.dev": {"rule": {"origin": "pro_rules", "r_id": 36402, "rule_id": "3qUbw4", "rv_id": 111784, "url": "https://semgrep.dev/playground/r/nWTxovD/php.laravel.security.laravel-command-injection.laravel-command-injection", "version_id": "nWTxovD"}}, "shortlink": "https://sg.run/JPYR", "source": "https://semgrep.dev/r/php.laravel.security.laravel-command-injection.laravel-command-injection", "subcategory": ["vuln"], "technology": ["laravel"], "vulnerability_class": ["Command Injection"]}, "metavars": {"$SINK": {"abstract_content": "'ping  -c 4 '.$target", "end": {"col": 45, "line": 14, "offset": 321}, "start": {"col": 22, "line": 14, "offset": 298}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "vulnerabilities/exec/source/low.php", "start": {"col": 22, "line": 14, "offset": 298}}, {"check_id": "php.lang.security.exec-use.exec-use", "end": {"col": 43, "line": 19, "offset": 477}, "extra": {"engine_kind": "OSS", "fingerprint": "42422f0cc382c2485b84a24438a75afeff59a4f65f9ac397eec2d8fd711857ca05d4669b8b5a91536af3f2465fb501f564a0abacd7b31432a0ee725cf8c6f294_0", "is_ignored": false, "lines": "\t\t$cmd = shell_exec( 'ping  ' . $target );", "message": "Executing non-constant commands. This can lead to command injection.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-94: Improper Control of Generation of Code ('Code Injection')"], "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/SystemExecFunctionsSniff.php"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9391, "rule_id": "qNUjye", "rv_id": 110038, "url": "https://semgrep.dev/playground/r/BjTXrZP/php.lang.security.exec-use.exec-use", "version_id": "BjTXrZP"}}, "shortlink": "https://sg.run/5Q1j", "source": "https://semgrep.dev/r/php.lang.security.exec-use.exec-use", "subcategory": ["audit"], "technology": ["php"], "vulnerability_class": ["Code Injection"]}, "metavars": {"$FUNC": {"abstract_content": "shell_exec", "end": {"col": 20, "line": 19, "offset": 454}, "start": {"col": 10, "line": 19, "offset": 444}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "vulnerabilities/exec/source/medium.php", "start": {"col": 3, "line": 19, "offset": 437}}, {"check_id": "php.lang.security.tainted-command-injection.tainted-command-injection", "end": {"col": 42, "line": 19, "offset": 476}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "$target", "location": {"end": {"col": 9, "line": 5, "offset": 70}, "path": "vulnerabilities/exec/source/medium.php", "start": {"col": 2, "line": 5, "offset": 63}}}], "taint_sink": ["CliLoc", [{"end": {"col": 42, "line": 19, "offset": 476}, "path": "vulnerabilities/exec/source/medium.php", "start": {"col": 10, "line": 19, "offset": 444}}, "shell_exec( 'ping  ' . $target )"]], "taint_source": ["CliLoc", [{"end": {"col": 21, "line": 5, "offset": 82}, "path": "vulnerabilities/exec/source/medium.php", "start": {"col": 12, "line": 5, "offset": 73}}, "$_REQUEST"]]}, "engine_kind": "OSS", "fingerprint": "db5cc139f438bea049f213e0404d8b4887e1d09bf3a259b823089067ffb3cf8c9349efd0e815eb1f275879466160ee080dfc326a07457ae2331d3ba8d09655da_0", "is_ignored": false, "lines": "\t\t$cmd = shell_exec( 'ping  ' . $target );", "message": "Untrusted input might be injected into a command executed by the application, which can lead to a command injection vulnerability. An attacker can execute arbitrary commands, potentially gaining complete control of the system. To prevent this vulnerability, avoid executing OS commands with user input. If this is unavoidable, validate and sanitize the user input, and use safe methods for executing the commands. In PHP, it is possible to use `escapeshellcmd(...)` and `escapeshellarg(...)` to correctly sanitize input that is used respectively as system commands or command arguments.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "functional-categories": ["web::source::cookie::lang", "web::source::http-params::lang", "web::source::http-body::lang", "web::source::url-path-params::lang", "os::sink::os-command-or-thread::lang"], "impact": "HIGH", "license": "Copyright 2023 Semgrep, Inc.", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.eval", "https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/NoEvalsSniff.php"], "semgrep.dev": {"rule": {"origin": "pro_rules", "r_id": 27195, "rule_id": "NbUzg9", "rv_id": 111772, "url": "https://semgrep.dev/playground/r/yeTRZK2/php.lang.security.tainted-command-injection.tainted-command-injection", "version_id": "yeTRZK2"}}, "shortlink": "https://sg.run/Bpj2", "source": "https://semgrep.dev/r/php.lang.security.tainted-command-injection.tainted-command-injection", "subcategory": ["vuln"], "technology": ["php"], "vulnerability_class": ["Command Injection"]}, "metavars": {}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "vulnerabilities/exec/source/medium.php", "start": {"col": 10, "line": 19, "offset": 444}}, {"check_id": "php.lang.security.tainted-exec.tainted-exec", "end": {"col": 42, "line": 19, "offset": 476}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "$target", "location": {"end": {"col": 9, "line": 5, "offset": 70}, "path": "vulnerabilities/exec/source/medium.php", "start": {"col": 2, "line": 5, "offset": 63}}}], "taint_sink": ["CliLoc", [{"end": {"col": 42, "line": 19, "offset": 476}, "path": "vulnerabilities/exec/source/medium.php", "start": {"col": 10, "line": 19, "offset": 444}}, "shell_exec( 'ping  ' . $target )"]], "taint_source": ["CliLoc", [{"end": {"col": 21, "line": 5, "offset": 82}, "path": "vulnerabilities/exec/source/medium.php", "start": {"col": 12, "line": 5, "offset": 73}}, "$_REQUEST"]]}, "engine_kind": "OSS", "fingerprint": "525eced213478fc392adf1565d71616e308e41f8730c97b4baae37880e066a1e228fbdba6902388b39aa6944ab0e2564fc41b8739071db6c18052955de0d723f_0", "is_ignored": false, "lines": "\t\t$cmd = shell_exec( 'ping  ' . $target );", "message": "Executing non-constant commands. This can lead to command injection. You should use `escapeshellarg()` when using command.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-94: Improper Control of Generation of Code ('Code Injection')"], "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A03:2021 - Injection"], "references": ["https://www.stackhawk.com/blog/php-command-injection/", "https://brightsec.com/blog/code-injection-php/", "https://www.acunetix.com/websitesecurity/php-security-2/"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 73146, "rule_id": "9AUw06", "rv_id": 110058, "url": "https://semgrep.dev/playground/r/NdT3djz/php.lang.security.tainted-exec.tainted-exec", "version_id": "NdT3djz"}}, "shortlink": "https://sg.run/JAkP", "source": "https://semgrep.dev/r/php.lang.security.tainted-exec.tainted-exec", "subcategory": ["vuln"], "technology": ["php"], "vulnerability_class": ["Code Injection"]}, "metavars": {}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "vulnerabilities/exec/source/medium.php", "start": {"col": 10, "line": 19, "offset": 444}}, {"check_id": "php.laravel.security.laravel-command-injection.laravel-command-injection", "end": {"col": 40, "line": 19, "offset": 474}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "$target", "location": {"end": {"col": 9, "line": 5, "offset": 70}, "path": "vulnerabilities/exec/source/medium.php", "start": {"col": 2, "line": 5, "offset": 63}}}], "taint_sink": ["CliLoc", [{"end": {"col": 40, "line": 19, "offset": 474}, "path": "vulnerabilities/exec/source/medium.php", "start": {"col": 22, "line": 19, "offset": 456}}, "'ping  ' . $target"]], "taint_source": ["CliLoc", [{"end": {"col": 21, "line": 5, "offset": 82}, "path": "vulnerabilities/exec/source/medium.php", "start": {"col": 12, "line": 5, "offset": 73}}, "$_REQUEST"]]}, "engine_kind": "OSS", "fingerprint": "2689f72d1d8001a36dc372d8240deaa662cff85cfbfd17c49bb565e8b3f1aba934ea44b1d544951390f249a97486174e15862129b649e971e6dadb8e263d214e_0", "is_ignored": false, "lines": "\t\t$cmd = shell_exec( 'ping  ' . $target );", "message": "Untrusted input might be injected into a command executed by the application, which can lead to a command injection vulnerability. An attacker can execute arbitrary commands, potentially gaining complete control of the system. To prevent this vulnerability, avoid executing OS commands with user input. If this is unavoidable, validate and sanitize the user input, and use safe methods for executing the commands. In PHP, it is possible to use `escapeshellcmd(...)` and `escapeshellarg(...)` to correctly sanitize input when used respectively as system commands or command arguments.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "functional-categories": ["web::source::cookie::lang", "web::source::http-params::lang", "web::source::http-body::lang", "web::source::header::lang", "web::source::url-path-params::lang", "web::source::form-data::lang", "web::source::cookie::laravel", "web::source::http-params::laravel", "web::source::http-body::laravel", "web::source::header::laravel", "web::source::url-path-params::laravel", "web::source::form-data::laravel", "os::sink::os-command-or-thread::lang"], "impact": "HIGH", "license": "Copyright 2023 Semgrep, Inc.", "likelihood": "LOW", "owasp": ["A03:2021 - Injection", "A01:2017 - Injection"], "references": ["https://www.php.net/manual/en/ref.exec.php", "https://www.php.net/manual/en/ref.filesystem.php"], "semgrep.dev": {"rule": {"origin": "pro_rules", "r_id": 36402, "rule_id": "3qUbw4", "rv_id": 111784, "url": "https://semgrep.dev/playground/r/nWTxovD/php.laravel.security.laravel-command-injection.laravel-command-injection", "version_id": "nWTxovD"}}, "shortlink": "https://sg.run/JPYR", "source": "https://semgrep.dev/r/php.laravel.security.laravel-command-injection.laravel-command-injection", "subcategory": ["vuln"], "technology": ["laravel"], "vulnerability_class": ["Command Injection"]}, "metavars": {"$SINK": {"abstract_content": "'ping  '.$target", "end": {"col": 40, "line": 19, "offset": 474}, "start": {"col": 22, "line": 19, "offset": 456}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "vulnerabilities/exec/source/medium.php", "start": {"col": 22, "line": 19, "offset": 456}}, {"check_id": "php.lang.security.exec-use.exec-use", "end": {"col": 48, "line": 23, "offset": 550}, "extra": {"engine_kind": "OSS", "fingerprint": "42422f0cc382c2485b84a24438a75afeff59a4f65f9ac397eec2d8fd711857ca05d4669b8b5a91536af3f2465fb501f564a0abacd7b31432a0ee725cf8c6f294_1", "is_ignored": false, "lines": "\t\t$cmd = shell_exec( 'ping  -c 4 ' . $target );", "message": "Executing non-constant commands. This can lead to command injection.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-94: Improper Control of Generation of Code ('Code Injection')"], "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/SystemExecFunctionsSniff.php"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9391, "rule_id": "qNUjye", "rv_id": 110038, "url": "https://semgrep.dev/playground/r/BjTXrZP/php.lang.security.exec-use.exec-use", "version_id": "BjTXrZP"}}, "shortlink": "https://sg.run/5Q1j", "source": "https://semgrep.dev/r/php.lang.security.exec-use.exec-use", "subcategory": ["audit"], "technology": ["php"], "vulnerability_class": ["Code Injection"]}, "metavars": {"$FUNC": {"abstract_content": "shell_exec", "end": {"col": 20, "line": 23, "offset": 522}, "start": {"col": 10, "line": 23, "offset": 512}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "vulnerabilities/exec/source/medium.php", "start": {"col": 3, "line": 23, "offset": 505}}, {"check_id": "php.lang.security.tainted-command-injection.tainted-command-injection", "end": {"col": 47, "line": 23, "offset": 549}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "$target", "location": {"end": {"col": 9, "line": 5, "offset": 70}, "path": "vulnerabilities/exec/source/medium.php", "start": {"col": 2, "line": 5, "offset": 63}}}], "taint_sink": ["CliLoc", [{"end": {"col": 47, "line": 23, "offset": 549}, "path": "vulnerabilities/exec/source/medium.php", "start": {"col": 10, "line": 23, "offset": 512}}, "shell_exec( 'ping  -c 4 ' . $target )"]], "taint_source": ["CliLoc", [{"end": {"col": 21, "line": 5, "offset": 82}, "path": "vulnerabilities/exec/source/medium.php", "start": {"col": 12, "line": 5, "offset": 73}}, "$_REQUEST"]]}, "engine_kind": "OSS", "fingerprint": "db5cc139f438bea049f213e0404d8b4887e1d09bf3a259b823089067ffb3cf8c9349efd0e815eb1f275879466160ee080dfc326a07457ae2331d3ba8d09655da_1", "is_ignored": false, "lines": "\t\t$cmd = shell_exec( 'ping  -c 4 ' . $target );", "message": "Untrusted input might be injected into a command executed by the application, which can lead to a command injection vulnerability. An attacker can execute arbitrary commands, potentially gaining complete control of the system. To prevent this vulnerability, avoid executing OS commands with user input. If this is unavoidable, validate and sanitize the user input, and use safe methods for executing the commands. In PHP, it is possible to use `escapeshellcmd(...)` and `escapeshellarg(...)` to correctly sanitize input that is used respectively as system commands or command arguments.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "functional-categories": ["web::source::cookie::lang", "web::source::http-params::lang", "web::source::http-body::lang", "web::source::url-path-params::lang", "os::sink::os-command-or-thread::lang"], "impact": "HIGH", "license": "Copyright 2023 Semgrep, Inc.", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.eval", "https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/NoEvalsSniff.php"], "semgrep.dev": {"rule": {"origin": "pro_rules", "r_id": 27195, "rule_id": "NbUzg9", "rv_id": 111772, "url": "https://semgrep.dev/playground/r/yeTRZK2/php.lang.security.tainted-command-injection.tainted-command-injection", "version_id": "yeTRZK2"}}, "shortlink": "https://sg.run/Bpj2", "source": "https://semgrep.dev/r/php.lang.security.tainted-command-injection.tainted-command-injection", "subcategory": ["vuln"], "technology": ["php"], "vulnerability_class": ["Command Injection"]}, "metavars": {}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "vulnerabilities/exec/source/medium.php", "start": {"col": 10, "line": 23, "offset": 512}}, {"check_id": "php.lang.security.tainted-exec.tainted-exec", "end": {"col": 47, "line": 23, "offset": 549}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "$target", "location": {"end": {"col": 9, "line": 5, "offset": 70}, "path": "vulnerabilities/exec/source/medium.php", "start": {"col": 2, "line": 5, "offset": 63}}}], "taint_sink": ["CliLoc", [{"end": {"col": 47, "line": 23, "offset": 549}, "path": "vulnerabilities/exec/source/medium.php", "start": {"col": 10, "line": 23, "offset": 512}}, "shell_exec( 'ping  -c 4 ' . $target )"]], "taint_source": ["CliLoc", [{"end": {"col": 21, "line": 5, "offset": 82}, "path": "vulnerabilities/exec/source/medium.php", "start": {"col": 12, "line": 5, "offset": 73}}, "$_REQUEST"]]}, "engine_kind": "OSS", "fingerprint": "525eced213478fc392adf1565d71616e308e41f8730c97b4baae37880e066a1e228fbdba6902388b39aa6944ab0e2564fc41b8739071db6c18052955de0d723f_1", "is_ignored": false, "lines": "\t\t$cmd = shell_exec( 'ping  -c 4 ' . $target );", "message": "Executing non-constant commands. This can lead to command injection. You should use `escapeshellarg()` when using command.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-94: Improper Control of Generation of Code ('Code Injection')"], "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A03:2021 - Injection"], "references": ["https://www.stackhawk.com/blog/php-command-injection/", "https://brightsec.com/blog/code-injection-php/", "https://www.acunetix.com/websitesecurity/php-security-2/"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 73146, "rule_id": "9AUw06", "rv_id": 110058, "url": "https://semgrep.dev/playground/r/NdT3djz/php.lang.security.tainted-exec.tainted-exec", "version_id": "NdT3djz"}}, "shortlink": "https://sg.run/JAkP", "source": "https://semgrep.dev/r/php.lang.security.tainted-exec.tainted-exec", "subcategory": ["vuln"], "technology": ["php"], "vulnerability_class": ["Code Injection"]}, "metavars": {}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "vulnerabilities/exec/source/medium.php", "start": {"col": 10, "line": 23, "offset": 512}}, {"check_id": "php.laravel.security.laravel-command-injection.laravel-command-injection", "end": {"col": 45, "line": 23, "offset": 547}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "$target", "location": {"end": {"col": 9, "line": 5, "offset": 70}, "path": "vulnerabilities/exec/source/medium.php", "start": {"col": 2, "line": 5, "offset": 63}}}], "taint_sink": ["CliLoc", [{"end": {"col": 45, "line": 23, "offset": 547}, "path": "vulnerabilities/exec/source/medium.php", "start": {"col": 22, "line": 23, "offset": 524}}, "'ping  -c 4 ' . $target"]], "taint_source": ["CliLoc", [{"end": {"col": 21, "line": 5, "offset": 82}, "path": "vulnerabilities/exec/source/medium.php", "start": {"col": 12, "line": 5, "offset": 73}}, "$_REQUEST"]]}, "engine_kind": "OSS", "fingerprint": "22c83b1dc70f5f37490815754123b23f42d6570bb9f6b656bca7a8fd26c8d3d4b1aadb3f8c68242ca1afda70d691b933cc27fc3754db947e372897dac8007452_0", "is_ignored": false, "lines": "\t\t$cmd = shell_exec( 'ping  -c 4 ' . $target );", "message": "Untrusted input might be injected into a command executed by the application, which can lead to a command injection vulnerability. An attacker can execute arbitrary commands, potentially gaining complete control of the system. To prevent this vulnerability, avoid executing OS commands with user input. If this is unavoidable, validate and sanitize the user input, and use safe methods for executing the commands. In PHP, it is possible to use `escapeshellcmd(...)` and `escapeshellarg(...)` to correctly sanitize input when used respectively as system commands or command arguments.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "functional-categories": ["web::source::cookie::lang", "web::source::http-params::lang", "web::source::http-body::lang", "web::source::header::lang", "web::source::url-path-params::lang", "web::source::form-data::lang", "web::source::cookie::laravel", "web::source::http-params::laravel", "web::source::http-body::laravel", "web::source::header::laravel", "web::source::url-path-params::laravel", "web::source::form-data::laravel", "os::sink::os-command-or-thread::lang"], "impact": "HIGH", "license": "Copyright 2023 Semgrep, Inc.", "likelihood": "LOW", "owasp": ["A03:2021 - Injection", "A01:2017 - Injection"], "references": ["https://www.php.net/manual/en/ref.exec.php", "https://www.php.net/manual/en/ref.filesystem.php"], "semgrep.dev": {"rule": {"origin": "pro_rules", "r_id": 36402, "rule_id": "3qUbw4", "rv_id": 111784, "url": "https://semgrep.dev/playground/r/nWTxovD/php.laravel.security.laravel-command-injection.laravel-command-injection", "version_id": "nWTxovD"}}, "shortlink": "https://sg.run/JPYR", "source": "https://semgrep.dev/r/php.laravel.security.laravel-command-injection.laravel-command-injection", "subcategory": ["vuln"], "technology": ["laravel"], "vulnerability_class": ["Command Injection"]}, "metavars": {"$SINK": {"abstract_content": "'ping  -c 4 '.$target", "end": {"col": 45, "line": 23, "offset": 547}, "start": {"col": 22, "line": 23, "offset": 524}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "vulnerabilities/exec/source/medium.php", "start": {"col": 22, "line": 23, "offset": 524}}, {"check_id": "php.lang.security.injection.tainted-filename.tainted-filename", "end": {"col": 29, "line": 7, "offset": 118}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "$file", "location": {"end": {"col": 6, "line": 4, "offset": 46}, "path": "vulnerabilities/fi/source/high.php", "start": {"col": 1, "line": 4, "offset": 41}}}], "taint_sink": ["CliLoc", [{"end": {"col": 29, "line": 7, "offset": 118}, "path": "vulnerabilities/fi/source/high.php", "start": {"col": 24, "line": 7, "offset": 113}}, "$file"]], "taint_source": ["CliLoc", [{"end": {"col": 14, "line": 4, "offset": 54}, "path": "vulnerabilities/fi/source/high.php", "start": {"col": 9, "line": 4, "offset": 49}}, "$_GET"]]}, "engine_kind": "OSS", "fingerprint": "9c2945ecb650e938aadf56837db8d4d48ee01fc7cb6a4fc8700f363769cdf458f90213c4f6ef9d116eae43c9acc9feda991197901616d647172cfb0ab1dc27d3_0", "is_ignored": false, "lines": "if( !fnmatch( \"file*\", $file ) && $file != \"include.php\" ) {", "message": "File name based on user input risks server-side request forgery.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-918: Server-Side Request Forgery (SSRF)"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A10:2021 - Server-Side Request Forgery (SSRF)"], "references": ["https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 16250, "rule_id": "5rUpro", "rv_id": 110042, "url": "https://semgrep.dev/playground/r/K3Tvjky/php.lang.security.injection.tainted-filename.tainted-filename", "version_id": "K3Tvjky"}}, "shortlink": "https://sg.run/Ayqp", "source": "https://semgrep.dev/r/php.lang.security.injection.tainted-filename.tainted-filename", "subcategory": ["vuln"], "technology": ["php"], "vulnerability_class": ["Server-Side Request Forgery (SSRF)"]}, "metavars": {"$FILENAME": {"abstract_content": "$file", "end": {"col": 29, "line": 7, "offset": 118}, "propagated_value": {"svalue_abstract_content": "$_GET['page']", "svalue_end": {"col": 24, "line": 4, "offset": 64}, "svalue_start": {"col": 9, "line": 4, "offset": 49}}, "start": {"col": 24, "line": 7, "offset": 113}}, "$PATTERN": {"abstract_content": "\"file*\"", "end": {"col": 22, "line": 7, "offset": 111}, "start": {"col": 15, "line": 7, "offset": 104}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "vulnerabilities/fi/source/high.php", "start": {"col": 24, "line": 7, "offset": 113}}, {"check_id": "php.lang.security.md5-loose-equality.md5-loose-equality", "end": {"col": 45, "line": 43, "offset": 1132}, "extra": {"engine_kind": "OSS", "fingerprint": "f69feef9507bba9e9d62ba17121996b65ad1d45bbf10ab4554e532cefc55a103bde1c5ed2fc120c840cfa02e8b07fa53ebeaccd009f71bf9fce8815c5ddcba6d_0", "is_ignored": false, "lines": "\t\t\t\t\tif ($token == md5(str_rot13(\"success\"))) {", "message": "Make sure comparisons involving md5 values are strict (use `===` not `==`) to avoid type juggling issues", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-697: Incorrect Comparison"], "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "references": ["https://www.php.net/manual/en/types.comparisons.php", "https://www.whitehatsec.com/blog/magic-hashes/"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9396, "rule_id": "GdU7RO", "rv_id": 110049, "url": "https://semgrep.dev/playground/r/pZT1yYG/php.lang.security.md5-loose-equality.md5-loose-equality", "version_id": "pZT1yYG"}}, "shortlink": "https://sg.run/Do4G", "source": "https://semgrep.dev/r/php.lang.security.md5-loose-equality.md5-loose-equality", "subcategory": ["audit"], "technology": ["php"], "vulnerability_class": ["Other"]}, "metavars": {"$FUNC": {"abstract_content": "md5", "end": {"col": 23, "line": 43, "offset": 1110}, "start": {"col": 20, "line": 43, "offset": 1107}}, "$X": {"abstract_content": "$token", "end": {"col": 16, "line": 43, "offset": 1103}, "propagated_value": {"svalue_abstract_content": "$_POST['token']", "svalue_end": {"col": 27, "line": 38, "offset": 1001}, "svalue_start": {"col": 12, "line": 38, "offset": 986}}, "start": {"col": 10, "line": 43, "offset": 1097}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "vulnerabilities/javascript/index.php", "start": {"col": 10, "line": 43, "offset": 1097}}, {"check_id": "javascript.browser.security.eval-detected.eval-detected", "end": {"col": 10417, "line": 1, "offset": 10416}, "extra": {"engine_kind": "OSS", "fingerprint": "25e8c8312e66b03210cb45ca084b75fa689ca4ad18b7e0ba6f0c74308abda6719c1045d21ff345e0bab01eb1f359f9f14592d06ffcfccc0b072ae716f9b8ae5e_0", "is_ignored": false, "lines": "var a=['fromCharCode','toString','replace','BeJ','\\x5cw+','Lyg','SuR','(w(){\\x273M\\x203L\\x27;q\\x201l=\\x273K\\x203I\\x203J\\x20T\\x27;q\\x201R=1c\\x202I===\\x271n\\x27;q\\x20Y=1R?2I:{};p(Y.3N){1R=1O}q\\x202L=!1R&&1c\\x202M===\\x271n\\x27;q\\x202o=!Y.2S&&1c\\x202d===\\x271n\\x27&&2d.2Q&&2d.2Q.3S;p(2o){Y=3R}z\\x20p(2L){Y=2M}q\\x202G=!Y.3Q&&1c\\x202g===\\x271n\\x27&&2g.X;q\\x202s=1c\\x202l===\\x27w\\x27&&2l.3P;q\\x201y=!Y.3H&&1c\\x20Z!==\\x272T\\x27;q\\x20m=\\x273G\\x27.3z(\\x27\\x27);q\\x202w=[-3y,3x,3v,3w];q\\x20U=[24,16,8,0];q\\x20K=[3A,3B,3F,3E,3D,3C,3T,3U,4d,4c,4b,49,4a,4e,4f,4j,4i,4h,3u,48,47,3Z,3Y,3X,3V,3W,40,41,46,45,43,42,4k,3f,38,36,39,37,34,33,2Y,31,2Z,35,3t,3n,3m,3l,3o,3p,3s,3r,3q,3k,3j,3d,3a,3c,3b,3e,3h,3g,3i,4g];q\\x201E=[\\x271e\\x27,\\x2727\\x27,\\x271G\\x27,\\x272R\\x27];q\\x20l=[];p(Y.2S||!1z.1K){1z.1K=w(1x){A\\x204C.Q.2U.1I(1x)===\\x27[1n\\x201z]\\x27}}p(1y&&(Y.50||!Z.1N)){Z.1N=w(1x){A\\x201c\\x201x===\\x271n\\x27&&1x.1w&&1x.1w.1J===Z}}q\\x202m=w(1X,x){A\\x20w(s){A\\x20O\\x20N(x,1d).S(s)[1X]()}};q\\x202a=w(x){q\\x20P=2m(\\x271e\\x27,x);p(2o){P=2P(P,x)}P.1T=w(){A\\x20O\\x20N(x)};P.S=w(s){A\\x20P.1T().S(s)};1g(q\\x20i=0;i<1E.W;++i){q\\x20T=1E[i];P[T]=2m(T,x)}A\\x20P};q\\x202P=w(P,x){q\\x201S=2O(\\x222N(\\x271S\\x27)\\x22);q\\x201Y=2O(\\x222N(\\x271w\\x27).1Y\\x22);q\\x202n=x?\\x271H\\x27:\\x271q\\x27;q\\x202z=w(s){p(1c\\x20s===\\x272p\\x27){A\\x201S.2x(2n).S(s,\\x274S\\x27).1G(\\x271e\\x27)}z{p(s===2q||s===2T){1u\\x20O\\x201t(1l)}z\\x20p(s.1J===Z){s=O\\x202r(s)}}p(1z.1K(s)||Z.1N(s)||s.1J===1Y){A\\x201S.2x(2n).S(O\\x201Y(s)).1G(\\x271e\\x27)}z{A\\x20P(s)}};A\\x202z};q\\x202k=w(1X,x){A\\x20w(G,s){A\\x20O\\x201P(G,x,1d).S(s)[1X]()}};q\\x202f=w(x){q\\x20P=2k(\\x271e\\x27,x);P.1T=w(G){A\\x20O\\x201P(G,x)};P.S=w(G,s){A\\x20P.1T(G).S(s)};1g(q\\x20i=0;i<1E.W;++i){q\\x20T=1E[i];P[T]=2k(T,x)}A\\x20P};w\\x20N(x,1v){p(1v){l[0]=l[16]=l[1]=l[2]=l[3]=l[4]=l[5]=l[6]=l[7]=l[8]=l[9]=l[10]=l[11]=l[12]=l[13]=l[14]=l[15]=0;k.l=l}z{k.l=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}p(x){k.C=4I;k.B=4H;k.E=4l;k.F=4U;k.J=4J;k.I=4K;k.H=4L;k.D=4T}z{k.C=4X;k.B=4W;k.E=4Y;k.F=4Z;k.J=4V;k.I=4O;k.H=4F;k.D=4s}k.1C=k.1A=k.L=k.2i=0;k.1U=k.1L=1O;k.2j=1d;k.x=x}N.Q.S=w(s){p(k.1U){A}q\\x202h,T=1c\\x20s;p(T!==\\x272p\\x27){p(T===\\x271n\\x27){p(s===2q){1u\\x20O\\x201t(1l)}z\\x20p(1y&&s.1J===Z){s=O\\x202r(s)}z\\x20p(!1z.1K(s)){p(!1y||!Z.1N(s)){1u\\x20O\\x201t(1l)}}}z{1u\\x20O\\x201t(1l)}2h=1d}q\\x20r,M=0,i,W=s.W,l=k.l;4t(M<W){p(k.1L){k.1L=1O;l[0]=k.1C;l[16]=l[1]=l[2]=l[3]=l[4]=l[5]=l[6]=l[7]=l[8]=l[9]=l[10]=l[11]=l[12]=l[13]=l[14]=l[15]=0}p(2h){1g(i=k.1A;M<W&&i<1k;++M){l[i>>2]|=s[M]<<U[i++&3]}}z{1g(i=k.1A;M<W&&i<1k;++M){r=s.1Q(M);p(r<R){l[i>>2]|=r<<U[i++&3]}z\\x20p(r<2v){l[i>>2]|=(2t|(r>>6))<<U[i++&3];l[i>>2]|=(R|(r&V))<<U[i++&3]}z\\x20p(r<2A||r>=2E){l[i>>2]|=(2D|(r>>12))<<U[i++&3];l[i>>2]|=(R|((r>>6)&V))<<U[i++&3];l[i>>2]|=(R|(r&V))<<U[i++&3]}z{r=2C+(((r&23)<<10)|(s.1Q(++M)&23));l[i>>2]|=(2X|(r>>18))<<U[i++&3];l[i>>2]|=(R|((r>>12)&V))<<U[i++&3];l[i>>2]|=(R|((r>>6)&V))<<U[i++&3];l[i>>2]|=(R|(r&V))<<U[i++&3]}}}k.2u=i;k.L+=i-k.1A;p(i>=1k){k.1C=l[16];k.1A=i-1k;k.1W();k.1L=1d}z{k.1A=i}}p(k.L>4r){k.2i+=k.L/2H<<0;k.L=k.L%2H}A\\x20k};N.Q.1s=w(){p(k.1U){A}k.1U=1d;q\\x20l=k.l,i=k.2u;l[16]=k.1C;l[i>>2]|=2w[i&3];k.1C=l[16];p(i>=4q){p(!k.1L){k.1W()}l[0]=k.1C;l[16]=l[1]=l[2]=l[3]=l[4]=l[5]=l[6]=l[7]=l[8]=l[9]=l[10]=l[11]=l[12]=l[13]=l[14]=l[15]=0}l[14]=k.2i<<3|k.L>>>29;l[15]=k.L<<3;k.1W()};N.Q.1W=w(){q\\x20a=k.C,b=k.B,c=k.E,d=k.F,e=k.J,f=k.I,g=k.H,h=k.D,l=k.l,j,1a,1b,1j,v,1f,1h,1B,1Z,1V,1D;1g(j=16;j<1k;++j){v=l[j-15];1a=((v>>>7)|(v<<25))^((v>>>18)|(v<<14))^(v>>>3);v=l[j-2];1b=((v>>>17)|(v<<15))^((v>>>19)|(v<<13))^(v>>>10);l[j]=l[j-16]+1a+l[j-7]+1b<<0}1D=b&c;1g(j=0;j<1k;j+=4){p(k.2j){p(k.x){1B=4m;v=l[0]-4n;h=v-4o<<0;d=v+4p<<0}z{1B=4v;v=l[0]-4w;h=v-4G<<0;d=v+4D<<0}k.2j=1O}z{1a=((a>>>2)|(a<<30))^((a>>>13)|(a<<19))^((a>>>22)|(a<<10));1b=((e>>>6)|(e<<26))^((e>>>11)|(e<<21))^((e>>>25)|(e<<7));1B=a&b;1j=1B^(a&c)^1D;1h=(e&f)^(~e&g);v=h+1b+1h+K[j]+l[j];1f=1a+1j;h=d+v<<0;d=v+1f<<0}1a=((d>>>2)|(d<<30))^((d>>>13)|(d<<19))^((d>>>22)|(d<<10));1b=((h>>>6)|(h<<26))^((h>>>11)|(h<<21))^((h>>>25)|(h<<7));1Z=d&a;1j=1Z^(d&b)^1B;1h=(h&e)^(~h&f);v=g+1b+1h+K[j+1]+l[j+1];1f=1a+1j;g=c+v<<0;c=v+1f<<0;1a=((c>>>2)|(c<<30))^((c>>>13)|(c<<19))^((c>>>22)|(c<<10));1b=((g>>>6)|(g<<26))^((g>>>11)|(g<<21))^((g>>>25)|(g<<7));1V=c&d;1j=1V^(c&a)^1Z;1h=(g&h)^(~g&e);v=f+1b+1h+K[j+2]+l[j+2];1f=1a+1j;f=b+v<<0;b=v+1f<<0;1a=((b>>>2)|(b<<30))^((b>>>13)|(b<<19))^((b>>>22)|(b<<10));1b=((f>>>6)|(f<<26))^((f>>>11)|(f<<21))^((f>>>25)|(f<<7));1D=b&c;1j=1D^(b&d)^1V;1h=(f&g)^(~f&h);v=e+1b+1h+K[j+3]+l[j+3];1f=1a+1j;e=a+v<<0;a=v+1f<<0}k.C=k.C+a<<0;k.B=k.B+b<<0;k.E=k.E+c<<0;k.F=k.F+d<<0;k.J=k.J+e<<0;k.I=k.I+f<<0;k.H=k.H+g<<0;k.D=k.D+h<<0};N.Q.1e=w(){k.1s();q\\x20C=k.C,B=k.B,E=k.E,F=k.F,J=k.J,I=k.I,H=k.H,D=k.D;q\\x201e=m[(C>>28)&o]+m[(C>>24)&o]+m[(C>>20)&o]+m[(C>>16)&o]+m[(C>>12)&o]+m[(C>>8)&o]+m[(C>>4)&o]+m[C&o]+m[(B>>28)&o]+m[(B>>24)&o]+m[(B>>20)&o]+m[(B>>16)&o]+m[(B>>12)&o]+m[(B>>8)&o]+m[(B>>4)&o]+m[B&o]+m[(E>>28)&o]+m[(E>>24)&o]+m[(E>>20)&o]+m[(E>>16)&o]+m[(E>>12)&o]+m[(E>>8)&o]+m[(E>>4)&o]+m[E&o]+m[(F>>28)&o]+m[(F>>24)&o]+m[(F>>20)&o]+m[(F>>16)&o]+m[(F>>12)&o]+m[(F>>8)&o]+m[(F>>4)&o]+m[F&o]+m[(J>>28)&o]+m[(J>>24)&o]+m[(J>>20)&o]+m[(J>>16)&o]+m[(J>>12)&o]+m[(J>>8)&o]+m[(J>>4)&o]+m[J&o]+m[(I>>28)&o]+m[(I>>24)&o]+m[(I>>20)&o]+m[(I>>16)&o]+m[(I>>12)&o]+m[(I>>8)&o]+m[(I>>4)&o]+m[I&o]+m[(H>>28)&o]+m[(H>>24)&o]+m[(H>>20)&o]+m[(H>>16)&o]+m[(H>>12)&o]+m[(H>>8)&o]+m[(H>>4)&o]+m[H&o];p(!k.x){1e+=m[(D>>28)&o]+m[(D>>24)&o]+m[(D>>20)&o]+m[(D>>16)&o]+m[(D>>12)&o]+m[(D>>8)&o]+m[(D>>4)&o]+m[D&o]}A\\x201e};N.Q.2U=N.Q.1e;N.Q.1G=w(){k.1s();q\\x20C=k.C,B=k.B,E=k.E,F=k.F,J=k.J,I=k.I,H=k.H,D=k.D;q\\x202b=[(C>>24)&u,(C>>16)&u,(C>>8)&u,C&u,(B>>24)&u,(B>>16)&u,(B>>8)&u,B&u,(E>>24)&u,(E>>16)&u,(E>>8)&u,E&u,(F>>24)&u,(F>>16)&u,(F>>8)&u,F&u,(J>>24)&u,(J>>16)&u,(J>>8)&u,J&u,(I>>24)&u,(I>>16)&u,(I>>8)&u,I&u,(H>>24)&u,(H>>16)&u,(H>>8)&u,H&u];p(!k.x){2b.4A((D>>24)&u,(D>>16)&u,(D>>8)&u,D&u)}A\\x202b};N.Q.27=N.Q.1G;N.Q.2R=w(){k.1s();q\\x201w=O\\x20Z(k.x?28:32);q\\x201i=O\\x204x(1w);1i.1p(0,k.C);1i.1p(4,k.B);1i.1p(8,k.E);1i.1p(12,k.F);1i.1p(16,k.J);1i.1p(20,k.I);1i.1p(24,k.H);p(!k.x){1i.1p(28,k.D)}A\\x201w};w\\x201P(G,x,1v){q\\x20i,T=1c\\x20G;p(T===\\x272p\\x27){q\\x20L=[],W=G.W,M=0,r;1g(i=0;i<W;++i){r=G.1Q(i);p(r<R){L[M++]=r}z\\x20p(r<2v){L[M++]=(2t|(r>>6));L[M++]=(R|(r&V))}z\\x20p(r<2A||r>=2E){L[M++]=(2D|(r>>12));L[M++]=(R|((r>>6)&V));L[M++]=(R|(r&V))}z{r=2C+(((r&23)<<10)|(G.1Q(++i)&23));L[M++]=(2X|(r>>18));L[M++]=(R|((r>>12)&V));L[M++]=(R|((r>>6)&V));L[M++]=(R|(r&V))}}G=L}z{p(T===\\x271n\\x27){p(G===2q){1u\\x20O\\x201t(1l)}z\\x20p(1y&&G.1J===Z){G=O\\x202r(G)}z\\x20p(!1z.1K(G)){p(!1y||!Z.1N(G)){1u\\x20O\\x201t(1l)}}}z{1u\\x20O\\x201t(1l)}}p(G.W>1k){G=(O\\x20N(x,1d)).S(G).27()}q\\x201F=[],2e=[];1g(i=0;i<1k;++i){q\\x20b=G[i]||0;1F[i]=4z^b;2e[i]=4y^b}N.1I(k,x,1v);k.S(2e);k.1F=1F;k.2c=1d;k.1v=1v}1P.Q=O\\x20N();1P.Q.1s=w(){N.Q.1s.1I(k);p(k.2c){k.2c=1O;q\\x202W=k.27();N.1I(k,k.x,k.1v);k.S(k.1F);k.S(2W);N.Q.1s.1I(k)}};q\\x20X=2a();X.1q=X;X.1H=2a(1d);X.1q.2V=2f();X.1H.2V=2f(1d);p(2G){2g.X=X}z{Y.1q=X.1q;Y.1H=X.1H;p(2s){2l(w(){A\\x20X})}}})();w\\x202y(e){1g(q\\x20t=\\x22\\x22,n=e.W-1;n>=0;n--)t+=e[n];A\\x20t}w\\x202J(t,y=\\x224B\\x22){1m.1o(\\x221M\\x22).1r=1q(1m.1o(\\x221M\\x22).1r+y)}w\\x202B(e=\\x224E\\x22){1m.1o(\\x221M\\x22).1r=1q(e+1m.1o(\\x221M\\x22).1r)}w\\x202K(a,b){1m.1o(\\x221M\\x22).1r=2y(1m.1o(\\x222F\\x22).1r)}1m.1o(\\x222F\\x22).1r=\\x22\\x22;4u(w(){2B(\\x224M\\x22)},4N);1m.1o(\\x224P\\x22).4Q(\\x224R\\x22,2J);2K(\\x223O\\x22,44);','||||||||||||||||||||this|blocks|HEX_CHARS||0x0F|if|var|code|message||0xFF|t1|function|is224||else|return|h1|h0|h7|h2|h3|key|h6|h5|h4||bytes|index|Sha256|new|method|prototype|0x80|update|type|SHIFT|0x3f|length|exports|root|ArrayBuffer|||||||||||s0|s1|typeof|true|hex|t2|for|ch|dataView|maj|64|ERROR|document|object|getElementById|setUint32|sha256|value|finalize|Error|throw|sharedMemory|buffer|obj|ARRAY_BUFFER|Array|start|ab|block|bc|OUTPUT_TYPES|oKeyPad|digest|sha224|call|constructor|isArray|hashed|token|isView|false|HmacSha256|charCodeAt|WINDOW|crypto|create|finalized|cd|hash|outputType|Buffer|da||||0x3ff||||array|||createMethod|arr|inner|process|iKeyPad|createHmacMethod|module|notString|hBytes|first|createHmacOutputMethod|define|createOutputMethod|algorithm|NODE_JS|string|null|Uint8Array|AMD|0xc0|lastByteIndex|0x800|EXTRA|createHash|do_something|nodeMethod|0xd800|token_part_2|0x10000|0xe0|0xe000|phrase|COMMON_JS|4294967296|window|token_part_3|token_part_1|WEB_WORKER|self|require|eval|nodeWrap|versions|arrayBuffer|JS_SHA256_NO_NODE_JS|undefined|toString|hmac|innerHash|0xf0|0xa2bfe8a1|0xc24b8b70||0xa81a664b||0x92722c85|0x81c2c92e|0xc76c51a3|0x53380d13|0x766a0abb|0x4d2c6dfc|0x650a7354|0x748f82ee|0x84c87814|0x78a5636f|0x682e6ff3|0x8cc70208|0x2e1b2138|0xa4506ceb|0x90befffa|0xbef9a3f7|0x5b9cca4f|0x4ed8aa4a|0x106aa070|0xf40e3585|0xd6990624|0x19a4c116|0x1e376c08|0x391c0cb3|0x34b0bcb5|0x2748774c|0xd192e819|0x0fc19dc6|32768|128|8388608|2147483648|split|0x428a2f98|0x71374491|0x59f111f1|0x3956c25b|0xe9b5dba5|0xb5c0fbcf|0123456789abcdef|JS_SHA256_NO_ARRAY_BUFFER|is|invalid|input|strict|use|JS_SHA256_NO_WINDOW|ABCD|amd|JS_SHA256_NO_COMMON_JS|global|node|0x923f82a4|0xab1c5ed5|0x983e5152|0xa831c66d|0x76f988da|0x5cb0a9dc|0x4a7484aa|0xb00327c8|0xbf597fc7|0x14292967|0x06ca6351||0xd5a79147|0xc6e00bf3|0x2de92c6f|0x240ca1cc|0x550c7dc3|0x72be5d74|0x243185be|0x12835b01|0xd807aa98|0x80deb1fe|0x9bdc06a7|0xc67178f2|0xefbe4786|0xe49b69c1|0xc19bf174|0x27b70a85|0x3070dd17|300032|1413257819|150054599|24177077|56|4294967295|0x5be0cd19|while|setTimeout|704751109|210244248|DataView|0x36|0x5c|push|ZZ|Object|143694565|YY|0x1f83d9ab|1521486534|0x367cd507|0xc1059ed8|0xffc00b31|0x68581511|0x64f98fa7|XX|300|0x9b05688c|send|addEventListener|click|utf8|0xbefa4fa4|0xf70e5939|0x510e527f|0xbb67ae85|0x6a09e667|0x3c6ef372|0xa54ff53a|JS_SHA256_NO_ARRAY_BUFFER_IS_VIEW','split'];(function(c,d){var e=function(f){while(--f){c['push'](c['shift']());}};e(++d);}(a,0x1f4));var b=function(c,d){c=c-0x0;var e=a[c];return e;};eval(function(d,e,f,g,h,i){h=function(j){return(j<e?'':h(parseInt(j/e)))+((j=j%e)>0x23?String[b('0x0')](j+0x1d):j[b('0x1')](0x24));};if(!''[b('0x2')](/^/,String)){while(f--){i[h(f)]=g[f]||h(f);}g=[function(k){if('wpA'!==b('0x3')){return i[k];}else{while(f--){i[k(f)]=g[f]||k(f);}g=[function(l){return i[l];}];k=function(){return b('0x4');};f=0x1;}}];h=function(){return b('0x4');};f=0x1;};while(f--){if(g[f]){if(b('0x5')===b('0x6')){return i[h];}else{d=d[b('0x2')](new RegExp('\\x5cb'+h(f)+'\\x5cb','g'),g[f]);}}}return d;}(b('0x7'),0x3e,0x137,b('0x8')[b('0x9')]('|'),0x0,{}));", "message": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.", "metadata": {"asvs": {"control_id": "5.2.4 Dynamic Code Execution Features", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing", "section": "V5 Validation, Sanitization and Encoding", "version": "4"}, "category": "security", "confidence": "LOW", "cwe": ["CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9238, "rule_id": "GdU7dw", "rv_id": 109815, "url": "https://semgrep.dev/playground/r/xyTKZ6r/javascript.browser.security.eval-detected.eval-detected", "version_id": "xyTKZ6r"}}, "shortlink": "https://sg.run/7ope", "source": "https://semgrep.dev/r/javascript.browser.security.eval-detected.eval-detected", "subcategory": ["audit"], "technology": ["browser"], "vulnerability_class": ["Code Injection"]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "vulnerabilities/javascript/source/high.js", "start": {"col": 9843, "line": 1, "offset": 9842}}, {"check_id": "javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp", "end": {"col": 10344, "line": 1, "offset": 10343}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "f", "location": {"end": {"col": 9862, "line": 1, "offset": 9861}, "path": "vulnerabilities/javascript/source/high.js", "start": {"col": 9861, "line": 1, "offset": 9860}}}], "taint_sink": ["CliLoc", [{"end": {"col": 10344, "line": 1, "offset": 10343}, "path": "vulnerabilities/javascript/source/high.js", "start": {"col": 10308, "line": 1, "offset": 10307}}, "new RegExp('\\x5cb'+h(f)+'\\x5cb','g')"]], "taint_source": ["CliLoc", [{"end": {"col": 9862, "line": 1, "offset": 9861}, "path": "vulnerabilities/javascript/source/high.js", "start": {"col": 9861, "line": 1, "offset": 9860}}, "f"]]}, "engine_kind": "OSS", "fingerprint": "694c30f61864e311b89bb92666d95b87af9853134c59844468d278082e5783a502f19d3e6b8c7f6ebe0c2ebbb75543d583dc17bd81c6ee0551dec45603dd0707_0", "is_ignored": false, "lines": "var a=['fromCharCode','toString','replace','BeJ','\\x5cw+','Lyg','SuR','(w(){\\x273M\\x203L\\x27;q\\x201l=\\x273K\\x203I\\x203J\\x20T\\x27;q\\x201R=1c\\x202I===\\x271n\\x27;q\\x20Y=1R?2I:{};p(Y.3N){1R=1O}q\\x202L=!1R&&1c\\x202M===\\x271n\\x27;q\\x202o=!Y.2S&&1c\\x202d===\\x271n\\x27&&2d.2Q&&2d.2Q.3S;p(2o){Y=3R}z\\x20p(2L){Y=2M}q\\x202G=!Y.3Q&&1c\\x202g===\\x271n\\x27&&2g.X;q\\x202s=1c\\x202l===\\x27w\\x27&&2l.3P;q\\x201y=!Y.3H&&1c\\x20Z!==\\x272T\\x27;q\\x20m=\\x273G\\x27.3z(\\x27\\x27);q\\x202w=[-3y,3x,3v,3w];q\\x20U=[24,16,8,0];q\\x20K=[3A,3B,3F,3E,3D,3C,3T,3U,4d,4c,4b,49,4a,4e,4f,4j,4i,4h,3u,48,47,3Z,3Y,3X,3V,3W,40,41,46,45,43,42,4k,3f,38,36,39,37,34,33,2Y,31,2Z,35,3t,3n,3m,3l,3o,3p,3s,3r,3q,3k,3j,3d,3a,3c,3b,3e,3h,3g,3i,4g];q\\x201E=[\\x271e\\x27,\\x2727\\x27,\\x271G\\x27,\\x272R\\x27];q\\x20l=[];p(Y.2S||!1z.1K){1z.1K=w(1x){A\\x204C.Q.2U.1I(1x)===\\x27[1n\\x201z]\\x27}}p(1y&&(Y.50||!Z.1N)){Z.1N=w(1x){A\\x201c\\x201x===\\x271n\\x27&&1x.1w&&1x.1w.1J===Z}}q\\x202m=w(1X,x){A\\x20w(s){A\\x20O\\x20N(x,1d).S(s)[1X]()}};q\\x202a=w(x){q\\x20P=2m(\\x271e\\x27,x);p(2o){P=2P(P,x)}P.1T=w(){A\\x20O\\x20N(x)};P.S=w(s){A\\x20P.1T().S(s)};1g(q\\x20i=0;i<1E.W;++i){q\\x20T=1E[i];P[T]=2m(T,x)}A\\x20P};q\\x202P=w(P,x){q\\x201S=2O(\\x222N(\\x271S\\x27)\\x22);q\\x201Y=2O(\\x222N(\\x271w\\x27).1Y\\x22);q\\x202n=x?\\x271H\\x27:\\x271q\\x27;q\\x202z=w(s){p(1c\\x20s===\\x272p\\x27){A\\x201S.2x(2n).S(s,\\x274S\\x27).1G(\\x271e\\x27)}z{p(s===2q||s===2T){1u\\x20O\\x201t(1l)}z\\x20p(s.1J===Z){s=O\\x202r(s)}}p(1z.1K(s)||Z.1N(s)||s.1J===1Y){A\\x201S.2x(2n).S(O\\x201Y(s)).1G(\\x271e\\x27)}z{A\\x20P(s)}};A\\x202z};q\\x202k=w(1X,x){A\\x20w(G,s){A\\x20O\\x201P(G,x,1d).S(s)[1X]()}};q\\x202f=w(x){q\\x20P=2k(\\x271e\\x27,x);P.1T=w(G){A\\x20O\\x201P(G,x)};P.S=w(G,s){A\\x20P.1T(G).S(s)};1g(q\\x20i=0;i<1E.W;++i){q\\x20T=1E[i];P[T]=2k(T,x)}A\\x20P};w\\x20N(x,1v){p(1v){l[0]=l[16]=l[1]=l[2]=l[3]=l[4]=l[5]=l[6]=l[7]=l[8]=l[9]=l[10]=l[11]=l[12]=l[13]=l[14]=l[15]=0;k.l=l}z{k.l=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}p(x){k.C=4I;k.B=4H;k.E=4l;k.F=4U;k.J=4J;k.I=4K;k.H=4L;k.D=4T}z{k.C=4X;k.B=4W;k.E=4Y;k.F=4Z;k.J=4V;k.I=4O;k.H=4F;k.D=4s}k.1C=k.1A=k.L=k.2i=0;k.1U=k.1L=1O;k.2j=1d;k.x=x}N.Q.S=w(s){p(k.1U){A}q\\x202h,T=1c\\x20s;p(T!==\\x272p\\x27){p(T===\\x271n\\x27){p(s===2q){1u\\x20O\\x201t(1l)}z\\x20p(1y&&s.1J===Z){s=O\\x202r(s)}z\\x20p(!1z.1K(s)){p(!1y||!Z.1N(s)){1u\\x20O\\x201t(1l)}}}z{1u\\x20O\\x201t(1l)}2h=1d}q\\x20r,M=0,i,W=s.W,l=k.l;4t(M<W){p(k.1L){k.1L=1O;l[0]=k.1C;l[16]=l[1]=l[2]=l[3]=l[4]=l[5]=l[6]=l[7]=l[8]=l[9]=l[10]=l[11]=l[12]=l[13]=l[14]=l[15]=0}p(2h){1g(i=k.1A;M<W&&i<1k;++M){l[i>>2]|=s[M]<<U[i++&3]}}z{1g(i=k.1A;M<W&&i<1k;++M){r=s.1Q(M);p(r<R){l[i>>2]|=r<<U[i++&3]}z\\x20p(r<2v){l[i>>2]|=(2t|(r>>6))<<U[i++&3];l[i>>2]|=(R|(r&V))<<U[i++&3]}z\\x20p(r<2A||r>=2E){l[i>>2]|=(2D|(r>>12))<<U[i++&3];l[i>>2]|=(R|((r>>6)&V))<<U[i++&3];l[i>>2]|=(R|(r&V))<<U[i++&3]}z{r=2C+(((r&23)<<10)|(s.1Q(++M)&23));l[i>>2]|=(2X|(r>>18))<<U[i++&3];l[i>>2]|=(R|((r>>12)&V))<<U[i++&3];l[i>>2]|=(R|((r>>6)&V))<<U[i++&3];l[i>>2]|=(R|(r&V))<<U[i++&3]}}}k.2u=i;k.L+=i-k.1A;p(i>=1k){k.1C=l[16];k.1A=i-1k;k.1W();k.1L=1d}z{k.1A=i}}p(k.L>4r){k.2i+=k.L/2H<<0;k.L=k.L%2H}A\\x20k};N.Q.1s=w(){p(k.1U){A}k.1U=1d;q\\x20l=k.l,i=k.2u;l[16]=k.1C;l[i>>2]|=2w[i&3];k.1C=l[16];p(i>=4q){p(!k.1L){k.1W()}l[0]=k.1C;l[16]=l[1]=l[2]=l[3]=l[4]=l[5]=l[6]=l[7]=l[8]=l[9]=l[10]=l[11]=l[12]=l[13]=l[14]=l[15]=0}l[14]=k.2i<<3|k.L>>>29;l[15]=k.L<<3;k.1W()};N.Q.1W=w(){q\\x20a=k.C,b=k.B,c=k.E,d=k.F,e=k.J,f=k.I,g=k.H,h=k.D,l=k.l,j,1a,1b,1j,v,1f,1h,1B,1Z,1V,1D;1g(j=16;j<1k;++j){v=l[j-15];1a=((v>>>7)|(v<<25))^((v>>>18)|(v<<14))^(v>>>3);v=l[j-2];1b=((v>>>17)|(v<<15))^((v>>>19)|(v<<13))^(v>>>10);l[j]=l[j-16]+1a+l[j-7]+1b<<0}1D=b&c;1g(j=0;j<1k;j+=4){p(k.2j){p(k.x){1B=4m;v=l[0]-4n;h=v-4o<<0;d=v+4p<<0}z{1B=4v;v=l[0]-4w;h=v-4G<<0;d=v+4D<<0}k.2j=1O}z{1a=((a>>>2)|(a<<30))^((a>>>13)|(a<<19))^((a>>>22)|(a<<10));1b=((e>>>6)|(e<<26))^((e>>>11)|(e<<21))^((e>>>25)|(e<<7));1B=a&b;1j=1B^(a&c)^1D;1h=(e&f)^(~e&g);v=h+1b+1h+K[j]+l[j];1f=1a+1j;h=d+v<<0;d=v+1f<<0}1a=((d>>>2)|(d<<30))^((d>>>13)|(d<<19))^((d>>>22)|(d<<10));1b=((h>>>6)|(h<<26))^((h>>>11)|(h<<21))^((h>>>25)|(h<<7));1Z=d&a;1j=1Z^(d&b)^1B;1h=(h&e)^(~h&f);v=g+1b+1h+K[j+1]+l[j+1];1f=1a+1j;g=c+v<<0;c=v+1f<<0;1a=((c>>>2)|(c<<30))^((c>>>13)|(c<<19))^((c>>>22)|(c<<10));1b=((g>>>6)|(g<<26))^((g>>>11)|(g<<21))^((g>>>25)|(g<<7));1V=c&d;1j=1V^(c&a)^1Z;1h=(g&h)^(~g&e);v=f+1b+1h+K[j+2]+l[j+2];1f=1a+1j;f=b+v<<0;b=v+1f<<0;1a=((b>>>2)|(b<<30))^((b>>>13)|(b<<19))^((b>>>22)|(b<<10));1b=((f>>>6)|(f<<26))^((f>>>11)|(f<<21))^((f>>>25)|(f<<7));1D=b&c;1j=1D^(b&d)^1V;1h=(f&g)^(~f&h);v=e+1b+1h+K[j+3]+l[j+3];1f=1a+1j;e=a+v<<0;a=v+1f<<0}k.C=k.C+a<<0;k.B=k.B+b<<0;k.E=k.E+c<<0;k.F=k.F+d<<0;k.J=k.J+e<<0;k.I=k.I+f<<0;k.H=k.H+g<<0;k.D=k.D+h<<0};N.Q.1e=w(){k.1s();q\\x20C=k.C,B=k.B,E=k.E,F=k.F,J=k.J,I=k.I,H=k.H,D=k.D;q\\x201e=m[(C>>28)&o]+m[(C>>24)&o]+m[(C>>20)&o]+m[(C>>16)&o]+m[(C>>12)&o]+m[(C>>8)&o]+m[(C>>4)&o]+m[C&o]+m[(B>>28)&o]+m[(B>>24)&o]+m[(B>>20)&o]+m[(B>>16)&o]+m[(B>>12)&o]+m[(B>>8)&o]+m[(B>>4)&o]+m[B&o]+m[(E>>28)&o]+m[(E>>24)&o]+m[(E>>20)&o]+m[(E>>16)&o]+m[(E>>12)&o]+m[(E>>8)&o]+m[(E>>4)&o]+m[E&o]+m[(F>>28)&o]+m[(F>>24)&o]+m[(F>>20)&o]+m[(F>>16)&o]+m[(F>>12)&o]+m[(F>>8)&o]+m[(F>>4)&o]+m[F&o]+m[(J>>28)&o]+m[(J>>24)&o]+m[(J>>20)&o]+m[(J>>16)&o]+m[(J>>12)&o]+m[(J>>8)&o]+m[(J>>4)&o]+m[J&o]+m[(I>>28)&o]+m[(I>>24)&o]+m[(I>>20)&o]+m[(I>>16)&o]+m[(I>>12)&o]+m[(I>>8)&o]+m[(I>>4)&o]+m[I&o]+m[(H>>28)&o]+m[(H>>24)&o]+m[(H>>20)&o]+m[(H>>16)&o]+m[(H>>12)&o]+m[(H>>8)&o]+m[(H>>4)&o]+m[H&o];p(!k.x){1e+=m[(D>>28)&o]+m[(D>>24)&o]+m[(D>>20)&o]+m[(D>>16)&o]+m[(D>>12)&o]+m[(D>>8)&o]+m[(D>>4)&o]+m[D&o]}A\\x201e};N.Q.2U=N.Q.1e;N.Q.1G=w(){k.1s();q\\x20C=k.C,B=k.B,E=k.E,F=k.F,J=k.J,I=k.I,H=k.H,D=k.D;q\\x202b=[(C>>24)&u,(C>>16)&u,(C>>8)&u,C&u,(B>>24)&u,(B>>16)&u,(B>>8)&u,B&u,(E>>24)&u,(E>>16)&u,(E>>8)&u,E&u,(F>>24)&u,(F>>16)&u,(F>>8)&u,F&u,(J>>24)&u,(J>>16)&u,(J>>8)&u,J&u,(I>>24)&u,(I>>16)&u,(I>>8)&u,I&u,(H>>24)&u,(H>>16)&u,(H>>8)&u,H&u];p(!k.x){2b.4A((D>>24)&u,(D>>16)&u,(D>>8)&u,D&u)}A\\x202b};N.Q.27=N.Q.1G;N.Q.2R=w(){k.1s();q\\x201w=O\\x20Z(k.x?28:32);q\\x201i=O\\x204x(1w);1i.1p(0,k.C);1i.1p(4,k.B);1i.1p(8,k.E);1i.1p(12,k.F);1i.1p(16,k.J);1i.1p(20,k.I);1i.1p(24,k.H);p(!k.x){1i.1p(28,k.D)}A\\x201w};w\\x201P(G,x,1v){q\\x20i,T=1c\\x20G;p(T===\\x272p\\x27){q\\x20L=[],W=G.W,M=0,r;1g(i=0;i<W;++i){r=G.1Q(i);p(r<R){L[M++]=r}z\\x20p(r<2v){L[M++]=(2t|(r>>6));L[M++]=(R|(r&V))}z\\x20p(r<2A||r>=2E){L[M++]=(2D|(r>>12));L[M++]=(R|((r>>6)&V));L[M++]=(R|(r&V))}z{r=2C+(((r&23)<<10)|(G.1Q(++i)&23));L[M++]=(2X|(r>>18));L[M++]=(R|((r>>12)&V));L[M++]=(R|((r>>6)&V));L[M++]=(R|(r&V))}}G=L}z{p(T===\\x271n\\x27){p(G===2q){1u\\x20O\\x201t(1l)}z\\x20p(1y&&G.1J===Z){G=O\\x202r(G)}z\\x20p(!1z.1K(G)){p(!1y||!Z.1N(G)){1u\\x20O\\x201t(1l)}}}z{1u\\x20O\\x201t(1l)}}p(G.W>1k){G=(O\\x20N(x,1d)).S(G).27()}q\\x201F=[],2e=[];1g(i=0;i<1k;++i){q\\x20b=G[i]||0;1F[i]=4z^b;2e[i]=4y^b}N.1I(k,x,1v);k.S(2e);k.1F=1F;k.2c=1d;k.1v=1v}1P.Q=O\\x20N();1P.Q.1s=w(){N.Q.1s.1I(k);p(k.2c){k.2c=1O;q\\x202W=k.27();N.1I(k,k.x,k.1v);k.S(k.1F);k.S(2W);N.Q.1s.1I(k)}};q\\x20X=2a();X.1q=X;X.1H=2a(1d);X.1q.2V=2f();X.1H.2V=2f(1d);p(2G){2g.X=X}z{Y.1q=X.1q;Y.1H=X.1H;p(2s){2l(w(){A\\x20X})}}})();w\\x202y(e){1g(q\\x20t=\\x22\\x22,n=e.W-1;n>=0;n--)t+=e[n];A\\x20t}w\\x202J(t,y=\\x224B\\x22){1m.1o(\\x221M\\x22).1r=1q(1m.1o(\\x221M\\x22).1r+y)}w\\x202B(e=\\x224E\\x22){1m.1o(\\x221M\\x22).1r=1q(e+1m.1o(\\x221M\\x22).1r)}w\\x202K(a,b){1m.1o(\\x221M\\x22).1r=2y(1m.1o(\\x222F\\x22).1r)}1m.1o(\\x222F\\x22).1r=\\x22\\x22;4u(w(){2B(\\x224M\\x22)},4N);1m.1o(\\x224P\\x22).4Q(\\x224R\\x22,2J);2K(\\x223O\\x22,44);','||||||||||||||||||||this|blocks|HEX_CHARS||0x0F|if|var|code|message||0xFF|t1|function|is224||else|return|h1|h0|h7|h2|h3|key|h6|h5|h4||bytes|index|Sha256|new|method|prototype|0x80|update|type|SHIFT|0x3f|length|exports|root|ArrayBuffer|||||||||||s0|s1|typeof|true|hex|t2|for|ch|dataView|maj|64|ERROR|document|object|getElementById|setUint32|sha256|value|finalize|Error|throw|sharedMemory|buffer|obj|ARRAY_BUFFER|Array|start|ab|block|bc|OUTPUT_TYPES|oKeyPad|digest|sha224|call|constructor|isArray|hashed|token|isView|false|HmacSha256|charCodeAt|WINDOW|crypto|create|finalized|cd|hash|outputType|Buffer|da||||0x3ff||||array|||createMethod|arr|inner|process|iKeyPad|createHmacMethod|module|notString|hBytes|first|createHmacOutputMethod|define|createOutputMethod|algorithm|NODE_JS|string|null|Uint8Array|AMD|0xc0|lastByteIndex|0x800|EXTRA|createHash|do_something|nodeMethod|0xd800|token_part_2|0x10000|0xe0|0xe000|phrase|COMMON_JS|4294967296|window|token_part_3|token_part_1|WEB_WORKER|self|require|eval|nodeWrap|versions|arrayBuffer|JS_SHA256_NO_NODE_JS|undefined|toString|hmac|innerHash|0xf0|0xa2bfe8a1|0xc24b8b70||0xa81a664b||0x92722c85|0x81c2c92e|0xc76c51a3|0x53380d13|0x766a0abb|0x4d2c6dfc|0x650a7354|0x748f82ee|0x84c87814|0x78a5636f|0x682e6ff3|0x8cc70208|0x2e1b2138|0xa4506ceb|0x90befffa|0xbef9a3f7|0x5b9cca4f|0x4ed8aa4a|0x106aa070|0xf40e3585|0xd6990624|0x19a4c116|0x1e376c08|0x391c0cb3|0x34b0bcb5|0x2748774c|0xd192e819|0x0fc19dc6|32768|128|8388608|2147483648|split|0x428a2f98|0x71374491|0x59f111f1|0x3956c25b|0xe9b5dba5|0xb5c0fbcf|0123456789abcdef|JS_SHA256_NO_ARRAY_BUFFER|is|invalid|input|strict|use|JS_SHA256_NO_WINDOW|ABCD|amd|JS_SHA256_NO_COMMON_JS|global|node|0x923f82a4|0xab1c5ed5|0x983e5152|0xa831c66d|0x76f988da|0x5cb0a9dc|0x4a7484aa|0xb00327c8|0xbf597fc7|0x14292967|0x06ca6351||0xd5a79147|0xc6e00bf3|0x2de92c6f|0x240ca1cc|0x550c7dc3|0x72be5d74|0x243185be|0x12835b01|0xd807aa98|0x80deb1fe|0x9bdc06a7|0xc67178f2|0xefbe4786|0xe49b69c1|0xc19bf174|0x27b70a85|0x3070dd17|300032|1413257819|150054599|24177077|56|4294967295|0x5be0cd19|while|setTimeout|704751109|210244248|DataView|0x36|0x5c|push|ZZ|Object|143694565|YY|0x1f83d9ab|1521486534|0x367cd507|0xc1059ed8|0xffc00b31|0x68581511|0x64f98fa7|XX|300|0x9b05688c|send|addEventListener|click|utf8|0xbefa4fa4|0xf70e5939|0x510e527f|0xbb67ae85|0x6a09e667|0x3c6ef372|0xa54ff53a|JS_SHA256_NO_ARRAY_BUFFER_IS_VIEW','split'];(function(c,d){var e=function(f){while(--f){c['push'](c['shift']());}};e(++d);}(a,0x1f4));var b=function(c,d){c=c-0x0;var e=a[c];return e;};eval(function(d,e,f,g,h,i){h=function(j){return(j<e?'':h(parseInt(j/e)))+((j=j%e)>0x23?String[b('0x0')](j+0x1d):j[b('0x1')](0x24));};if(!''[b('0x2')](/^/,String)){while(f--){i[h(f)]=g[f]||h(f);}g=[function(k){if('wpA'!==b('0x3')){return i[k];}else{while(f--){i[k(f)]=g[f]||k(f);}g=[function(l){return i[l];}];k=function(){return b('0x4');};f=0x1;}}];h=function(){return b('0x4');};f=0x1;};while(f--){if(g[f]){if(b('0x5')===b('0x6')){return i[h];}else{d=d[b('0x2')](new RegExp('\\x5cb'+h(f)+'\\x5cb','g'),g[f]);}}}return d;}(b('0x7'),0x3e,0x137,b('0x8')[b('0x9')]('|'),0x0,{}));", "message": "RegExp() called with a `f` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-1333: Inefficient Regular Expression Complexity"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A05:2021 - Security Misconfiguration", "A06:2017 - Security Misconfiguration"], "references": ["https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 12685, "rule_id": "zdU1gD", "rv_id": 109915, "url": "https://semgrep.dev/playground/r/w8T9nxz/javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp", "version_id": "w8T9nxz"}}, "shortlink": "https://sg.run/gr65", "source": "https://semgrep.dev/r/javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp", "source-rule-url": "https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-non-literal-regexp.js", "subcategory": ["vuln"], "technology": ["javascript"], "vulnerability_class": ["Denial-of-Service (DoS)"]}, "metavars": {"$ARG": {"abstract_content": "f", "end": {"col": 9862, "line": 1, "offset": 9861}, "start": {"col": 9861, "line": 1, "offset": 9860}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "vulnerabilities/javascript/source/high.js", "start": {"col": 10308, "line": 1, "offset": 10307}}, {"check_id": "php.lang.security.injection.tainted-sql-string.tainted-sql-string", "end": {"col": 78, "line": 10, "offset": 238}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "$id", "location": {"end": {"col": 5, "line": 5, "offset": 68}, "path": "vulnerabilities/sqli/source/low.php", "start": {"col": 2, "line": 5, "offset": 65}}}], "taint_sink": ["CliLoc", [{"end": {"col": 78, "line": 10, "offset": 238}, "path": "vulnerabilities/sqli/source/low.php", "start": {"col": 14, "line": 10, "offset": 174}}, "\"SELECT first_name, last_name FROM users WHERE user_id = '$id';\""]], "taint_source": ["CliLoc", [{"end": {"col": 17, "line": 5, "offset": 80}, "path": "vulnerabilities/sqli/source/low.php", "start": {"col": 8, "line": 5, "offset": 71}}, "$_REQUEST"]]}, "engine_kind": "OSS", "fingerprint": "8908c398192147aaaa9b7285eb31b01f7a0f045abca0c26c47e312c57242bf1fb645b723314906d866c1410ea5305e1409b27a9d42d471ea05a62066d3c61361_0", "is_ignored": false, "lines": "\t\t\t$query  = \"SELECT first_name, last_name FROM users WHERE user_id = '$id';\";", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 14757, "rule_id": "qNUXdL", "rv_id": 251682, "url": "https://semgrep.dev/playground/r/RGTevOe/php.lang.security.injection.tainted-sql-string.tainted-sql-string", "version_id": "RGTevOe"}}, "shortlink": "https://sg.run/lZYG", "source": "https://semgrep.dev/r/php.lang.security.injection.tainted-sql-string.tainted-sql-string", "subcategory": ["vuln"], "technology": ["php"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "SELECT", "end": {"col": 7, "line": 1, "offset": 6}, "start": {"col": 1, "line": 1, "offset": 0}}, "$EXPR": {"abstract_content": "SELECT first_name, last_name FROM users WHERE user_id = '", "end": {"col": 72, "line": 10, "offset": 232}, "start": {"col": 15, "line": 10, "offset": 175}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "vulnerabilities/sqli/source/low.php", "start": {"col": 14, "line": 10, "offset": 174}}, {"check_id": "php.lang.security.injection.tainted-sql-string.tainted-sql-string", "end": {"col": 78, "line": 31, "offset": 1082}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "$id", "location": {"end": {"col": 5, "line": 5, "offset": 68}, "path": "vulnerabilities/sqli/source/low.php", "start": {"col": 2, "line": 5, "offset": 65}}}], "taint_sink": ["CliLoc", [{"end": {"col": 78, "line": 31, "offset": 1082}, "path": "vulnerabilities/sqli/source/low.php", "start": {"col": 14, "line": 31, "offset": 1018}}, "\"SELECT first_name, last_name FROM users WHERE user_id = '$id';\""]], "taint_source": ["CliLoc", [{"end": {"col": 17, "line": 5, "offset": 80}, "path": "vulnerabilities/sqli/source/low.php", "start": {"col": 8, "line": 5, "offset": 71}}, "$_REQUEST"]]}, "engine_kind": "OSS", "fingerprint": "8908c398192147aaaa9b7285eb31b01f7a0f045abca0c26c47e312c57242bf1fb645b723314906d866c1410ea5305e1409b27a9d42d471ea05a62066d3c61361_1", "is_ignored": false, "lines": "\t\t\t$query  = \"SELECT first_name, last_name FROM users WHERE user_id = '$id';\";", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 14757, "rule_id": "qNUXdL", "rv_id": 251682, "url": "https://semgrep.dev/playground/r/RGTevOe/php.lang.security.injection.tainted-sql-string.tainted-sql-string", "version_id": "RGTevOe"}}, "shortlink": "https://sg.run/lZYG", "source": "https://semgrep.dev/r/php.lang.security.injection.tainted-sql-string.tainted-sql-string", "subcategory": ["vuln"], "technology": ["php"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "SELECT", "end": {"col": 7, "line": 1, "offset": 6}, "start": {"col": 1, "line": 1, "offset": 0}}, "$EXPR": {"abstract_content": "SELECT first_name, last_name FROM users WHERE user_id = '", "end": {"col": 72, "line": 31, "offset": 1076}, "start": {"col": 15, "line": 31, "offset": 1019}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "vulnerabilities/sqli/source/low.php", "start": {"col": 14, "line": 31, "offset": 1018}}, {"check_id": "php.lang.security.injection.tainted-sql-string.tainted-sql-string", "end": {"col": 86, "line": 11, "offset": 259}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "$id", "location": {"end": {"col": 5, "line": 5, "offset": 63}, "path": "vulnerabilities/sqli_blind/source/high.php", "start": {"col": 2, "line": 5, "offset": 60}}}], "taint_sink": ["CliLoc", [{"end": {"col": 86, "line": 11, "offset": 259}, "path": "vulnerabilities/sqli_blind/source/high.php", "start": {"col": 14, "line": 11, "offset": 187}}, "\"SELECT first_name, last_name FROM users WHERE user_id = '$id' LIMIT 1;\""]], "taint_source": ["CliLoc", [{"end": {"col": 16, "line": 5, "offset": 74}, "path": "vulnerabilities/sqli_blind/source/high.php", "start": {"col": 8, "line": 5, "offset": 66}}, "$_COOKIE"]]}, "engine_kind": "OSS", "fingerprint": "b048f725f87471da7fd0b34f3cc0cb0e77e1123d5e2f6c1193e4aa2f9453f70adc16ee07174aa901916b7e7df3bb2d985e2e367a35133a018095fe30df12d361_0", "is_ignored": false, "lines": "\t\t\t$query  = \"SELECT first_name, last_name FROM users WHERE user_id = '$id' LIMIT 1;\";", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 14757, "rule_id": "qNUXdL", "rv_id": 251682, "url": "https://semgrep.dev/playground/r/RGTevOe/php.lang.security.injection.tainted-sql-string.tainted-sql-string", "version_id": "RGTevOe"}}, "shortlink": "https://sg.run/lZYG", "source": "https://semgrep.dev/r/php.lang.security.injection.tainted-sql-string.tainted-sql-string", "subcategory": ["vuln"], "technology": ["php"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "SELECT", "end": {"col": 7, "line": 1, "offset": 6}, "start": {"col": 1, "line": 1, "offset": 0}}, "$EXPR": {"abstract_content": "SELECT first_name, last_name FROM users WHERE user_id = '", "end": {"col": 72, "line": 11, "offset": 245}, "start": {"col": 15, "line": 11, "offset": 188}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "vulnerabilities/sqli_blind/source/high.php", "start": {"col": 14, "line": 11, "offset": 187}}, {"check_id": "php.laravel.security.laravel-native-sql-injection.laravel-native-sql-injection", "end": {"col": 63, "line": 13, "offset": 334}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "$id", "location": {"end": {"col": 5, "line": 5, "offset": 63}, "path": "vulnerabilities/sqli_blind/source/high.php", "start": {"col": 2, "line": 5, "offset": 60}}}, {"content": "$query", "location": {"end": {"col": 10, "line": 11, "offset": 183}, "path": "vulnerabilities/sqli_blind/source/high.php", "start": {"col": 4, "line": 11, "offset": 177}}}], "taint_sink": ["CliLoc", [{"end": {"col": 63, "line": 13, "offset": 334}, "path": "vulnerabilities/sqli_blind/source/high.php", "start": {"col": 57, "line": 13, "offset": 328}}, "$query"]], "taint_source": ["CliLoc", [{"end": {"col": 16, "line": 5, "offset": 74}, "path": "vulnerabilities/sqli_blind/source/high.php", "start": {"col": 8, "line": 5, "offset": 66}}, "$_COOKIE"]]}, "engine_kind": "OSS", "fingerprint": "84ee864826c9c00a1631643898ae1fe56e825e5a8be57e99f16234896995208d10933c5a8f2faa10059aa5a2bfb35189440aea0539e0e14a6f4ab98f17d44cc5_0", "is_ignored": false, "lines": "\t\t\t\t$result = mysqli_query($GLOBALS[\"___mysqli_ston\"],  $query ); // Removed 'or die' to suppress mysql errors", "message": "Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions. To build SQL queries safely in PHP, it is possible to adopt prepared statements by using `PDO` with bind variables using `bindParam()`.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "functional-categories": ["web::source::cookie::lang", "web::source::http-params::lang", "web::source::http-body::lang", "web::source::header::lang", "web::source::url-path-params::lang", "web::source::form-data::lang", "web::source::cookie::laravel", "web::source::http-params::laravel", "web::source::http-body::laravel", "web::source::header::laravel", "web::source::url-path-params::laravel", "web::source::form-data::laravel", "db::sink::sql-or-nosql-query::lang"], "impact": "HIGH", "license": "Copyright 2023 Semgrep, Inc.", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Laravel_Cheat_Sheet.md"], "semgrep.dev": {"rule": {"origin": "pro_rules", "r_id": 36489, "rule_id": "wdU5LD", "rv_id": 111790, "url": "https://semgrep.dev/playground/r/QkTWwxP/php.laravel.security.laravel-native-sql-injection.laravel-native-sql-injection", "version_id": "QkTWwxP"}}, "shortlink": "https://sg.run/PBq3", "source": "https://semgrep.dev/r/php.laravel.security.laravel-native-sql-injection.laravel-native-sql-injection", "subcategory": ["vuln"], "technology": ["laravel"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$QUERY": {"abstract_content": "$query", "end": {"col": 63, "line": 13, "offset": 334}, "propagated_value": {"svalue_abstract_content": "\"\"SELECT first_name, last_name FROM users WHERE user_id = '$id' LIMIT 1;\"", "svalue_end": {"col": 86, "line": 11, "offset": 259}, "svalue_start": {"col": 14, "line": 11, "offset": 187}}, "start": {"col": 57, "line": 13, "offset": 328}}, "$X": {"abstract_content": "$GLOBALS[\"___mysqli_ston\"]", "end": {"col": 54, "line": 13, "offset": 325}, "start": {"col": 28, "line": 13, "offset": 299}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "vulnerabilities/sqli_blind/source/high.php", "start": {"col": 57, "line": 13, "offset": 328}}, {"check_id": "php.lang.security.injection.tainted-sql-string.tainted-sql-string", "end": {"col": 86, "line": 33, "offset": 929}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "$id", "location": {"end": {"col": 5, "line": 5, "offset": 63}, "path": "vulnerabilities/sqli_blind/source/high.php", "start": {"col": 2, "line": 5, "offset": 60}}}], "taint_sink": ["CliLoc", [{"end": {"col": 86, "line": 33, "offset": 929}, "path": "vulnerabilities/sqli_blind/source/high.php", "start": {"col": 14, "line": 33, "offset": 857}}, "\"SELECT first_name, last_name FROM users WHERE user_id = '$id' LIMIT 1;\""]], "taint_source": ["CliLoc", [{"end": {"col": 16, "line": 5, "offset": 74}, "path": "vulnerabilities/sqli_blind/source/high.php", "start": {"col": 8, "line": 5, "offset": 66}}, "$_COOKIE"]]}, "engine_kind": "OSS", "fingerprint": "b048f725f87471da7fd0b34f3cc0cb0e77e1123d5e2f6c1193e4aa2f9453f70adc16ee07174aa901916b7e7df3bb2d985e2e367a35133a018095fe30df12d361_1", "is_ignored": false, "lines": "\t\t\t$query  = \"SELECT first_name, last_name FROM users WHERE user_id = '$id' LIMIT 1;\";", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 14757, "rule_id": "qNUXdL", "rv_id": 251682, "url": "https://semgrep.dev/playground/r/RGTevOe/php.lang.security.injection.tainted-sql-string.tainted-sql-string", "version_id": "RGTevOe"}}, "shortlink": "https://sg.run/lZYG", "source": "https://semgrep.dev/r/php.lang.security.injection.tainted-sql-string.tainted-sql-string", "subcategory": ["vuln"], "technology": ["php"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "SELECT", "end": {"col": 7, "line": 1, "offset": 6}, "start": {"col": 1, "line": 1, "offset": 0}}, "$EXPR": {"abstract_content": "SELECT first_name, last_name FROM users WHERE user_id = '", "end": {"col": 72, "line": 33, "offset": 915}, "start": {"col": 15, "line": 33, "offset": 858}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "vulnerabilities/sqli_blind/source/high.php", "start": {"col": 14, "line": 33, "offset": 857}}, {"check_id": "php.lang.security.injection.tainted-sql-string.tainted-sql-string", "end": {"col": 78, "line": 11, "offset": 249}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "$id", "location": {"end": {"col": 5, "line": 5, "offset": 64}, "path": "vulnerabilities/sqli_blind/source/low.php", "start": {"col": 2, "line": 5, "offset": 61}}}], "taint_sink": ["CliLoc", [{"end": {"col": 78, "line": 11, "offset": 249}, "path": "vulnerabilities/sqli_blind/source/low.php", "start": {"col": 14, "line": 11, "offset": 185}}, "\"SELECT first_name, last_name FROM users WHERE user_id = '$id';\""]], "taint_source": ["CliLoc", [{"end": {"col": 13, "line": 5, "offset": 72}, "path": "vulnerabilities/sqli_blind/source/low.php", "start": {"col": 8, "line": 5, "offset": 67}}, "$_GET"]]}, "engine_kind": "OSS", "fingerprint": "a0c8d9b40e0665235bcd1d9ee1242f7ca9abf3eb2d7a8167984cc4d1f3a2e98935ba2aebfc25132a8bbb75539debb2c2a73e990be7c9457722832b88181b4e1f_0", "is_ignored": false, "lines": "\t\t\t$query  = \"SELECT first_name, last_name FROM users WHERE user_id = '$id';\";", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 14757, "rule_id": "qNUXdL", "rv_id": 251682, "url": "https://semgrep.dev/playground/r/RGTevOe/php.lang.security.injection.tainted-sql-string.tainted-sql-string", "version_id": "RGTevOe"}}, "shortlink": "https://sg.run/lZYG", "source": "https://semgrep.dev/r/php.lang.security.injection.tainted-sql-string.tainted-sql-string", "subcategory": ["vuln"], "technology": ["php"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "SELECT", "end": {"col": 7, "line": 1, "offset": 6}, "start": {"col": 1, "line": 1, "offset": 0}}, "$EXPR": {"abstract_content": "SELECT first_name, last_name FROM users WHERE user_id = '", "end": {"col": 72, "line": 11, "offset": 243}, "start": {"col": 15, "line": 11, "offset": 186}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "vulnerabilities/sqli_blind/source/low.php", "start": {"col": 14, "line": 11, "offset": 185}}, {"check_id": "php.laravel.security.laravel-native-sql-injection.laravel-native-sql-injection", "end": {"col": 63, "line": 13, "offset": 324}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "$id", "location": {"end": {"col": 5, "line": 5, "offset": 64}, "path": "vulnerabilities/sqli_blind/source/low.php", "start": {"col": 2, "line": 5, "offset": 61}}}, {"content": "$query", "location": {"end": {"col": 10, "line": 11, "offset": 181}, "path": "vulnerabilities/sqli_blind/source/low.php", "start": {"col": 4, "line": 11, "offset": 175}}}], "taint_sink": ["CliLoc", [{"end": {"col": 63, "line": 13, "offset": 324}, "path": "vulnerabilities/sqli_blind/source/low.php", "start": {"col": 57, "line": 13, "offset": 318}}, "$query"]], "taint_source": ["CliLoc", [{"end": {"col": 13, "line": 5, "offset": 72}, "path": "vulnerabilities/sqli_blind/source/low.php", "start": {"col": 8, "line": 5, "offset": 67}}, "$_GET"]]}, "engine_kind": "OSS", "fingerprint": "fd6ddce59ce6fb7deb4d9f995f843766ccaf41464c70bb1212fe61f08aa33f3116a4c5ff4bc7b360e143aa2b4731fb6b5aa395dcf21ff68d149c22438ae40d0a_0", "is_ignored": false, "lines": "\t\t\t\t$result = mysqli_query($GLOBALS[\"___mysqli_ston\"],  $query ); // Removed 'or die' to suppress mysql errors", "message": "Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. To prevent this vulnerability, use prepared statements that do not concatenate user-controllable strings and use parameterized queries where SQL commands and user data are strictly separated. Also, consider using an object-relational (ORM) framework to operate with safer abstractions. To build SQL queries safely in PHP, it is possible to adopt prepared statements by using `PDO` with bind variables using `bindParam()`.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "functional-categories": ["web::source::cookie::lang", "web::source::http-params::lang", "web::source::http-body::lang", "web::source::header::lang", "web::source::url-path-params::lang", "web::source::form-data::lang", "web::source::cookie::laravel", "web::source::http-params::laravel", "web::source::http-body::laravel", "web::source::header::laravel", "web::source::url-path-params::laravel", "web::source::form-data::laravel", "db::sink::sql-or-nosql-query::lang"], "impact": "HIGH", "license": "Copyright 2023 Semgrep, Inc.", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Laravel_Cheat_Sheet.md"], "semgrep.dev": {"rule": {"origin": "pro_rules", "r_id": 36489, "rule_id": "wdU5LD", "rv_id": 111790, "url": "https://semgrep.dev/playground/r/QkTWwxP/php.laravel.security.laravel-native-sql-injection.laravel-native-sql-injection", "version_id": "QkTWwxP"}}, "shortlink": "https://sg.run/PBq3", "source": "https://semgrep.dev/r/php.laravel.security.laravel-native-sql-injection.laravel-native-sql-injection", "subcategory": ["vuln"], "technology": ["laravel"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$QUERY": {"abstract_content": "$query", "end": {"col": 63, "line": 13, "offset": 324}, "propagated_value": {"svalue_abstract_content": "\"\"SELECT first_name, last_name FROM users WHERE user_id = '$id';\"", "svalue_end": {"col": 78, "line": 11, "offset": 249}, "svalue_start": {"col": 14, "line": 11, "offset": 185}}, "start": {"col": 57, "line": 13, "offset": 318}}, "$X": {"abstract_content": "$GLOBALS[\"___mysqli_ston\"]", "end": {"col": 54, "line": 13, "offset": 315}, "start": {"col": 28, "line": 13, "offset": 289}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "vulnerabilities/sqli_blind/source/low.php", "start": {"col": 57, "line": 13, "offset": 318}}, {"check_id": "php.lang.security.injection.tainted-sql-string.tainted-sql-string", "end": {"col": 78, "line": 32, "offset": 873}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "$id", "location": {"end": {"col": 5, "line": 5, "offset": 64}, "path": "vulnerabilities/sqli_blind/source/low.php", "start": {"col": 2, "line": 5, "offset": 61}}}], "taint_sink": ["CliLoc", [{"end": {"col": 78, "line": 32, "offset": 873}, "path": "vulnerabilities/sqli_blind/source/low.php", "start": {"col": 14, "line": 32, "offset": 809}}, "\"SELECT first_name, last_name FROM users WHERE user_id = '$id';\""]], "taint_source": ["CliLoc", [{"end": {"col": 13, "line": 5, "offset": 72}, "path": "vulnerabilities/sqli_blind/source/low.php", "start": {"col": 8, "line": 5, "offset": 67}}, "$_GET"]]}, "engine_kind": "OSS", "fingerprint": "a0c8d9b40e0665235bcd1d9ee1242f7ca9abf3eb2d7a8167984cc4d1f3a2e98935ba2aebfc25132a8bbb75539debb2c2a73e990be7c9457722832b88181b4e1f_1", "is_ignored": false, "lines": "\t\t\t$query  = \"SELECT first_name, last_name FROM users WHERE user_id = '$id';\";", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 14757, "rule_id": "qNUXdL", "rv_id": 251682, "url": "https://semgrep.dev/playground/r/RGTevOe/php.lang.security.injection.tainted-sql-string.tainted-sql-string", "version_id": "RGTevOe"}}, "shortlink": "https://sg.run/lZYG", "source": "https://semgrep.dev/r/php.lang.security.injection.tainted-sql-string.tainted-sql-string", "subcategory": ["vuln"], "technology": ["php"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "SELECT", "end": {"col": 7, "line": 1, "offset": 6}, "start": {"col": 1, "line": 1, "offset": 0}}, "$EXPR": {"abstract_content": "SELECT first_name, last_name FROM users WHERE user_id = '", "end": {"col": 72, "line": 32, "offset": 867}, "start": {"col": 15, "line": 32, "offset": 810}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "vulnerabilities/sqli_blind/source/low.php", "start": {"col": 14, "line": 32, "offset": 809}}, {"check_id": "php.lang.security.injection.tainted-sql-string.tainted-sql-string", "end": {"col": 76, "line": 34, "offset": 1101}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "$id", "location": {"end": {"col": 5, "line": 5, "offset": 66}, "path": "vulnerabilities/sqli_blind/source/medium.php", "start": {"col": 2, "line": 5, "offset": 63}}}], "taint_sink": ["CliLoc", [{"end": {"col": 76, "line": 34, "offset": 1101}, "path": "vulnerabilities/sqli_blind/source/medium.php", "start": {"col": 14, "line": 34, "offset": 1039}}, "\"SELECT first_name, last_name FROM users WHERE user_id = $id;\""]], "taint_source": ["CliLoc", [{"end": {"col": 14, "line": 5, "offset": 75}, "path": "vulnerabilities/sqli_blind/source/medium.php", "start": {"col": 8, "line": 5, "offset": 69}}, "$_POST"]]}, "engine_kind": "OSS", "fingerprint": "7eb4cf8df47a5f1a0e22500479956be3f85ac11123ca479e2dce49632ccd3f3fea596a1a5cb7736abab814ee8a9bfd62be32b6c71c9f7028d69fa24409740eed_0", "is_ignored": false, "lines": "\t\t\t$query  = \"SELECT first_name, last_name FROM users WHERE user_id = $id;\";", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/SQL_Injection"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 14757, "rule_id": "qNUXdL", "rv_id": 251682, "url": "https://semgrep.dev/playground/r/RGTevOe/php.lang.security.injection.tainted-sql-string.tainted-sql-string", "version_id": "RGTevOe"}}, "shortlink": "https://sg.run/lZYG", "source": "https://semgrep.dev/r/php.lang.security.injection.tainted-sql-string.tainted-sql-string", "subcategory": ["vuln"], "technology": ["php"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "SELECT", "end": {"col": 7, "line": 1, "offset": 6}, "start": {"col": 1, "line": 1, "offset": 0}}, "$EXPR": {"abstract_content": "SELECT first_name, last_name FROM users WHERE user_id = ", "end": {"col": 71, "line": 34, "offset": 1096}, "start": {"col": 15, "line": 34, "offset": 1040}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "vulnerabilities/sqli_blind/source/medium.php", "start": {"col": 14, "line": 34, "offset": 1039}}, {"check_id": "php.lang.security.unlink-use.unlink-use", "end": {"col": 24, "line": 51, "offset": 2073}, "extra": {"engine_kind": "OSS", "fingerprint": "756e86f9ce00f01ddbaa1c52e1800def95fe1b98c32de2bbbdab226588d61277d37fd9e87f89d93c0f8728c02844ca31d2bc64b7d2be230e1e2cc52058ecae1f_0", "is_ignored": false, "lines": "\t\t\tunlink( $temp_file );", "message": "Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A05:2017 - Broken Access Control", "A01:2021 - Broken Access Control"], "references": ["https://www.php.net/manual/en/function.unlink", "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 13969, "rule_id": "eqUzDE", "rv_id": 110059, "url": "https://semgrep.dev/playground/r/kbTdxbD/php.lang.security.unlink-use.unlink-use", "version_id": "kbTdxbD"}}, "shortlink": "https://sg.run/rYeR", "source": "https://semgrep.dev/r/php.lang.security.unlink-use.unlink-use", "subcategory": ["audit"], "technology": ["php"], "vulnerability_class": ["Path Traversal"]}, "metavars": {}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "vulnerabilities/upload/source/impossible.php", "start": {"col": 4, "line": 51, "offset": 2053}}, {"check_id": "php.lang.security.tainted-code-execution.tainted-code-execution", "end": {"col": 111, "line": 20, "offset": 645}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "$id", "location": {"end": {"col": 5, "line": 14, "offset": 403}, "path": "vulnerabilities/view_help.php", "start": {"col": 2, "line": 14, "offset": 400}}}], "taint_sink": ["CliLoc", [{"end": {"col": 111, "line": 20, "offset": 645}, "path": "vulnerabilities/view_help.php", "start": {"col": 3, "line": 20, "offset": 537}}, "eval( '?>' . file_get_contents( DVWA_WEB_PAGE_TO_ROOT . \"vulnerabilities/{$id}/help/help.php\" ) . '<?php ' )"]], "taint_source": ["CliLoc", [{"end": {"col": 19, "line": 14, "offset": 417}, "path": "vulnerabilities/view_help.php", "start": {"col": 14, "line": 14, "offset": 412}}, "$_GET"]]}, "engine_kind": "OSS", "fingerprint": "a30deb22ea8010868dc876ba0ea5dd6381bfcff79c3d55004a749c3d68a096a779dd0406c69e5ab2e24c2de8db19b9fec8d3c0e4aed8a3525dbc6f118f6e2aad_0", "is_ignored": false, "lines": "\t\teval( '?>' . file_get_contents( DVWA_WEB_PAGE_TO_ROOT . \"vulnerabilities/{$id}/help/help.php\" ) . '<?php ' );", "message": "The application might dynamically evaluate untrusted input, which can lead to a code injection vulnerability. An attacker can execute arbitrary code, potentially gaining complete control of the system. To prevent this vulnerability, avoid executing code containing user input. If this is unavoidable, validate and sanitize the input, and use safe alternatives for evaluating user input.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-94: Improper Control of Generation of Code ('Code Injection')"], "cwe2022-top25": true, "functional-categories": ["web::source::cookie::lang", "web::source::http-params::lang", "web::source::http-body::lang", "web::source::url-path-params::lang", "code::sink::eval"], "impact": "HIGH", "license": "Copyright 2023 Semgrep, Inc.", "likelihood": "MEDIUM", "owasp": ["A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/Code_Injection", "https://stackoverflow.com/questions/3115559/exploitable-php-functions", "https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/NoEvalsSniff.php"], "semgrep.dev": {"rule": {"origin": "pro_rules", "r_id": 27194, "rule_id": "bwU5RR", "rv_id": 111771, "url": "https://semgrep.dev/playground/r/9lTd5xy/php.lang.security.tainted-code-execution.tainted-code-execution", "version_id": "9lTd5xy"}}, "shortlink": "https://sg.run/Ap88", "source": "https://semgrep.dev/r/php.lang.security.tainted-code-execution.tainted-code-execution", "subcategory": ["vuln"], "technology": ["php"], "vulnerability_class": ["Code Injection"]}, "metavars": {}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "vulnerabilities/view_help.php", "start": {"col": 3, "line": 20, "offset": 537}}, {"check_id": "php.lang.security.eval-use.eval-use", "end": {"col": 112, "line": 20, "offset": 646}, "extra": {"engine_kind": "OSS", "fingerprint": "17b72ca6df816e0f628b62b2ca02c52ed9775574135fe065ef3a8723a405f1184c77253be769fe83aa69f13a32fc9fa232c4a390915d3154e5d762928f80719c_0", "is_ignored": false, "lines": "\t\teval( '?>' . file_get_contents( DVWA_WEB_PAGE_TO_ROOT . \"vulnerabilities/{$id}/help/help.php\" ) . '<?php ' );", "message": "Evaluating non-constant commands. This can lead to command injection.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.eval", "https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/NoEvalsSniff.php"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9390, "rule_id": "KxUbX3", "rv_id": 110037, "url": "https://semgrep.dev/playground/r/A8T95d2/php.lang.security.eval-use.eval-use", "version_id": "A8T95d2"}}, "shortlink": "https://sg.run/J9AP", "source": "https://semgrep.dev/r/php.lang.security.eval-use.eval-use", "subcategory": ["audit"], "technology": ["php"], "vulnerability_class": ["Command Injection"]}, "metavars": {}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "vulnerabilities/view_help.php", "start": {"col": 3, "line": 20, "offset": 537}}, {"check_id": "php.laravel.security.laravel-code-injection.laravel-code-injection", "end": {"col": 109, "line": 20, "offset": 643}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "$id", "location": {"end": {"col": 5, "line": 14, "offset": 403}, "path": "vulnerabilities/view_help.php", "start": {"col": 2, "line": 14, "offset": 400}}}], "taint_sink": ["CliLoc", [{"end": {"col": 109, "line": 20, "offset": 643}, "path": "vulnerabilities/view_help.php", "start": {"col": 9, "line": 20, "offset": 543}}, "'?>' . file_get_contents( DVWA_WEB_PAGE_TO_ROOT . \"vulnerabilities/{$id}/help/help.php\" ) . '<?php '"]], "taint_source": ["CliLoc", [{"end": {"col": 19, "line": 14, "offset": 417}, "path": "vulnerabilities/view_help.php", "start": {"col": 14, "line": 14, "offset": 412}}, "$_GET"]]}, "engine_kind": "OSS", "fingerprint": "676b644d9ce66c6e71f3b5a1cdde52af8799a85697db18d8366c49c13cd192f348ed92a011c4ba83b1cca7fb928c8b22b9f04b9fafdbf62f75533a16baf95162_0", "is_ignored": false, "lines": "\t\teval( '?>' . file_get_contents( DVWA_WEB_PAGE_TO_ROOT . \"vulnerabilities/{$id}/help/help.php\" ) . '<?php ' );", "message": "The application might dynamically evaluate untrusted input, which can lead to a code injection vulnerability. An attacker can execute arbitrary code, potentially gaining complete control of the system. To prevent this vulnerability, avoid executing code containing user input. If this is unavoidable, validate and sanitize the input, and use safe alternatives for evaluating user input.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-94: Improper Control of Generation of Code ('Code Injection')"], "cwe2022-top25": true, "functional-categories": ["web::source::cookie::lang", "web::source::http-params::lang", "web::source::http-body::lang", "web::source::header::lang", "web::source::url-path-params::lang", "web::source::form-data::lang", "web::source::cookie::laravel", "web::source::http-params::laravel", "web::source::http-body::laravel", "web::source::header::laravel", "web::source::url-path-params::laravel", "web::source::form-data::laravel", "code::sink::eval::lang"], "impact": "HIGH", "license": "Copyright 2023 Semgrep, Inc.", "likelihood": "LOW", "owasp": ["A03:2021 - Injection", "A01:2017 - Injection"], "references": ["https://owasp.org/www-community/attacks/Code_Injection"], "semgrep.dev": {"rule": {"origin": "pro_rules", "r_id": 36401, "rule_id": "QrU2Nw", "rv_id": 111782, "url": "https://semgrep.dev/playground/r/d6TrvJE/php.laravel.security.laravel-code-injection.laravel-code-injection", "version_id": "d6TrvJE"}}, "shortlink": "https://sg.run/PBX3", "source": "https://semgrep.dev/r/php.laravel.security.laravel-code-injection.laravel-code-injection", "subcategory": ["vuln"], "technology": ["laravel"], "vulnerability_class": ["Code Injection"]}, "metavars": {"$INPUT": {"abstract_content": "'?>'.file_get_contents(DVWA_WEB_PAGE_TO_ROOT.\"\"vulnerabilities/$id/help/help.php\").'<?php '", "end": {"col": 109, "line": 20, "offset": 643}, "start": {"col": 9, "line": 20, "offset": 543}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "vulnerabilities/view_help.php", "start": {"col": 9, "line": 20, "offset": 543}}, {"check_id": "php.lang.security.injection.tainted-filename.tainted-filename", "end": {"col": 96, "line": 20, "offset": 630}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "$id", "location": {"end": {"col": 5, "line": 14, "offset": 403}, "path": "vulnerabilities/view_help.php", "start": {"col": 2, "line": 14, "offset": 400}}}], "taint_sink": ["CliLoc", [{"end": {"col": 96, "line": 20, "offset": 630}, "path": "vulnerabilities/view_help.php", "start": {"col": 35, "line": 20, "offset": 569}}, "DVWA_WEB_PAGE_TO_ROOT . \"vulnerabilities/{$id}/help/help.php\""]], "taint_source": ["CliLoc", [{"end": {"col": 19, "line": 14, "offset": 417}, "path": "vulnerabilities/view_help.php", "start": {"col": 14, "line": 14, "offset": 412}}, "$_GET"]]}, "engine_kind": "OSS", "fingerprint": "101d0ef1c244b604259732f36df1f620b5ab3ab5e1ef304c11c8a0e55292b63c0ad13d2a7855eceb050e2ed0e967613707eed92c8e5c7fd75fdf95a0f18c8876_0", "is_ignored": false, "lines": "\t\teval( '?>' . file_get_contents( DVWA_WEB_PAGE_TO_ROOT . \"vulnerabilities/{$id}/help/help.php\" ) . '<?php ' );", "message": "File name based on user input risks server-side request forgery.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-918: Server-Side Request Forgery (SSRF)"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A10:2021 - Server-Side Request Forgery (SSRF)"], "references": ["https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 16250, "rule_id": "5rUpro", "rv_id": 110042, "url": "https://semgrep.dev/playground/r/K3Tvjky/php.lang.security.injection.tainted-filename.tainted-filename", "version_id": "K3Tvjky"}}, "shortlink": "https://sg.run/Ayqp", "source": "https://semgrep.dev/r/php.lang.security.injection.tainted-filename.tainted-filename", "subcategory": ["vuln"], "technology": ["php"], "vulnerability_class": ["Server-Side Request Forgery (SSRF)"]}, "metavars": {"$FILENAME": {"abstract_content": "DVWA_WEB_PAGE_TO_ROOT.\"\"vulnerabilities/$id/help/help.php\"", "end": {"col": 96, "line": 20, "offset": 630}, "start": {"col": 35, "line": 20, "offset": 569}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "vulnerabilities/view_help.php", "start": {"col": 35, "line": 20, "offset": 569}}, {"check_id": "php.lang.security.tainted-code-execution.tainted-code-execution", "end": {"col": 121, "line": 22, "offset": 779}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "$id", "location": {"end": {"col": 5, "line": 14, "offset": 403}, "path": "vulnerabilities/view_help.php", "start": {"col": 2, "line": 14, "offset": 400}}}], "taint_sink": ["CliLoc", [{"end": {"col": 121, "line": 22, "offset": 779}, "path": "vulnerabilities/view_help.php", "start": {"col": 3, "line": 22, "offset": 661}}, "eval( '?>' . file_get_contents( DVWA_WEB_PAGE_TO_ROOT . \"vulnerabilities/{$id}/help/help.{$locale}.php\" ) . '<?php ' )"]], "taint_source": ["CliLoc", [{"end": {"col": 19, "line": 14, "offset": 417}, "path": "vulnerabilities/view_help.php", "start": {"col": 14, "line": 14, "offset": 412}}, "$_GET"]]}, "engine_kind": "OSS", "fingerprint": "a30deb22ea8010868dc876ba0ea5dd6381bfcff79c3d55004a749c3d68a096a779dd0406c69e5ab2e24c2de8db19b9fec8d3c0e4aed8a3525dbc6f118f6e2aad_1", "is_ignored": false, "lines": "\t\teval( '?>' . file_get_contents( DVWA_WEB_PAGE_TO_ROOT . \"vulnerabilities/{$id}/help/help.{$locale}.php\" ) . '<?php ' );", "message": "The application might dynamically evaluate untrusted input, which can lead to a code injection vulnerability. An attacker can execute arbitrary code, potentially gaining complete control of the system. To prevent this vulnerability, avoid executing code containing user input. If this is unavoidable, validate and sanitize the input, and use safe alternatives for evaluating user input.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-94: Improper Control of Generation of Code ('Code Injection')"], "cwe2022-top25": true, "functional-categories": ["web::source::cookie::lang", "web::source::http-params::lang", "web::source::http-body::lang", "web::source::url-path-params::lang", "code::sink::eval"], "impact": "HIGH", "license": "Copyright 2023 Semgrep, Inc.", "likelihood": "MEDIUM", "owasp": ["A03:2021 - Injection"], "references": ["https://owasp.org/www-community/attacks/Code_Injection", "https://stackoverflow.com/questions/3115559/exploitable-php-functions", "https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/NoEvalsSniff.php"], "semgrep.dev": {"rule": {"origin": "pro_rules", "r_id": 27194, "rule_id": "bwU5RR", "rv_id": 111771, "url": "https://semgrep.dev/playground/r/9lTd5xy/php.lang.security.tainted-code-execution.tainted-code-execution", "version_id": "9lTd5xy"}}, "shortlink": "https://sg.run/Ap88", "source": "https://semgrep.dev/r/php.lang.security.tainted-code-execution.tainted-code-execution", "subcategory": ["vuln"], "technology": ["php"], "vulnerability_class": ["Code Injection"]}, "metavars": {}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "vulnerabilities/view_help.php", "start": {"col": 3, "line": 22, "offset": 661}}, {"check_id": "php.lang.security.eval-use.eval-use", "end": {"col": 122, "line": 22, "offset": 780}, "extra": {"engine_kind": "OSS", "fingerprint": "17b72ca6df816e0f628b62b2ca02c52ed9775574135fe065ef3a8723a405f1184c77253be769fe83aa69f13a32fc9fa232c4a390915d3154e5d762928f80719c_1", "is_ignored": false, "lines": "\t\teval( '?>' . file_get_contents( DVWA_WEB_PAGE_TO_ROOT . \"vulnerabilities/{$id}/help/help.{$locale}.php\" ) . '<?php ' );", "message": "Evaluating non-constant commands. This can lead to command injection.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://www.php.net/manual/en/function.eval", "https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/NoEvalsSniff.php"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9390, "rule_id": "KxUbX3", "rv_id": 110037, "url": "https://semgrep.dev/playground/r/A8T95d2/php.lang.security.eval-use.eval-use", "version_id": "A8T95d2"}}, "shortlink": "https://sg.run/J9AP", "source": "https://semgrep.dev/r/php.lang.security.eval-use.eval-use", "subcategory": ["audit"], "technology": ["php"], "vulnerability_class": ["Command Injection"]}, "metavars": {}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "vulnerabilities/view_help.php", "start": {"col": 3, "line": 22, "offset": 661}}, {"check_id": "php.laravel.security.laravel-code-injection.laravel-code-injection", "end": {"col": 119, "line": 22, "offset": 777}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "$id", "location": {"end": {"col": 5, "line": 14, "offset": 403}, "path": "vulnerabilities/view_help.php", "start": {"col": 2, "line": 14, "offset": 400}}}], "taint_sink": ["CliLoc", [{"end": {"col": 119, "line": 22, "offset": 777}, "path": "vulnerabilities/view_help.php", "start": {"col": 9, "line": 22, "offset": 667}}, "'?>' . file_get_contents( DVWA_WEB_PAGE_TO_ROOT . \"vulnerabilities/{$id}/help/help.{$locale}.php\" ) . '<?php '"]], "taint_source": ["CliLoc", [{"end": {"col": 19, "line": 14, "offset": 417}, "path": "vulnerabilities/view_help.php", "start": {"col": 14, "line": 14, "offset": 412}}, "$_GET"]]}, "engine_kind": "OSS", "fingerprint": "4c3e8719f6c832c5aad1e8ae3adfc02d358fe58db7200d46354f09974a83616399fcb8902f33713898983b164e7008d5de17a5094b24c46ee400175fe67e332e_0", "is_ignored": false, "lines": "\t\teval( '?>' . file_get_contents( DVWA_WEB_PAGE_TO_ROOT . \"vulnerabilities/{$id}/help/help.{$locale}.php\" ) . '<?php ' );", "message": "The application might dynamically evaluate untrusted input, which can lead to a code injection vulnerability. An attacker can execute arbitrary code, potentially gaining complete control of the system. To prevent this vulnerability, avoid executing code containing user input. If this is unavoidable, validate and sanitize the input, and use safe alternatives for evaluating user input.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-94: Improper Control of Generation of Code ('Code Injection')"], "cwe2022-top25": true, "functional-categories": ["web::source::cookie::lang", "web::source::http-params::lang", "web::source::http-body::lang", "web::source::header::lang", "web::source::url-path-params::lang", "web::source::form-data::lang", "web::source::cookie::laravel", "web::source::http-params::laravel", "web::source::http-body::laravel", "web::source::header::laravel", "web::source::url-path-params::laravel", "web::source::form-data::laravel", "code::sink::eval::lang"], "impact": "HIGH", "license": "Copyright 2023 Semgrep, Inc.", "likelihood": "LOW", "owasp": ["A03:2021 - Injection", "A01:2017 - Injection"], "references": ["https://owasp.org/www-community/attacks/Code_Injection"], "semgrep.dev": {"rule": {"origin": "pro_rules", "r_id": 36401, "rule_id": "QrU2Nw", "rv_id": 111782, "url": "https://semgrep.dev/playground/r/d6TrvJE/php.laravel.security.laravel-code-injection.laravel-code-injection", "version_id": "d6TrvJE"}}, "shortlink": "https://sg.run/PBX3", "source": "https://semgrep.dev/r/php.laravel.security.laravel-code-injection.laravel-code-injection", "subcategory": ["vuln"], "technology": ["laravel"], "vulnerability_class": ["Code Injection"]}, "metavars": {"$INPUT": {"abstract_content": "'?>'.file_get_contents(DVWA_WEB_PAGE_TO_ROOT.\"\"vulnerabilities/$id/help/help.$locale.php\").'<?php '", "end": {"col": 119, "line": 22, "offset": 777}, "start": {"col": 9, "line": 22, "offset": 667}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "vulnerabilities/view_help.php", "start": {"col": 9, "line": 22, "offset": 667}}, {"check_id": "php.lang.security.injection.tainted-filename.tainted-filename", "end": {"col": 106, "line": 22, "offset": 764}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "$id", "location": {"end": {"col": 5, "line": 14, "offset": 403}, "path": "vulnerabilities/view_help.php", "start": {"col": 2, "line": 14, "offset": 400}}}], "taint_sink": ["CliLoc", [{"end": {"col": 106, "line": 22, "offset": 764}, "path": "vulnerabilities/view_help.php", "start": {"col": 35, "line": 22, "offset": 693}}, "DVWA_WEB_PAGE_TO_ROOT . \"vulnerabilities/{$id}/help/help.{$locale}.php\""]], "taint_source": ["CliLoc", [{"end": {"col": 19, "line": 14, "offset": 417}, "path": "vulnerabilities/view_help.php", "start": {"col": 14, "line": 14, "offset": 412}}, "$_GET"]]}, "engine_kind": "OSS", "fingerprint": "2b53ff032b3b3c5e127781f9e37b004506ac9ffa5cd75b72527e89c054288ecff1dc50d4ae8e9b32f12a208a34052c5e73231e5a6ae23f4282294caa70f07a4b_0", "is_ignored": false, "lines": "\t\teval( '?>' . file_get_contents( DVWA_WEB_PAGE_TO_ROOT . \"vulnerabilities/{$id}/help/help.{$locale}.php\" ) . '<?php ' );", "message": "File name based on user input risks server-side request forgery.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-918: Server-Side Request Forgery (SSRF)"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A10:2021 - Server-Side Request Forgery (SSRF)"], "references": ["https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 16250, "rule_id": "5rUpro", "rv_id": 110042, "url": "https://semgrep.dev/playground/r/K3Tvjky/php.lang.security.injection.tainted-filename.tainted-filename", "version_id": "K3Tvjky"}}, "shortlink": "https://sg.run/Ayqp", "source": "https://semgrep.dev/r/php.lang.security.injection.tainted-filename.tainted-filename", "subcategory": ["vuln"], "technology": ["php"], "vulnerability_class": ["Server-Side Request Forgery (SSRF)"]}, "metavars": {"$FILENAME": {"abstract_content": "DVWA_WEB_PAGE_TO_ROOT.\"\"vulnerabilities/$id/help/help.$locale.php\"", "end": {"col": 106, "line": 22, "offset": 764}, "start": {"col": 35, "line": 22, "offset": 693}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "vulnerabilities/view_help.php", "start": {"col": 35, "line": 22, "offset": 693}}, {"check_id": "php.lang.security.injection.tainted-filename.tainted-filename", "end": {"col": 102, "line": 60, "offset": 1384}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "$id", "location": {"end": {"col": 5, "line": 12, "offset": 364}, "path": "vulnerabilities/view_source.php", "start": {"col": 2, "line": 12, "offset": 361}}}], "taint_sink": ["CliLoc", [{"end": {"col": 102, "line": 60, "offset": 1384}, "path": "vulnerabilities/view_source.php", "start": {"col": 32, "line": 60, "offset": 1314}}, "DVWA_WEB_PAGE_TO_ROOT . \"vulnerabilities/{$id}/source/{$security}.php\""]], "taint_source": ["CliLoc", [{"end": {"col": 19, "line": 12, "offset": 378}, "path": "vulnerabilities/view_source.php", "start": {"col": 14, "line": 12, "offset": 373}}, "$_GET"]]}, "engine_kind": "OSS", "fingerprint": "d6533852832f19508d56eacee7002568e9a583068e8422b048bd2634b2b575e10f3d7d130967fddd330a98af7f158745e3fabd1d0ebcc24546a053284e9c5544_0", "is_ignored": false, "lines": "\t$source = @file_get_contents( DVWA_WEB_PAGE_TO_ROOT . \"vulnerabilities/{$id}/source/{$security}.php\" );", "message": "File name based on user input risks server-side request forgery.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-918: Server-Side Request Forgery (SSRF)"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A10:2021 - Server-Side Request Forgery (SSRF)"], "references": ["https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 16250, "rule_id": "5rUpro", "rv_id": 110042, "url": "https://semgrep.dev/playground/r/K3Tvjky/php.lang.security.injection.tainted-filename.tainted-filename", "version_id": "K3Tvjky"}}, "shortlink": "https://sg.run/Ayqp", "source": "https://semgrep.dev/r/php.lang.security.injection.tainted-filename.tainted-filename", "subcategory": ["vuln"], "technology": ["php"], "vulnerability_class": ["Server-Side Request Forgery (SSRF)"]}, "metavars": {"$FILENAME": {"abstract_content": "DVWA_WEB_PAGE_TO_ROOT.\"\"vulnerabilities/$id/source/$security.php\"", "end": {"col": 102, "line": 60, "offset": 1384}, "start": {"col": 32, "line": 60, "offset": 1314}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "vulnerabilities/view_source.php", "start": {"col": 32, "line": 60, "offset": 1314}}, {"check_id": "php.lang.security.injection.tainted-filename.tainted-filename", "end": {"col": 88, "line": 64, "offset": 1569}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "$id", "location": {"end": {"col": 5, "line": 12, "offset": 364}, "path": "vulnerabilities/view_source.php", "start": {"col": 2, "line": 12, "offset": 361}}}], "taint_sink": ["CliLoc", [{"end": {"col": 88, "line": 64, "offset": 1569}, "path": "vulnerabilities/view_source.php", "start": {"col": 19, "line": 64, "offset": 1500}}, "DVWA_WEB_PAGE_TO_ROOT . \"vulnerabilities/{$id}/source/{$security}.js\""]], "taint_source": ["CliLoc", [{"end": {"col": 19, "line": 12, "offset": 378}, "path": "vulnerabilities/view_source.php", "start": {"col": 14, "line": 12, "offset": 373}}, "$_GET"]]}, "engine_kind": "OSS", "fingerprint": "f69fc269d8b167de84649f9ea101c05cad2902e2376032d5f62d2ba1b6ea190fb88240ef21725b0139f54a5232e03606c0593ce974662d9109d1e9745cf20d88_0", "is_ignored": false, "lines": "\tif (file_exists (DVWA_WEB_PAGE_TO_ROOT . \"vulnerabilities/{$id}/source/{$security}.js\")) {", "message": "File name based on user input risks server-side request forgery.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-918: Server-Side Request Forgery (SSRF)"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A10:2021 - Server-Side Request Forgery (SSRF)"], "references": ["https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 16250, "rule_id": "5rUpro", "rv_id": 110042, "url": "https://semgrep.dev/playground/r/K3Tvjky/php.lang.security.injection.tainted-filename.tainted-filename", "version_id": "K3Tvjky"}}, "shortlink": "https://sg.run/Ayqp", "source": "https://semgrep.dev/r/php.lang.security.injection.tainted-filename.tainted-filename", "subcategory": ["vuln"], "technology": ["php"], "vulnerability_class": ["Server-Side Request Forgery (SSRF)"]}, "metavars": {"$FILENAME": {"abstract_content": "DVWA_WEB_PAGE_TO_ROOT.\"\"vulnerabilities/$id/source/$security.js\"", "end": {"col": 88, "line": 64, "offset": 1569}, "start": {"col": 19, "line": 64, "offset": 1500}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "vulnerabilities/view_source.php", "start": {"col": 19, "line": 64, "offset": 1500}}, {"check_id": "php.lang.security.injection.tainted-filename.tainted-filename", "end": {"col": 105, "line": 65, "offset": 1679}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "$id", "location": {"end": {"col": 5, "line": 12, "offset": 364}, "path": "vulnerabilities/view_source.php", "start": {"col": 2, "line": 12, "offset": 361}}}, {"content": "$id", "location": {"end": {"col": 5, "line": 12, "offset": 364}, "path": "vulnerabilities/view_source.php", "start": {"col": 2, "line": 12, "offset": 361}}}], "taint_sink": ["CliLoc", [{"end": {"col": 105, "line": 65, "offset": 1679}, "path": "vulnerabilities/view_source.php", "start": {"col": 36, "line": 65, "offset": 1610}}, "DVWA_WEB_PAGE_TO_ROOT . \"vulnerabilities/{$id}/source/{$security}.js\""]], "taint_source": ["CliLoc", [{"end": {"col": 19, "line": 12, "offset": 378}, "path": "vulnerabilities/view_source.php", "start": {"col": 14, "line": 12, "offset": 373}}, "$_GET"]]}, "engine_kind": "OSS", "fingerprint": "f69fc269d8b167de84649f9ea101c05cad2902e2376032d5f62d2ba1b6ea190fb88240ef21725b0139f54a5232e03606c0593ce974662d9109d1e9745cf20d88_1", "is_ignored": false, "lines": "\t\t$js_source = @file_get_contents( DVWA_WEB_PAGE_TO_ROOT . \"vulnerabilities/{$id}/source/{$security}.js\" );", "message": "File name based on user input risks server-side request forgery.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-918: Server-Side Request Forgery (SSRF)"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A10:2021 - Server-Side Request Forgery (SSRF)"], "references": ["https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 16250, "rule_id": "5rUpro", "rv_id": 110042, "url": "https://semgrep.dev/playground/r/K3Tvjky/php.lang.security.injection.tainted-filename.tainted-filename", "version_id": "K3Tvjky"}}, "shortlink": "https://sg.run/Ayqp", "source": "https://semgrep.dev/r/php.lang.security.injection.tainted-filename.tainted-filename", "subcategory": ["vuln"], "technology": ["php"], "vulnerability_class": ["Server-Side Request Forgery (SSRF)"]}, "metavars": {"$FILENAME": {"abstract_content": "DVWA_WEB_PAGE_TO_ROOT.\"\"vulnerabilities/$id/source/$security.js\"", "end": {"col": 105, "line": 65, "offset": 1679}, "start": {"col": 36, "line": 65, "offset": 1610}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "vulnerabilities/view_source.php", "start": {"col": 36, "line": 65, "offset": 1610}}, {"check_id": "php.lang.security.injection.tainted-filename.tainted-filename", "end": {"col": 55, "line": 14, "offset": 398}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "$id", "location": {"end": {"col": 5, "line": 12, "offset": 323}, "path": "vulnerabilities/view_source_all.php", "start": {"col": 2, "line": 12, "offset": 320}}}], "taint_sink": ["CliLoc", [{"end": {"col": 55, "line": 14, "offset": 398}, "path": "vulnerabilities/view_source_all.php", "start": {"col": 31, "line": 14, "offset": 374}}, "\"./{$id}/source/low.php\""]], "taint_source": ["CliLoc", [{"end": {"col": 13, "line": 12, "offset": 331}, "path": "vulnerabilities/view_source_all.php", "start": {"col": 8, "line": 12, "offset": 326}}, "$_GET"]]}, "engine_kind": "OSS", "fingerprint": "f83d1f2b213d34b1c8c6784d19346b9989bcd8ea29ebe90ef4a9844ad70fb91daa972522d42d303bf572617c56c91ce27569ead42ff06675801fb6cd00a7f443_0", "is_ignored": false, "lines": "\t$lowsrc = @file_get_contents(\"./{$id}/source/low.php\");", "message": "File name based on user input risks server-side request forgery.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-918: Server-Side Request Forgery (SSRF)"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A10:2021 - Server-Side Request Forgery (SSRF)"], "references": ["https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 16250, "rule_id": "5rUpro", "rv_id": 110042, "url": "https://semgrep.dev/playground/r/K3Tvjky/php.lang.security.injection.tainted-filename.tainted-filename", "version_id": "K3Tvjky"}}, "shortlink": "https://sg.run/Ayqp", "source": "https://semgrep.dev/r/php.lang.security.injection.tainted-filename.tainted-filename", "subcategory": ["vuln"], "technology": ["php"], "vulnerability_class": ["Server-Side Request Forgery (SSRF)"]}, "metavars": {"$FILENAME": {"abstract_content": "\"\"./$id/source/low.php\"", "end": {"col": 55, "line": 14, "offset": 398}, "start": {"col": 31, "line": 14, "offset": 374}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "vulnerabilities/view_source_all.php", "start": {"col": 31, "line": 14, "offset": 374}}, {"check_id": "php.lang.security.injection.tainted-filename.tainted-filename", "end": {"col": 58, "line": 18, "offset": 581}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "$id", "location": {"end": {"col": 5, "line": 12, "offset": 323}, "path": "vulnerabilities/view_source_all.php", "start": {"col": 2, "line": 12, "offset": 320}}}], "taint_sink": ["CliLoc", [{"end": {"col": 58, "line": 18, "offset": 581}, "path": "vulnerabilities/view_source_all.php", "start": {"col": 31, "line": 18, "offset": 554}}, "\"./{$id}/source/medium.php\""]], "taint_source": ["CliLoc", [{"end": {"col": 13, "line": 12, "offset": 331}, "path": "vulnerabilities/view_source_all.php", "start": {"col": 8, "line": 12, "offset": 326}}, "$_GET"]]}, "engine_kind": "OSS", "fingerprint": "240ce2ffa76052a17544873467a699575ba290cdf6cf61c11ff0794d9ac3057f46af20fb345ddc96143c218e2f040cd47a8e3824299b1566ae0a486ede130653_0", "is_ignored": false, "lines": "\t$medsrc = @file_get_contents(\"./{$id}/source/medium.php\");", "message": "File name based on user input risks server-side request forgery.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-918: Server-Side Request Forgery (SSRF)"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A10:2021 - Server-Side Request Forgery (SSRF)"], "references": ["https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 16250, "rule_id": "5rUpro", "rv_id": 110042, "url": "https://semgrep.dev/playground/r/K3Tvjky/php.lang.security.injection.tainted-filename.tainted-filename", "version_id": "K3Tvjky"}}, "shortlink": "https://sg.run/Ayqp", "source": "https://semgrep.dev/r/php.lang.security.injection.tainted-filename.tainted-filename", "subcategory": ["vuln"], "technology": ["php"], "vulnerability_class": ["Server-Side Request Forgery (SSRF)"]}, "metavars": {"$FILENAME": {"abstract_content": "\"\"./$id/source/medium.php\"", "end": {"col": 58, "line": 18, "offset": 581}, "start": {"col": 31, "line": 18, "offset": 554}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "vulnerabilities/view_source_all.php", "start": {"col": 31, "line": 18, "offset": 554}}, {"check_id": "php.lang.security.injection.tainted-filename.tainted-filename", "end": {"col": 57, "line": 22, "offset": 763}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "$id", "location": {"end": {"col": 5, "line": 12, "offset": 323}, "path": "vulnerabilities/view_source_all.php", "start": {"col": 2, "line": 12, "offset": 320}}}], "taint_sink": ["CliLoc", [{"end": {"col": 57, "line": 22, "offset": 763}, "path": "vulnerabilities/view_source_all.php", "start": {"col": 32, "line": 22, "offset": 738}}, "\"./{$id}/source/high.php\""]], "taint_source": ["CliLoc", [{"end": {"col": 13, "line": 12, "offset": 331}, "path": "vulnerabilities/view_source_all.php", "start": {"col": 8, "line": 12, "offset": 326}}, "$_GET"]]}, "engine_kind": "OSS", "fingerprint": "04fe3efa588448930d7f840e6e8df2d8c76827a3e06cbb49c15f5cf17ea632a05a0a6e26574d5db2f1d4e2bb1c80e58b146ad64659519387f8e6c1585489bb44_0", "is_ignored": false, "lines": "\t$highsrc = @file_get_contents(\"./{$id}/source/high.php\");", "message": "File name based on user input risks server-side request forgery.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-918: Server-Side Request Forgery (SSRF)"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A10:2021 - Server-Side Request Forgery (SSRF)"], "references": ["https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 16250, "rule_id": "5rUpro", "rv_id": 110042, "url": "https://semgrep.dev/playground/r/K3Tvjky/php.lang.security.injection.tainted-filename.tainted-filename", "version_id": "K3Tvjky"}}, "shortlink": "https://sg.run/Ayqp", "source": "https://semgrep.dev/r/php.lang.security.injection.tainted-filename.tainted-filename", "subcategory": ["vuln"], "technology": ["php"], "vulnerability_class": ["Server-Side Request Forgery (SSRF)"]}, "metavars": {"$FILENAME": {"abstract_content": "\"\"./$id/source/high.php\"", "end": {"col": 57, "line": 22, "offset": 763}, "start": {"col": 32, "line": 22, "offset": 738}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "vulnerabilities/view_source_all.php", "start": {"col": 32, "line": 22, "offset": 738}}, {"check_id": "php.lang.security.injection.tainted-filename.tainted-filename", "end": {"col": 62, "line": 26, "offset": 954}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "$id", "location": {"end": {"col": 5, "line": 12, "offset": 323}, "path": "vulnerabilities/view_source_all.php", "start": {"col": 2, "line": 12, "offset": 320}}}], "taint_sink": ["CliLoc", [{"end": {"col": 62, "line": 26, "offset": 954}, "path": "vulnerabilities/view_source_all.php", "start": {"col": 31, "line": 26, "offset": 923}}, "\"./{$id}/source/impossible.php\""]], "taint_source": ["CliLoc", [{"end": {"col": 13, "line": 12, "offset": 331}, "path": "vulnerabilities/view_source_all.php", "start": {"col": 8, "line": 12, "offset": 326}}, "$_GET"]]}, "engine_kind": "OSS", "fingerprint": "67d57f628f28728ff8d78235bfdd94c74c59380687eadd870af0ca497eb2a695d8073c664bb2cb83d3d86b4f8812e1a0cf644b2920c78042636199179afe0b00_0", "is_ignored": false, "lines": "\t$impsrc = @file_get_contents(\"./{$id}/source/impossible.php\");", "message": "File name based on user input risks server-side request forgery.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-918: Server-Side Request Forgery (SSRF)"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A10:2021 - Server-Side Request Forgery (SSRF)"], "references": ["https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 16250, "rule_id": "5rUpro", "rv_id": 110042, "url": "https://semgrep.dev/playground/r/K3Tvjky/php.lang.security.injection.tainted-filename.tainted-filename", "version_id": "K3Tvjky"}}, "shortlink": "https://sg.run/Ayqp", "source": "https://semgrep.dev/r/php.lang.security.injection.tainted-filename.tainted-filename", "subcategory": ["vuln"], "technology": ["php"], "vulnerability_class": ["Server-Side Request Forgery (SSRF)"]}, "metavars": {"$FILENAME": {"abstract_content": "\"\"./$id/source/impossible.php\"", "end": {"col": 62, "line": 26, "offset": 954}, "start": {"col": 31, "line": 26, "offset": 923}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "vulnerabilities/view_source_all.php", "start": {"col": 31, "line": 26, "offset": 923}}, {"check_id": "php.lang.security.taint-cookie-secure-false.taint-cookie-secure-false", "end": {"col": 112, "line": 11, "offset": 375}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 112, "line": 11, "offset": 375}, "path": "vulnerabilities/weak_id/source/high.php", "start": {"col": 107, "line": 11, "offset": 370}}, "false"]], "taint_source": ["CliLoc", [{"end": {"col": 112, "line": 11, "offset": 375}, "path": "vulnerabilities/weak_id/source/high.php", "start": {"col": 107, "line": 11, "offset": 370}}, "false"]]}, "engine_kind": "OSS", "fingerprint": "538b47ca7e31248534d02d886d3329c5748820afe880f6ca23064e08f276054a08bb6db3dc74a832b82b8c8546d263c60eb2872ecb7660626fde4e8838f0190e_0", "is_ignored": false, "lines": "\tsetcookie(\"dvwaSession\", $cookie_value, time()+3600, \"/vulnerabilities/weak_id/\", $_SERVER['HTTP_HOST'], false, false);", "message": "Secure cookie flag is explicitly disabled. This will cause cookies to be transmitted over unencrypted HTTP connections which can allow theft of confidential user data such as session tokens.", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute"], "functional-categories": ["debug::search::active-debug-code::lang"], "impact": "MEDIUM", "license": "Copyright 2023 Semgrep, Inc.", "likelihood": "MEDIUM", "owasp": ["A05:2021 - Security Misconfiguration"], "references": ["https://www.php.net/manual/en/function.setcookie.php", "https://www.php.net/manual/en/function.session-set-cookie-params.php", "https://www.php.net/manual/en/configuration.file.php"], "semgrep.dev": {"rule": {"origin": "pro_rules", "r_id": 27192, "rule_id": "yyUx3k", "rv_id": 111769, "url": "https://semgrep.dev/playground/r/jQTgyor/php.lang.security.taint-cookie-secure-false.taint-cookie-secure-false", "version_id": "jQTgyor"}}, "shortlink": "https://sg.run/GJx2", "source": "https://semgrep.dev/r/php.lang.security.taint-cookie-secure-false.taint-cookie-secure-false", "subcategory": ["vuln"], "technology": ["php"], "vulnerability_class": ["Cookie Security"]}, "metavars": {"$DOMAIN": {"abstract_content": "$_SERVER['HTTP_HOST']", "end": {"col": 105, "line": 11, "offset": 368}, "start": {"col": 84, "line": 11, "offset": 347}}, "$EXPIRES": {"abstract_content": "time()+3600", "end": {"col": 53, "line": 11, "offset": 316}, "start": {"col": 42, "line": 11, "offset": 305}}, "$NAME": {"abstract_content": "\"dvwaSession\"", "end": {"col": 25, "line": 11, "offset": 288}, "start": {"col": 12, "line": 11, "offset": 275}}, "$PATH": {"abstract_content": "\"/vulnerabilities/weak_id/\"", "end": {"col": 82, "line": 11, "offset": 345}, "start": {"col": 55, "line": 11, "offset": 318}}, "$SINK": {"abstract_content": "false", "end": {"col": 112, "line": 11, "offset": 375}, "start": {"col": 107, "line": 11, "offset": 370}}, "$VALUE": {"abstract_content": "$cookie_value", "end": {"col": 40, "line": 11, "offset": 303}, "propagated_value": {"svalue_abstract_content": "md5($_SESSION['last_session_id_high'])", "svalue_end": {"col": 56, "line": 10, "offset": 261}, "svalue_start": {"col": 18, "line": 10, "offset": 223}}, "start": {"col": 27, "line": 11, "offset": 290}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "vulnerabilities/weak_id/source/high.php", "start": {"col": 107, "line": 11, "offset": 370}}, {"check_id": "php.lang.security.taint-cookie-http-false.taint-cookie-http-false", "end": {"col": 119, "line": 11, "offset": 382}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 119, "line": 11, "offset": 382}, "path": "vulnerabilities/weak_id/source/high.php", "start": {"col": 114, "line": 11, "offset": 377}}, "false"]], "taint_source": ["CliLoc", [{"end": {"col": 119, "line": 11, "offset": 382}, "path": "vulnerabilities/weak_id/source/high.php", "start": {"col": 114, "line": 11, "offset": 377}}, "false"]]}, "engine_kind": "OSS", "fingerprint": "fc95e882c7383fad2dc64c7f5059cad8057f5a26ea9fef9213180073074523993ac7ca1515818f86ee7aba457bd11a2e6fc1af0c37a5ba82669eb3500fff55ec_0", "is_ignored": false, "lines": "\tsetcookie(\"dvwaSession\", $cookie_value, time()+3600, \"/vulnerabilities/weak_id/\", $_SERVER['HTTP_HOST'], false, false);", "message": "HttpOnly cookie flag is explicitly disabled. This will cause cookies to be transmitted over unencrypted HTTP connections which can allow theft of confidential user data such as session tokens.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-1004: Sensitive Cookie Without 'HttpOnly' Flag"], "functional-categories": ["debug::search::active-debug-code::lang"], "impact": "LOW", "license": "Copyright 2023 Semgrep, Inc.", "likelihood": "MEDIUM", "owasp": ["A05:2021 - Security Misconfiguration"], "references": ["https://www.php.net/manual/en/function.setcookie.php", "https://www.php.net/manual/en/function.session-set-cookie-params.php", "https://www.php.net/manual/en/configuration.file.php"], "semgrep.dev": {"rule": {"origin": "pro_rules", "r_id": 27191, "rule_id": "9AU4dD", "rv_id": 111768, "url": "https://semgrep.dev/playground/r/X0TQ2rg/php.lang.security.taint-cookie-http-false.taint-cookie-http-false", "version_id": "X0TQ2rg"}}, "shortlink": "https://sg.run/5qrX", "source": "https://semgrep.dev/r/php.lang.security.taint-cookie-http-false.taint-cookie-http-false", "subcategory": ["vuln"], "technology": ["php"], "vulnerability_class": ["Cookie Security"]}, "metavars": {"$DOMAIN": {"abstract_content": "$_SERVER['HTTP_HOST']", "end": {"col": 105, "line": 11, "offset": 368}, "start": {"col": 84, "line": 11, "offset": 347}}, "$EXPIRES": {"abstract_content": "time()+3600", "end": {"col": 53, "line": 11, "offset": 316}, "start": {"col": 42, "line": 11, "offset": 305}}, "$NAME": {"abstract_content": "\"dvwaSession\"", "end": {"col": 25, "line": 11, "offset": 288}, "start": {"col": 12, "line": 11, "offset": 275}}, "$PATH": {"abstract_content": "\"/vulnerabilities/weak_id/\"", "end": {"col": 82, "line": 11, "offset": 345}, "start": {"col": 55, "line": 11, "offset": 318}}, "$SECURE": {"abstract_content": "false", "end": {"col": 112, "line": 11, "offset": 375}, "start": {"col": 107, "line": 11, "offset": 370}}, "$SINK": {"abstract_content": "false", "end": {"col": 119, "line": 11, "offset": 382}, "start": {"col": 114, "line": 11, "offset": 377}}, "$VALUE": {"abstract_content": "$cookie_value", "end": {"col": 40, "line": 11, "offset": 303}, "propagated_value": {"svalue_abstract_content": "md5($_SESSION['last_session_id_high'])", "svalue_end": {"col": 56, "line": 10, "offset": 261}, "svalue_start": {"col": 18, "line": 10, "offset": 223}}, "start": {"col": 27, "line": 11, "offset": 290}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "vulnerabilities/weak_id/source/high.php", "start": {"col": 114, "line": 11, "offset": 377}}, {"check_id": "php.lang.security.tainted-user-input-in-php-script.tainted-user-input-in-php-script", "end": {"col": 42, "line": 8, "offset": 206}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 42, "line": 8, "offset": 206}, "path": "vulnerabilities/xss_r/source/low.php", "start": {"col": 27, "line": 8, "offset": 191}}, "$_GET[ 'name' ]"]], "taint_source": ["CliLoc", [{"end": {"col": 32, "line": 8, "offset": 196}, "path": "vulnerabilities/xss_r/source/low.php", "start": {"col": 27, "line": 8, "offset": 191}}, "$_GET"]]}, "engine_kind": "OSS", "fingerprint": "312b6b2246ec3b96a4a33fec68377410d7a2de2123d1b4700f695859ca431b59d20f2839a22a85c2101b53b2a1cba653dddef93589470bd55eca8b73dfb932a2_0", "is_ignored": false, "lines": "\t$html .= '<pre>Hello ' . $_GET[ 'name' ] . '</pre>';", "message": "Untrusted input could be used to tamper with a web page rendering, which can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "functional-categories": ["web::source::cookie::lang", "web::source::http-params::lang", "web::source::http-body::lang", "web::source::url-path-params::lang", "web::sink::html-webpage::lang"], "impact": "MEDIUM", "license": "Copyright 2023 Semgrep, Inc.", "likelihood": "HIGH", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://brightsec.com/blog/cross-site-scripting-php/", "https://github.com/tolgadevsec/PHP-Security-Cheatsheet#cross-site-scripting"], "semgrep.dev": {"rule": {"origin": "pro_rules", "r_id": 27201, "rule_id": "v8U01O", "rv_id": 111778, "url": "https://semgrep.dev/playground/r/xyTKpkw/php.lang.security.tainted-user-input-in-php-script.tainted-user-input-in-php-script", "version_id": "xyTKpkw"}}, "shortlink": "https://sg.run/PKkY", "source": "https://semgrep.dev/r/php.lang.security.tainted-user-input-in-php-script.tainted-user-input-in-php-script", "subcategory": ["vuln"], "technology": ["php", "generic"], "vulnerability_class": ["Cross-Site-Scripting (XSS)"]}, "metavars": {"$1": {"abstract_content": "'", "end": {"col": 12, "line": 8, "offset": 176}, "start": {"col": 11, "line": 8, "offset": 175}}, "$2": {"abstract_content": "'", "end": {"col": 24, "line": 8, "offset": 188}, "start": {"col": 23, "line": 8, "offset": 187}}, "$ENDTAG": {"abstract_content": "'</pre>'", "end": {"col": 53, "line": 8, "offset": 217}, "start": {"col": 45, "line": 8, "offset": 209}}, "$PHP": {"abstract_content": "$_GET['name']", "end": {"col": 42, "line": 8, "offset": 206}, "start": {"col": 27, "line": 8, "offset": 191}}, "$TAG": {"abstract_content": "'<pre>Hello '", "end": {"col": 24, "line": 8, "offset": 188}, "start": {"col": 11, "line": 8, "offset": 175}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "vulnerabilities/xss_r/source/low.php", "start": {"col": 27, "line": 8, "offset": 191}}], "skipped_rules": [], "version": "1.56.0"}